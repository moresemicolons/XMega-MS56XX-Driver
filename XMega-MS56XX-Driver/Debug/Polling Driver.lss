
Polling Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  00002a9c  00002b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008020cc  008020cc  00002bfc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e1bf  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fda  00000000  00000000  0001108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005699  00000000  00000000  00016069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  0001b704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030f62  00000000  00000000  0001bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000242b  00000000  00000000  0004cbd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0004f001  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b965  00000000  00000000  0004f209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e9       	ldi	r30, 0x9C	; 156
     21c:	fa e2       	ldi	r31, 0x2A	; 42
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 3c       	cpi	r26, 0xCC	; 204
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ac ec       	ldi	r26, 0xCC	; 204
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ac 3d       	cpi	r26, 0xDC	; 220
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <main>
     244:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     254:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <stdio_base>
     258:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <stdio_base+0x1>
     25c:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <__data_end>
     260:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <__data_end+0x1>
     264:	be 01       	movw	r22, r28
     266:	6f 5f       	subi	r22, 0xFF	; 255
     268:	7f 4f       	sbci	r23, 0xFF	; 255
     26a:	19 95       	eicall
	return c;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
}
     26e:	08 2e       	mov	r0, r24
     270:	00 0c       	add	r0, r0
     272:	99 0b       	sbc	r25, r25
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     27c:	fc 01       	movw	r30, r24
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	95 ff       	sbrs	r25, 5
     282:	fd cf       	rjmp	.-6      	; 0x27e <usart_putchar+0x2>
     284:	60 83       	st	Z, r22
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret

0000028c <usart_getchar>:
     28c:	fc 01       	movw	r30, r24
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	99 23       	and	r25, r25
     292:	ec f7       	brge	.-6      	; 0x28e <usart_getchar+0x2>
     294:	80 81       	ld	r24, Z
     296:	08 95       	ret

00000298 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     298:	4f 92       	push	r4
     29a:	5f 92       	push	r5
     29c:	6f 92       	push	r6
     29e:	7f 92       	push	r7
     2a0:	8f 92       	push	r8
     2a2:	9f 92       	push	r9
     2a4:	af 92       	push	r10
     2a6:	bf 92       	push	r11
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	7c 01       	movw	r14, r24
     2b4:	4a 01       	movw	r8, r20
     2b6:	5b 01       	movw	r10, r22
     2b8:	28 01       	movw	r4, r16
     2ba:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2bc:	fc 01       	movw	r30, r24
     2be:	84 81       	ldd	r24, Z+4	; 0x04
     2c0:	82 ff       	sbrs	r24, 2
     2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2c4:	d9 01       	movw	r26, r18
     2c6:	c8 01       	movw	r24, r16
     2c8:	68 94       	set
     2ca:	12 f8       	bld	r1, 2
     2cc:	b6 95       	lsr	r27
     2ce:	a7 95       	ror	r26
     2d0:	97 95       	ror	r25
     2d2:	87 95       	ror	r24
     2d4:	16 94       	lsr	r1
     2d6:	d1 f7       	brne	.-12     	; 0x2cc <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d8:	b9 01       	movw	r22, r18
     2da:	a8 01       	movw	r20, r16
     2dc:	03 2e       	mov	r0, r19
     2de:	36 e1       	ldi	r19, 0x16	; 22
     2e0:	76 95       	lsr	r23
     2e2:	67 95       	ror	r22
     2e4:	57 95       	ror	r21
     2e6:	47 95       	ror	r20
     2e8:	3a 95       	dec	r19
     2ea:	d1 f7       	brne	.-12     	; 0x2e0 <usart_set_baudrate+0x48>
     2ec:	30 2d       	mov	r19, r0
     2ee:	15 c0       	rjmp	.+42     	; 0x31a <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2f0:	d9 01       	movw	r26, r18
     2f2:	c8 01       	movw	r24, r16
     2f4:	68 94       	set
     2f6:	13 f8       	bld	r1, 3
     2f8:	b6 95       	lsr	r27
     2fa:	a7 95       	ror	r26
     2fc:	97 95       	ror	r25
     2fe:	87 95       	ror	r24
     300:	16 94       	lsr	r1
     302:	d1 f7       	brne	.-12     	; 0x2f8 <usart_set_baudrate+0x60>
		min_rate /= 2;
     304:	b9 01       	movw	r22, r18
     306:	a8 01       	movw	r20, r16
     308:	03 2e       	mov	r0, r19
     30a:	37 e1       	ldi	r19, 0x17	; 23
     30c:	76 95       	lsr	r23
     30e:	67 95       	ror	r22
     310:	57 95       	ror	r21
     312:	47 95       	ror	r20
     314:	3a 95       	dec	r19
     316:	d1 f7       	brne	.-12     	; 0x30c <usart_set_baudrate+0x74>
     318:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     31a:	88 15       	cp	r24, r8
     31c:	99 05       	cpc	r25, r9
     31e:	aa 05       	cpc	r26, r10
     320:	bb 05       	cpc	r27, r11
     322:	08 f4       	brcc	.+2      	; 0x326 <usart_set_baudrate+0x8e>
     324:	a6 c0       	rjmp	.+332    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     326:	84 16       	cp	r8, r20
     328:	95 06       	cpc	r9, r21
     32a:	a6 06       	cpc	r10, r22
     32c:	b7 06       	cpc	r11, r23
     32e:	08 f4       	brcc	.+2      	; 0x332 <usart_set_baudrate+0x9a>
     330:	a2 c0       	rjmp	.+324    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     332:	f7 01       	movw	r30, r14
     334:	84 81       	ldd	r24, Z+4	; 0x04
     336:	82 fd       	sbrc	r24, 2
     338:	04 c0       	rjmp	.+8      	; 0x342 <usart_set_baudrate+0xaa>
		baud *= 2;
     33a:	88 0c       	add	r8, r8
     33c:	99 1c       	adc	r9, r9
     33e:	aa 1c       	adc	r10, r10
     340:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     342:	c3 01       	movw	r24, r6
     344:	b2 01       	movw	r22, r4
     346:	a5 01       	movw	r20, r10
     348:	94 01       	movw	r18, r8
     34a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     34e:	2f 3f       	cpi	r18, 0xFF	; 255
     350:	31 05       	cpc	r19, r1
     352:	41 05       	cpc	r20, r1
     354:	51 05       	cpc	r21, r1
     356:	08 f4       	brcc	.+2      	; 0x35a <usart_set_baudrate+0xc2>
     358:	90 c0       	rjmp	.+288    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	a0 e0       	ldi	r26, 0x00	; 0
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	c9 ef       	ldi	r28, 0xF9	; 249
     364:	05 c0       	rjmp	.+10     	; 0x370 <usart_set_baudrate+0xd8>
     366:	28 17       	cp	r18, r24
     368:	39 07       	cpc	r19, r25
     36a:	4a 07       	cpc	r20, r26
     36c:	5b 07       	cpc	r21, r27
     36e:	58 f0       	brcs	.+22     	; 0x386 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	aa 1f       	adc	r26, r26
     376:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     378:	cd 3f       	cpi	r28, 0xFD	; 253
     37a:	0c f4       	brge	.+2      	; 0x37e <usart_set_baudrate+0xe6>
			limit |= 1;
     37c:	81 60       	ori	r24, 0x01	; 1
     37e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     380:	c7 30       	cpi	r28, 0x07	; 7
     382:	89 f7       	brne	.-30     	; 0x366 <usart_set_baudrate+0xce>
     384:	4f c0       	rjmp	.+158    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     386:	cc 23       	and	r28, r28
     388:	0c f0       	brlt	.+2      	; 0x38c <usart_set_baudrate+0xf4>
     38a:	4c c0       	rjmp	.+152    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     38c:	d5 01       	movw	r26, r10
     38e:	c4 01       	movw	r24, r8
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	aa 1f       	adc	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	aa 1f       	adc	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	aa 1f       	adc	r26, r26
     3a6:	bb 1f       	adc	r27, r27
     3a8:	48 1a       	sub	r4, r24
     3aa:	59 0a       	sbc	r5, r25
     3ac:	6a 0a       	sbc	r6, r26
     3ae:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3b0:	ce 3f       	cpi	r28, 0xFE	; 254
     3b2:	f4 f4       	brge	.+60     	; 0x3f0 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3b4:	8d ef       	ldi	r24, 0xFD	; 253
     3b6:	9f ef       	ldi	r25, 0xFF	; 255
     3b8:	8c 1b       	sub	r24, r28
     3ba:	91 09       	sbc	r25, r1
     3bc:	c7 fd       	sbrc	r28, 7
     3be:	93 95       	inc	r25
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <usart_set_baudrate+0x132>
     3c2:	44 0c       	add	r4, r4
     3c4:	55 1c       	adc	r5, r5
     3c6:	66 1c       	adc	r6, r6
     3c8:	77 1c       	adc	r7, r7
     3ca:	8a 95       	dec	r24
     3cc:	d2 f7       	brpl	.-12     	; 0x3c2 <usart_set_baudrate+0x12a>
     3ce:	d5 01       	movw	r26, r10
     3d0:	c4 01       	movw	r24, r8
     3d2:	b6 95       	lsr	r27
     3d4:	a7 95       	ror	r26
     3d6:	97 95       	ror	r25
     3d8:	87 95       	ror	r24
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	64 0d       	add	r22, r4
     3e0:	75 1d       	adc	r23, r5
     3e2:	86 1d       	adc	r24, r6
     3e4:	97 1d       	adc	r25, r7
     3e6:	a5 01       	movw	r20, r10
     3e8:	94 01       	movw	r18, r8
     3ea:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>
     3ee:	37 c0       	rjmp	.+110    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		} else {
			baud <<= exp + 3;
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	8c 0f       	add	r24, r28
     3f4:	a5 01       	movw	r20, r10
     3f6:	94 01       	movw	r18, r8
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	44 1f       	adc	r20, r20
     400:	55 1f       	adc	r21, r21
     402:	8a 95       	dec	r24
     404:	d2 f7       	brpl	.-12     	; 0x3fa <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     406:	da 01       	movw	r26, r20
     408:	c9 01       	movw	r24, r18
     40a:	b6 95       	lsr	r27
     40c:	a7 95       	ror	r26
     40e:	97 95       	ror	r25
     410:	87 95       	ror	r24
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	64 0d       	add	r22, r4
     418:	75 1d       	adc	r23, r5
     41a:	86 1d       	adc	r24, r6
     41c:	97 1d       	adc	r25, r7
     41e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>
     422:	1d c0       	rjmp	.+58     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	8c 0f       	add	r24, r28
     428:	a5 01       	movw	r20, r10
     42a:	94 01       	movw	r18, r8
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	44 1f       	adc	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	8a 95       	dec	r24
     438:	d2 f7       	brpl	.-12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		div = (cpu_hz + baud / 2) / baud - 1;
     43a:	da 01       	movw	r26, r20
     43c:	c9 01       	movw	r24, r18
     43e:	b6 95       	lsr	r27
     440:	a7 95       	ror	r26
     442:	97 95       	ror	r25
     444:	87 95       	ror	r24
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	64 0d       	add	r22, r4
     44c:	75 1d       	adc	r23, r5
     44e:	86 1d       	adc	r24, r6
     450:	97 1d       	adc	r25, r7
     452:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>
     456:	21 50       	subi	r18, 0x01	; 1
     458:	31 09       	sbc	r19, r1
     45a:	41 09       	sbc	r20, r1
     45c:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     45e:	83 2f       	mov	r24, r19
     460:	8f 70       	andi	r24, 0x0F	; 15
     462:	c2 95       	swap	r28
     464:	c0 7f       	andi	r28, 0xF0	; 240
     466:	c8 2b       	or	r28, r24
     468:	f7 01       	movw	r30, r14
     46a:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     46c:	26 83       	std	Z+6, r18	; 0x06

	return true;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	18 c0       	rjmp	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	16 c0       	rjmp	.+44     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	14 c0       	rjmp	.+40     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     47a:	d5 01       	movw	r26, r10
     47c:	c4 01       	movw	r24, r8
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	aa 1f       	adc	r26, r26
     484:	bb 1f       	adc	r27, r27
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	aa 1f       	adc	r26, r26
     48c:	bb 1f       	adc	r27, r27
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	aa 1f       	adc	r26, r26
     494:	bb 1f       	adc	r27, r27
     496:	48 1a       	sub	r4, r24
     498:	59 0a       	sbc	r5, r25
     49a:	6a 0a       	sbc	r6, r26
     49c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     49e:	c9 ef       	ldi	r28, 0xF9	; 249
     4a0:	89 cf       	rjmp	.-238    	; 0x3b4 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	bf 90       	pop	r11
     4ae:	af 90       	pop	r10
     4b0:	9f 90       	pop	r9
     4b2:	8f 90       	pop	r8
     4b4:	7f 90       	pop	r7
     4b6:	6f 90       	pop	r6
     4b8:	5f 90       	pop	r5
     4ba:	4f 90       	pop	r4
     4bc:	08 95       	ret

000004be <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
     4c8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <usart_init_rs232+0x12>
     4ce:	5d c1       	rjmp	.+698    	; 0x78a <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4d0:	80 3c       	cpi	r24, 0xC0	; 192
     4d2:	91 05       	cpc	r25, r1
     4d4:	29 f4       	brne	.+10     	; 0x4e0 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4d6:	60 e1       	ldi	r22, 0x10	; 16
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     4de:	55 c1       	rjmp	.+682    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     4e0:	c0 34       	cpi	r28, 0x40	; 64
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	d8 07       	cpc	r29, r24
     4e6:	29 f4       	brne	.+10     	; 0x4f2 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     4e8:	68 e0       	ldi	r22, 0x08	; 8
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     4f0:	4c c1       	rjmp	.+664    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4f2:	c1 15       	cp	r28, r1
     4f4:	e4 e0       	ldi	r30, 0x04	; 4
     4f6:	de 07       	cpc	r29, r30
     4f8:	29 f4       	brne	.+10     	; 0x504 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     502:	43 c1       	rjmp	.+646    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     504:	c0 38       	cpi	r28, 0x80	; 128
     506:	f1 e0       	ldi	r31, 0x01	; 1
     508:	df 07       	cpc	r29, r31
     50a:	29 f4       	brne	.+10     	; 0x516 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     50c:	62 e0       	ldi	r22, 0x02	; 2
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     514:	3a c1       	rjmp	.+628    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     516:	c1 15       	cp	r28, r1
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	d8 07       	cpc	r29, r24
     51c:	29 f4       	brne	.+10     	; 0x528 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     526:	31 c1       	rjmp	.+610    	; 0x78a <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     528:	c0 38       	cpi	r28, 0x80	; 128
     52a:	e3 e0       	ldi	r30, 0x03	; 3
     52c:	de 07       	cpc	r29, r30
     52e:	29 f4       	brne	.+10     	; 0x53a <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     538:	28 c1       	rjmp	.+592    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     53a:	c0 39       	cpi	r28, 0x90	; 144
     53c:	f3 e0       	ldi	r31, 0x03	; 3
     53e:	df 07       	cpc	r29, r31
     540:	29 f4       	brne	.+10     	; 0x54c <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     54a:	1f c1       	rjmp	.+574    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     54c:	c1 15       	cp	r28, r1
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	d8 07       	cpc	r29, r24
     552:	29 f4       	brne	.+10     	; 0x55e <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     554:	62 e0       	ldi	r22, 0x02	; 2
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     55c:	16 c1       	rjmp	.+556    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     55e:	c0 34       	cpi	r28, 0x40	; 64
     560:	e2 e0       	ldi	r30, 0x02	; 2
     562:	de 07       	cpc	r29, r30
     564:	29 f4       	brne	.+10     	; 0x570 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     56e:	0d c1       	rjmp	.+538    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     570:	c1 15       	cp	r28, r1
     572:	f3 e0       	ldi	r31, 0x03	; 3
     574:	df 07       	cpc	r29, r31
     576:	29 f4       	brne	.+10     	; 0x582 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     578:	64 e0       	ldi	r22, 0x04	; 4
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     580:	04 c1       	rjmp	.+520    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     582:	c0 32       	cpi	r28, 0x20	; 32
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	d8 07       	cpc	r29, r24
     588:	29 f4       	brne	.+10     	; 0x594 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     58a:	64 e0       	ldi	r22, 0x04	; 4
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     592:	fb c0       	rjmp	.+502    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     594:	c1 15       	cp	r28, r1
     596:	e8 e0       	ldi	r30, 0x08	; 8
     598:	de 07       	cpc	r29, r30
     59a:	29 f4       	brne	.+10     	; 0x5a6 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5a4:	f2 c0       	rjmp	.+484    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     5a6:	c1 15       	cp	r28, r1
     5a8:	f9 e0       	ldi	r31, 0x09	; 9
     5aa:	df 07       	cpc	r29, r31
     5ac:	29 f4       	brne	.+10     	; 0x5b8 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5b6:	e9 c0       	rjmp	.+466    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     5b8:	c1 15       	cp	r28, r1
     5ba:	8a e0       	ldi	r24, 0x0A	; 10
     5bc:	d8 07       	cpc	r29, r24
     5be:	29 f4       	brne	.+10     	; 0x5ca <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	85 e0       	ldi	r24, 0x05	; 5
     5c4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5c8:	e0 c0       	rjmp	.+448    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     5ca:	c1 15       	cp	r28, r1
     5cc:	eb e0       	ldi	r30, 0x0B	; 11
     5ce:	de 07       	cpc	r29, r30
     5d0:	29 f4       	brne	.+10     	; 0x5dc <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5da:	d7 c0       	rjmp	.+430    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5dc:	c0 34       	cpi	r28, 0x40	; 64
     5de:	f8 e0       	ldi	r31, 0x08	; 8
     5e0:	df 07       	cpc	r29, r31
     5e2:	29 f4       	brne	.+10     	; 0x5ee <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5ec:	ce c0       	rjmp	.+412    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5ee:	c0 34       	cpi	r28, 0x40	; 64
     5f0:	89 e0       	ldi	r24, 0x09	; 9
     5f2:	d8 07       	cpc	r29, r24
     5f4:	29 f4       	brne	.+10     	; 0x600 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     5fe:	c5 c0       	rjmp	.+394    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     600:	c0 34       	cpi	r28, 0x40	; 64
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	de 07       	cpc	r29, r30
     606:	29 f4       	brne	.+10     	; 0x612 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     610:	bc c0       	rjmp	.+376    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     612:	c0 34       	cpi	r28, 0x40	; 64
     614:	fb e0       	ldi	r31, 0x0B	; 11
     616:	df 07       	cpc	r29, r31
     618:	29 f4       	brne	.+10     	; 0x624 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	86 e0       	ldi	r24, 0x06	; 6
     61e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     622:	b3 c0       	rjmp	.+358    	; 0x78a <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     624:	c0 39       	cpi	r28, 0x90	; 144
     626:	88 e0       	ldi	r24, 0x08	; 8
     628:	d8 07       	cpc	r29, r24
     62a:	29 f4       	brne	.+10     	; 0x636 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     62c:	64 e0       	ldi	r22, 0x04	; 4
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     634:	aa c0       	rjmp	.+340    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     636:	c0 39       	cpi	r28, 0x90	; 144
     638:	e9 e0       	ldi	r30, 0x09	; 9
     63a:	de 07       	cpc	r29, r30
     63c:	29 f4       	brne	.+10     	; 0x648 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     63e:	64 e0       	ldi	r22, 0x04	; 4
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     646:	a1 c0       	rjmp	.+322    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     648:	c0 39       	cpi	r28, 0x90	; 144
     64a:	fa e0       	ldi	r31, 0x0A	; 10
     64c:	df 07       	cpc	r29, r31
     64e:	29 f4       	brne	.+10     	; 0x65a <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     650:	64 e0       	ldi	r22, 0x04	; 4
     652:	85 e0       	ldi	r24, 0x05	; 5
     654:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     658:	98 c0       	rjmp	.+304    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     65a:	c0 39       	cpi	r28, 0x90	; 144
     65c:	8b e0       	ldi	r24, 0x0B	; 11
     65e:	d8 07       	cpc	r29, r24
     660:	29 f4       	brne	.+10     	; 0x66c <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     662:	64 e0       	ldi	r22, 0x04	; 4
     664:	86 e0       	ldi	r24, 0x06	; 6
     666:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     66a:	8f c0       	rjmp	.+286    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     66c:	c0 3c       	cpi	r28, 0xC0	; 192
     66e:	e8 e0       	ldi	r30, 0x08	; 8
     670:	de 07       	cpc	r29, r30
     672:	29 f4       	brne	.+10     	; 0x67e <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     674:	68 e0       	ldi	r22, 0x08	; 8
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     67c:	86 c0       	rjmp	.+268    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     67e:	c0 3c       	cpi	r28, 0xC0	; 192
     680:	f9 e0       	ldi	r31, 0x09	; 9
     682:	df 07       	cpc	r29, r31
     684:	29 f4       	brne	.+10     	; 0x690 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     686:	68 e0       	ldi	r22, 0x08	; 8
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     68e:	7d c0       	rjmp	.+250    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     690:	c0 3c       	cpi	r28, 0xC0	; 192
     692:	8a e0       	ldi	r24, 0x0A	; 10
     694:	d8 07       	cpc	r29, r24
     696:	29 f4       	brne	.+10     	; 0x6a2 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     698:	68 e0       	ldi	r22, 0x08	; 8
     69a:	85 e0       	ldi	r24, 0x05	; 5
     69c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6a0:	74 c0       	rjmp	.+232    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     6a2:	c0 3c       	cpi	r28, 0xC0	; 192
     6a4:	eb e0       	ldi	r30, 0x0B	; 11
     6a6:	de 07       	cpc	r29, r30
     6a8:	29 f4       	brne	.+10     	; 0x6b4 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     6aa:	68 e0       	ldi	r22, 0x08	; 8
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6b2:	6b c0       	rjmp	.+214    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     6b4:	c0 3a       	cpi	r28, 0xA0	; 160
     6b6:	f8 e0       	ldi	r31, 0x08	; 8
     6b8:	df 07       	cpc	r29, r31
     6ba:	29 f4       	brne	.+10     	; 0x6c6 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     6bc:	60 e1       	ldi	r22, 0x10	; 16
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6c4:	62 c0       	rjmp	.+196    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     6c6:	c0 3a       	cpi	r28, 0xA0	; 160
     6c8:	89 e0       	ldi	r24, 0x09	; 9
     6ca:	d8 07       	cpc	r29, r24
     6cc:	29 f4       	brne	.+10     	; 0x6d8 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     6ce:	60 e1       	ldi	r22, 0x10	; 16
     6d0:	84 e0       	ldi	r24, 0x04	; 4
     6d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6d6:	59 c0       	rjmp	.+178    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     6d8:	c0 3a       	cpi	r28, 0xA0	; 160
     6da:	ea e0       	ldi	r30, 0x0A	; 10
     6dc:	de 07       	cpc	r29, r30
     6de:	29 f4       	brne	.+10     	; 0x6ea <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     6e0:	60 e1       	ldi	r22, 0x10	; 16
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6e8:	50 c0       	rjmp	.+160    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     6ea:	c0 3a       	cpi	r28, 0xA0	; 160
     6ec:	fb e0       	ldi	r31, 0x0B	; 11
     6ee:	df 07       	cpc	r29, r31
     6f0:	29 f4       	brne	.+10     	; 0x6fc <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     6f2:	60 e1       	ldi	r22, 0x10	; 16
     6f4:	86 e0       	ldi	r24, 0x06	; 6
     6f6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     6fa:	47 c0       	rjmp	.+142    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     6fc:	c0 3b       	cpi	r28, 0xB0	; 176
     6fe:	88 e0       	ldi	r24, 0x08	; 8
     700:	d8 07       	cpc	r29, r24
     702:	29 f4       	brne	.+10     	; 0x70e <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     704:	60 e2       	ldi	r22, 0x20	; 32
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     70c:	3e c0       	rjmp	.+124    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     70e:	c0 3b       	cpi	r28, 0xB0	; 176
     710:	e9 e0       	ldi	r30, 0x09	; 9
     712:	de 07       	cpc	r29, r30
     714:	29 f4       	brne	.+10     	; 0x720 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     716:	60 e2       	ldi	r22, 0x20	; 32
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     71e:	35 c0       	rjmp	.+106    	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     720:	c0 3b       	cpi	r28, 0xB0	; 176
     722:	fa e0       	ldi	r31, 0x0A	; 10
     724:	df 07       	cpc	r29, r31
     726:	29 f4       	brne	.+10     	; 0x732 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     728:	60 e2       	ldi	r22, 0x20	; 32
     72a:	85 e0       	ldi	r24, 0x05	; 5
     72c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     730:	2c c0       	rjmp	.+88     	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     732:	c0 3b       	cpi	r28, 0xB0	; 176
     734:	8b e0       	ldi	r24, 0x0B	; 11
     736:	d8 07       	cpc	r29, r24
     738:	29 f4       	brne	.+10     	; 0x744 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     73a:	60 e2       	ldi	r22, 0x20	; 32
     73c:	86 e0       	ldi	r24, 0x06	; 6
     73e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     742:	23 c0       	rjmp	.+70     	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     744:	c0 38       	cpi	r28, 0x80	; 128
     746:	e4 e0       	ldi	r30, 0x04	; 4
     748:	de 07       	cpc	r29, r30
     74a:	29 f4       	brne	.+10     	; 0x756 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     74c:	60 e4       	ldi	r22, 0x40	; 64
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     754:	1a c0       	rjmp	.+52     	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     756:	c0 39       	cpi	r28, 0x90	; 144
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	df 07       	cpc	r29, r31
     75c:	29 f4       	brne	.+10     	; 0x768 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     75e:	60 e4       	ldi	r22, 0x40	; 64
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     766:	11 c0       	rjmp	.+34     	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     768:	c0 3a       	cpi	r28, 0xA0	; 160
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	d8 07       	cpc	r29, r24
     76e:	29 f4       	brne	.+10     	; 0x77a <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     770:	60 e4       	ldi	r22, 0x40	; 64
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
     778:	08 c0       	rjmp	.+16     	; 0x78a <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     77a:	c0 3b       	cpi	r28, 0xB0	; 176
     77c:	e4 e0       	ldi	r30, 0x04	; 4
     77e:	de 07       	cpc	r29, r30
     780:	21 f4       	brne	.+8      	; 0x78a <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     782:	60 e4       	ldi	r22, 0x40	; 64
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	8f 73       	andi	r24, 0x3F	; 63
     78e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     790:	f8 01       	movw	r30, r16
     792:	95 81       	ldd	r25, Z+5	; 0x05
     794:	84 81       	ldd	r24, Z+4	; 0x04
     796:	89 2b       	or	r24, r25
     798:	96 81       	ldd	r25, Z+6	; 0x06
     79a:	91 11       	cpse	r25, r1
     79c:	98 e0       	ldi	r25, 0x08	; 8
     79e:	89 2b       	or	r24, r25
     7a0:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     7a2:	f8 01       	movw	r30, r16
     7a4:	40 81       	ld	r20, Z
     7a6:	51 81       	ldd	r21, Z+1	; 0x01
     7a8:	62 81       	ldd	r22, Z+2	; 0x02
     7aa:	73 81       	ldd	r23, Z+3	; 0x03
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	18 e4       	ldi	r17, 0x48	; 72
     7b0:	28 ee       	ldi	r18, 0xE8	; 232
     7b2:	31 e0       	ldi	r19, 0x01	; 1
     7b4:	ce 01       	movw	r24, r28
     7b6:	70 dd       	rcall	.-1312   	; 0x298 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	98 60       	ori	r25, 0x08	; 8
     7bc:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     7be:	9c 81       	ldd	r25, Y+4	; 0x04
     7c0:	90 61       	ori	r25, 0x10	; 16
     7c2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <__portable_avr_delay_cycles>:
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
}
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__portable_avr_delay_cycles+0xa>
     7d0:	61 50       	subi	r22, 0x01	; 1
     7d2:	71 09       	sbc	r23, r1
     7d4:	81 09       	sbc	r24, r1
     7d6:	91 09       	sbc	r25, r1
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	81 05       	cpc	r24, r1
     7de:	91 05       	cpc	r25, r1
     7e0:	b9 f7       	brne	.-18     	; 0x7d0 <__portable_avr_delay_cycles+0x2>
     7e2:	08 95       	ret

000007e4 <read16>:
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	8c 01       	movw	r16, r24
     7ee:	65 d5       	rcall	.+2762   	; 0x12ba <spiread>
     7f0:	c8 2f       	mov	r28, r24
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
     7f4:	dc 2f       	mov	r29, r28
     7f6:	cc 27       	eor	r28, r28
     7f8:	c8 01       	movw	r24, r16
     7fa:	5f d5       	rcall	.+2750   	; 0x12ba <spiread>
     7fc:	9e 01       	movw	r18, r28
     7fe:	28 2b       	or	r18, r24
     800:	c9 01       	movw	r24, r18
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <read24>:
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
     81a:	4f d5       	rcall	.+2718   	; 0x12ba <spiread>
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	e1 2c       	mov	r14, r1
     822:	f1 2c       	mov	r15, r1
     824:	76 01       	movw	r14, r12
     826:	dd 24       	eor	r13, r13
     828:	cc 24       	eor	r12, r12
     82a:	ce 01       	movw	r24, r28
     82c:	46 d5       	rcall	.+2700   	; 0x12ba <spiread>
     82e:	d8 2a       	or	r13, r24
     830:	ce 01       	movw	r24, r28
     832:	43 d5       	rcall	.+2694   	; 0x12ba <spiread>
     834:	a7 01       	movw	r20, r14
     836:	96 01       	movw	r18, r12
     838:	28 2b       	or	r18, r24
     83a:	ca 01       	movw	r24, r20
     83c:	b9 01       	movw	r22, r18
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	08 95       	ret

0000084c <define_new_MS56XX_default_OSR>:
	MS56XX_t pressure_sensor;
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
     850:	41 83       	std	Z+1, r20	; 0x01
     852:	52 83       	std	Z+2, r21	; 0x02
     854:	63 83       	std	Z+3, r22	; 0x03
     856:	15 86       	std	Z+13, r1	; 0x0d
}

MS56XX_t define_new_MS56XX_default_OSR(SENSOR_TYPE model, SPI_t* spi, ioport_pin_t select_pin)
{
	return define_new_MS56XX(model, spi, select_pin, OSR_4096); //Default to highest oversampling rate if not provided
}
     858:	08 95       	ret

0000085a <pressureSensorReset>:

void pressureSensorReset(MS56XX_t* sensor)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
	spiselect(sensor->select_pin);
     860:	88 81       	ld	r24, Y
     862:	39 d5       	rcall	.+2674   	; 0x12d6 <spiselect>
	spiwrite(sensor->spi, 0b00011110);
     864:	6e e1       	ldi	r22, 0x1E	; 30
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	2f d5       	rcall	.+2654   	; 0x12ca <spiwrite>
	delay_ms(5);
     86c:	6b e2       	ldi	r22, 0x2B	; 43
     86e:	78 e6       	ldi	r23, 0x68	; 104
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
	spideselect(sensor->select_pin);
     874:	ac df       	rcall	.-168    	; 0x7ce <__portable_avr_delay_cycles>
     876:	88 81       	ld	r24, Y
	delay_ms(1);
     878:	42 d5       	rcall	.+2692   	; 0x12fe <spideselect>
     87a:	66 ed       	ldi	r22, 0xD6	; 214
     87c:	74 e1       	ldi	r23, 0x14	; 20
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
}
     882:	a5 df       	rcall	.-182    	; 0x7ce <__portable_avr_delay_cycles>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <calibratePressureSensor>:

void calibratePressureSensor(MS56XX_t* sensor)
//Set up the appropriate SPI before calling this
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	pressureSensorReset(sensor);
	
	//Get all the lovely little calibration constants
	spiselect(sensor->select_pin);
     88e:	ec 01       	movw	r28, r24
     890:	e4 df       	rcall	.-56     	; 0x85a <pressureSensorReset>
	spiwrite(sensor->spi, 0b10100010); //Bits 1 - 3 are 001, for C1
     892:	88 81       	ld	r24, Y
     894:	20 d5       	rcall	.+2624   	; 0x12d6 <spiselect>
     896:	62 ea       	ldi	r22, 0xA2	; 162
	sensor->SENSt1 = read16(sensor->spi);
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	16 d5       	rcall	.+2604   	; 0x12ca <spiwrite>
     89e:	89 81       	ldd	r24, Y+1	; 0x01
	spideselect(sensor->select_pin);
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	a0 df       	rcall	.-192    	; 0x7e4 <read16>

	spiselect(sensor->select_pin);
     8a4:	8e 87       	std	Y+14, r24	; 0x0e
	spiwrite(sensor->spi, 0b10100100); //010 = 2, for C2
     8a6:	9f 87       	std	Y+15, r25	; 0x0f
     8a8:	88 81       	ld	r24, Y
     8aa:	29 d5       	rcall	.+2642   	; 0x12fe <spideselect>
	sensor->OFFt1 = read16(sensor->spi);
     8ac:	88 81       	ld	r24, Y
     8ae:	13 d5       	rcall	.+2598   	; 0x12d6 <spiselect>
     8b0:	64 ea       	ldi	r22, 0xA4	; 164
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
	spideselect(sensor->select_pin);
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	09 d5       	rcall	.+2578   	; 0x12ca <spiwrite>

	spiselect(sensor->select_pin);
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
	spiwrite(sensor->spi, 0b10100110); // 011 = 3, for C3
     8bc:	93 df       	rcall	.-218    	; 0x7e4 <read16>
     8be:	88 8b       	std	Y+16, r24	; 0x10
     8c0:	99 8b       	std	Y+17, r25	; 0x11
	sensor->TCS = read16(sensor->spi);
     8c2:	88 81       	ld	r24, Y
     8c4:	1c d5       	rcall	.+2616   	; 0x12fe <spideselect>
     8c6:	88 81       	ld	r24, Y
     8c8:	06 d5       	rcall	.+2572   	; 0x12d6 <spiselect>
	spideselect(sensor->select_pin);
     8ca:	66 ea       	ldi	r22, 0xA6	; 166
     8cc:	89 81       	ldd	r24, Y+1	; 0x01

	spiselect(sensor->select_pin);
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	fc d4       	rcall	.+2552   	; 0x12ca <spiwrite>
	spiwrite(sensor->spi, 0b10101000); // 100 = 4
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	86 df       	rcall	.-244    	; 0x7e4 <read16>
	sensor->TCO = read16(sensor->spi);
     8d8:	8a 8b       	std	Y+18, r24	; 0x12
     8da:	9b 8b       	std	Y+19, r25	; 0x13
     8dc:	88 81       	ld	r24, Y
	spideselect(sensor->select_pin);
     8de:	0f d5       	rcall	.+2590   	; 0x12fe <spideselect>
     8e0:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     8e2:	f9 d4       	rcall	.+2546   	; 0x12d6 <spiselect>
     8e4:	68 ea       	ldi	r22, 0xA8	; 168
	spiwrite(sensor->spi, 0b10101010); // 101 = 5
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	ef d4       	rcall	.+2526   	; 0x12ca <spiwrite>
	sensor->Tref = read16(sensor->spi);
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	79 df       	rcall	.-270    	; 0x7e4 <read16>
     8f2:	8c 8b       	std	Y+20, r24	; 0x14
     8f4:	9d 8b       	std	Y+21, r25	; 0x15
	spideselect(sensor->select_pin);
     8f6:	88 81       	ld	r24, Y
     8f8:	02 d5       	rcall	.+2564   	; 0x12fe <spideselect>
     8fa:	88 81       	ld	r24, Y


	spiselect(sensor->select_pin);
     8fc:	ec d4       	rcall	.+2520   	; 0x12d6 <spiselect>
     8fe:	6a ea       	ldi	r22, 0xAA	; 170
     900:	89 81       	ldd	r24, Y+1	; 0x01
	spiwrite(sensor->spi, 0b10101100); // 110 = 6
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	e2 d4       	rcall	.+2500   	; 0x12ca <spiwrite>
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	6c df       	rcall	.-296    	; 0x7e4 <read16>
	sensor->TEMPSENS = read16(sensor->spi);
     90c:	8e 8b       	std	Y+22, r24	; 0x16
     90e:	9f 8b       	std	Y+23, r25	; 0x17
     910:	88 81       	ld	r24, Y
     912:	f5 d4       	rcall	.+2538   	; 0x12fe <spideselect>
     914:	88 81       	ld	r24, Y
     916:	df d4       	rcall	.+2494   	; 0x12d6 <spiselect>
	spideselect(sensor->select_pin);
     918:	6c ea       	ldi	r22, 0xAC	; 172
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02

	printf("C1\tC2\tC3\tC4\tC5\tC6\t\n");
     91e:	d5 d4       	rcall	.+2474   	; 0x12ca <spiwrite>
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	5f df       	rcall	.-322    	; 0x7e4 <read16>
	printf("%u\t%u\t%u\t%u\t%u\t%u\n", 
     926:	88 8f       	std	Y+24, r24	; 0x18
     928:	99 8f       	std	Y+25, r25	; 0x19
     92a:	88 81       	ld	r24, Y
     92c:	e8 d4       	rcall	.+2512   	; 0x12fe <spideselect>
     92e:	8d e0       	ldi	r24, 0x0D	; 13
     930:	90 e2       	ldi	r25, 0x20	; 32
     932:	0e 94 33 11 	call	0x2266	; 0x2266 <puts>
     936:	89 8d       	ldd	r24, Y+25	; 0x19
     938:	8f 93       	push	r24
     93a:	88 8d       	ldd	r24, Y+24	; 0x18
     93c:	8f 93       	push	r24
     93e:	8f 89       	ldd	r24, Y+23	; 0x17
     940:	8f 93       	push	r24
     942:	8e 89       	ldd	r24, Y+22	; 0x16
     944:	8f 93       	push	r24
     946:	8d 89       	ldd	r24, Y+21	; 0x15
     948:	8f 93       	push	r24
     94a:	8c 89       	ldd	r24, Y+20	; 0x14
     94c:	8f 93       	push	r24
     94e:	8b 89       	ldd	r24, Y+19	; 0x13
     950:	8f 93       	push	r24
     952:	8a 89       	ldd	r24, Y+18	; 0x12
     954:	8f 93       	push	r24
     956:	89 89       	ldd	r24, Y+17	; 0x11
     958:	8f 93       	push	r24
     95a:	88 89       	ldd	r24, Y+16	; 0x10
     95c:	8f 93       	push	r24
     95e:	8f 85       	ldd	r24, Y+15	; 0x0f
     960:	8f 93       	push	r24
			sensor->OFFt1, 
			sensor->TCS, 
			sensor->TCO, 
			sensor->Tref, 
			sensor->TEMPSENS);
}
     962:	8e 85       	ldd	r24, Y+14	; 0x0e
     964:	8f 93       	push	r24
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	90 e2       	ldi	r25, 0x20	; 32
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	0e 94 20 11 	call	0x2240	; 0x2240 <printf>
     972:	8d b7       	in	r24, 0x3d	; 61
     974:	9e b7       	in	r25, 0x3e	; 62
     976:	0e 96       	adiw	r24, 0x0e	; 14
     978:	8d bf       	out	0x3d, r24	; 61
     97a:	9e bf       	out	0x3e, r25	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <get_read_info>:
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
 }
 
 uint8_t get_read_info(OSR_Settings osr, uint8_t* D1_read_cmd, uint8_t* D2_read_cmd, uint16_t* delay_time_us)
 {
	 switch (osr)
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	29 f1       	breq	.+74     	; 0x9d0 <get_read_info+0x4e>
     986:	28 f4       	brcc	.+10     	; 0x992 <get_read_info+0x10>
     988:	88 23       	and	r24, r24
     98a:	41 f0       	breq	.+16     	; 0x99c <get_read_info+0x1a>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	99 f0       	breq	.+38     	; 0x9b6 <get_read_info+0x34>
     990:	46 c0       	rjmp	.+140    	; 0xa1e <get_read_info+0x9c>
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	51 f1       	breq	.+84     	; 0x9ea <get_read_info+0x68>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	a9 f1       	breq	.+106    	; 0xa04 <get_read_info+0x82>
     99a:	41 c0       	rjmp	.+130    	; 0xa1e <get_read_info+0x9c>
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
     99c:	88 e4       	ldi	r24, 0x48	; 72
     99e:	fb 01       	movw	r30, r22
     9a0:	80 83       	st	Z, r24
			*D2_read_cmd = 0x58;
     9a2:	88 e5       	ldi	r24, 0x58	; 88
     9a4:	fa 01       	movw	r30, r20
     9a6:	80 83       	st	Z, r24
			*delay_time_us = 9040;
     9a8:	80 e5       	ldi	r24, 0x50	; 80
     9aa:	93 e2       	ldi	r25, 0x23	; 35
     9ac:	f9 01       	movw	r30, r18
     9ae:	80 83       	st	Z, r24
     9b0:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     9b2:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
			*D2_read_cmd = 0x58;
			*delay_time_us = 9040;
			break;
     9b4:	08 95       	ret
		case OSR_2048:
			*D1_read_cmd = 0x46;
     9b6:	86 e4       	ldi	r24, 0x46	; 70
     9b8:	fb 01       	movw	r30, r22
     9ba:	80 83       	st	Z, r24
			*D2_read_cmd = 0x56;
     9bc:	86 e5       	ldi	r24, 0x56	; 86
     9be:	fa 01       	movw	r30, r20
     9c0:	80 83       	st	Z, r24
			*delay_time_us = 4540;
     9c2:	8c eb       	ldi	r24, 0xBC	; 188
     9c4:	91 e1       	ldi	r25, 0x11	; 17
     9c6:	f9 01       	movw	r30, r18
     9c8:	80 83       	st	Z, r24
     9ca:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     9cc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_2048:
			*D1_read_cmd = 0x46;
			*D2_read_cmd = 0x56;
			*delay_time_us = 4540;
			break;
     9ce:	08 95       	ret
		case OSR_1024:
			*D1_read_cmd = 0x44;
     9d0:	84 e4       	ldi	r24, 0x44	; 68
     9d2:	fb 01       	movw	r30, r22
     9d4:	80 83       	st	Z, r24
			*D2_read_cmd = 0x54;
     9d6:	84 e5       	ldi	r24, 0x54	; 84
     9d8:	fa 01       	movw	r30, r20
     9da:	80 83       	st	Z, r24
			*delay_time_us = 2280;
     9dc:	88 ee       	ldi	r24, 0xE8	; 232
     9de:	98 e0       	ldi	r25, 0x08	; 8
     9e0:	f9 01       	movw	r30, r18
     9e2:	80 83       	st	Z, r24
     9e4:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     9e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_1024:
			*D1_read_cmd = 0x44;
			*D2_read_cmd = 0x54;
			*delay_time_us = 2280;
			break;
     9e8:	08 95       	ret
		case OSR_512:
			*D1_read_cmd = 0x42;
     9ea:	82 e4       	ldi	r24, 0x42	; 66
     9ec:	fb 01       	movw	r30, r22
     9ee:	80 83       	st	Z, r24
			*D2_read_cmd = 0x52;
     9f0:	82 e5       	ldi	r24, 0x52	; 82
     9f2:	fa 01       	movw	r30, r20
     9f4:	80 83       	st	Z, r24
			*delay_time_us = 1170;
     9f6:	82 e9       	ldi	r24, 0x92	; 146
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	f9 01       	movw	r30, r18
     9fc:	80 83       	st	Z, r24
     9fe:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     a00:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_512:
			*D1_read_cmd = 0x42;
			*D2_read_cmd = 0x52;
			*delay_time_us = 1170;
			break;
     a02:	08 95       	ret
		case OSR_256:
			*D1_read_cmd = 0x40;
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	fb 01       	movw	r30, r22
     a08:	80 83       	st	Z, r24
			*D2_read_cmd = 0x50;
     a0a:	80 e5       	ldi	r24, 0x50	; 80
     a0c:	fa 01       	movw	r30, r20
     a0e:	80 83       	st	Z, r24
			*delay_time_us = 600;
     a10:	88 e5       	ldi	r24, 0x58	; 88
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	f9 01       	movw	r30, r18
     a16:	80 83       	st	Z, r24
     a18:	91 83       	std	Z+1, r25	; 0x01
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     a1a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_256:
			*D1_read_cmd = 0x40;
			*D2_read_cmd = 0x50;
			*delay_time_us = 600;
			break;
     a1c:	08 95       	ret
		default:
			return 1; //Error
     a1e:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 return 0; //Success
 }
     a20:	08 95       	ret

00000a22 <readMS56XX>:
			sensor->TEMPSENS);
}


void readMS56XX(MS56XX_t* sensor)
 {
     a22:	2f 92       	push	r2
     a24:	3f 92       	push	r3
     a26:	4f 92       	push	r4
     a28:	5f 92       	push	r5
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	e7 97       	sbiw	r28, 0x37	; 55
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	1c 01       	movw	r2, r24
	uint32_t rawPressure = 0; //D1
	uint32_t rawTemp = 0; //D2
	
	//Assume data is valid unless any of the cases checked for are met
	sensor->data.valid = 1;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	d1 01       	movw	r26, r2
     a56:	1c 96       	adiw	r26, 0x0c	; 12
     a58:	8c 93       	st	X, r24
     a5a:	1c 97       	sbiw	r26, 0x0c	; 12
	
	uint16_t delay_time;
	uint8_t D1_cmd, D2_cmd;
	if (get_read_info(sensor->osr, &D1_cmd, &D2_cmd, &delay_time)) //Return flag of 1 = OSR not supported
     a5c:	9e 01       	movw	r18, r28
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	ae 01       	movw	r20, r28
     a64:	4c 5f       	subi	r20, 0xFC	; 252
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	be 01       	movw	r22, r28
     a6a:	6d 5f       	subi	r22, 0xFD	; 253
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	1d 96       	adiw	r26, 0x0d	; 13
     a70:	8c 91       	ld	r24, X
     a72:	87 df       	rcall	.-242    	; 0x982 <get_read_info>
     a74:	88 23       	and	r24, r24
     a76:	19 f0       	breq	.+6      	; 0xa7e <readMS56XX+0x5c>
	{
		//Mark data as invalid and exit function
		sensor->data.valid = 0;
     a78:	f1 01       	movw	r30, r2
     a7a:	14 86       	std	Z+12, r1	; 0x0c
     a7c:	08 c4       	rjmp	.+2064   	; 0x128e <readMS56XX+0x86c>
		return;
	}
	//If get_read_info succeeded, D1_cmd, D2_cmd, and delay_time will now have the appropriate values for the selected OSR
	printf("D1_cmd: %u, D2_cmd: %u, delay: %u\n", D1_cmd, D2_cmd, delay_time);
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	8f 93       	push	r24
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	8f 93       	push	r24
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	1f 92       	push	r1
     a8a:	8f 93       	push	r24
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	1f 92       	push	r1
     a90:	8f 93       	push	r24
     a92:	83 e3       	ldi	r24, 0x33	; 51
     a94:	90 e2       	ldi	r25, 0x20	; 32
     a96:	9f 93       	push	r25
     a98:	8f 93       	push	r24
     a9a:	0e 94 20 11 	call	0x2240	; 0x2240 <printf>
// 		rawPressure = read24(sensor->spi);
// 		spideselect(sensor->select_pin);
	

	//Ask for raw pressure, 4096 OSR
	spiselect(sensor->select_pin);
     a9e:	d1 01       	movw	r26, r2
     aa0:	8c 91       	ld	r24, X
     aa2:	19 d4       	rcall	.+2098   	; 0x12d6 <spiselect>
	spiwrite(sensor->spi, D1_cmd);
     aa4:	6b 81       	ldd	r22, Y+3	; 0x03
     aa6:	f1 01       	movw	r30, r2
     aa8:	81 81       	ldd	r24, Z+1	; 0x01
     aaa:	92 81       	ldd	r25, Z+2	; 0x02
	spideselect(sensor->select_pin);
     aac:	0e d4       	rcall	.+2076   	; 0x12ca <spiwrite>
     aae:	d1 01       	movw	r26, r2
     ab0:	8c 91       	ld	r24, X
     ab2:	25 d4       	rcall	.+2122   	; 0x12fe <spideselect>

	delay_us(delay_time);
     ab4:	49 81       	ldd	r20, Y+1	; 0x01
     ab6:	5a 81       	ldd	r21, Y+2	; 0x02
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	41 15       	cp	r20, r1
     abe:	51 05       	cpc	r21, r1
     ac0:	d1 f1       	breq	.+116    	; 0xb36 <readMS56XX+0x114>
     ac2:	a1 2c       	mov	r10, r1
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f8 e4       	ldi	r31, 0x48	; 72
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
     acc:	0f 2e       	mov	r0, r31
     ace:	f8 ee       	ldi	r31, 0xE8	; 232
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f0 2d       	mov	r31, r0
     ad4:	dd 24       	eor	r13, r13
     ad6:	d3 94       	inc	r13
     ad8:	e1 2c       	mov	r14, r1
     ada:	f1 2c       	mov	r15, r1
     adc:	00 e0       	ldi	r16, 0x00	; 0
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	24 2f       	mov	r18, r20
     ae2:	35 2f       	mov	r19, r21
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     af4:	0f 2e       	mov	r0, r31
     af6:	f6 e0       	ldi	r31, 0x06	; 6
     af8:	af 2e       	mov	r10, r31
     afa:	f0 2d       	mov	r31, r0
     afc:	b1 2c       	mov	r11, r1
     afe:	c1 2c       	mov	r12, r1
     b00:	d1 2c       	mov	r13, r1
     b02:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivdi3>
     b06:	21 5c       	subi	r18, 0xC1	; 193
     b08:	3d 4b       	sbci	r19, 0xBD	; 189
     b0a:	40 4f       	sbci	r20, 0xF0	; 240
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	6f 4f       	sbci	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	8f 4f       	sbci	r24, 0xFF	; 255
     b14:	9f 4f       	sbci	r25, 0xFF	; 255
     b16:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__floatundisf>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	34 e2       	ldi	r19, 0x24	; 36
     b1e:	44 e7       	ldi	r20, 0x74	; 116
     b20:	59 e4       	ldi	r21, 0x49	; 73
     b22:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     b26:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fixunssfdi>
     b2a:	62 2f       	mov	r22, r18
     b2c:	73 2f       	mov	r23, r19
     b2e:	84 2f       	mov	r24, r20
     b30:	95 2f       	mov	r25, r21
     b32:	4d de       	rcall	.-870    	; 0x7ce <__portable_avr_delay_cycles>
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <readMS56XX+0x11e>
     b36:	66 e0       	ldi	r22, 0x06	; 6
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0

	//Read off raw pressure (D1)
	spiselect(sensor->select_pin);
     b3e:	47 de       	rcall	.-882    	; 0x7ce <__portable_avr_delay_cycles>
     b40:	d1 01       	movw	r26, r2
     b42:	8c 91       	ld	r24, X
	spiwrite(sensor->spi, 0x0);
     b44:	c8 d3       	rcall	.+1936   	; 0x12d6 <spiselect>
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	f1 01       	movw	r30, r2
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	92 81       	ldd	r25, Z+2	; 0x02
	rawPressure = read24(sensor->spi);
     b4e:	bd d3       	rcall	.+1914   	; 0x12ca <spiwrite>
     b50:	d1 01       	movw	r26, r2
     b52:	11 96       	adiw	r26, 0x01	; 1
     b54:	8d 91       	ld	r24, X+
     b56:	9c 91       	ld	r25, X
     b58:	12 97       	sbiw	r26, 0x02	; 2
     b5a:	58 de       	rcall	.-848    	; 0x80c <read24>
     b5c:	69 8f       	std	Y+25, r22	; 0x19
     b5e:	7a 8f       	std	Y+26, r23	; 0x1a
	spideselect(sensor->select_pin);
     b60:	8b 8f       	std	Y+27, r24	; 0x1b
     b62:	9c 8f       	std	Y+28, r25	; 0x1c
	

	//Ask for raw temperature, 4096 OSR
	spiselect(sensor->select_pin);
     b64:	f1 01       	movw	r30, r2
     b66:	80 81       	ld	r24, Z
     b68:	ca d3       	rcall	.+1940   	; 0x12fe <spideselect>
	spiwrite(sensor->spi, D2_cmd); //OSR = 4096
     b6a:	d1 01       	movw	r26, r2
     b6c:	8c 91       	ld	r24, X
     b6e:	b3 d3       	rcall	.+1894   	; 0x12d6 <spiselect>
     b70:	6c 81       	ldd	r22, Y+4	; 0x04
     b72:	f1 01       	movw	r30, r2
     b74:	81 81       	ldd	r24, Z+1	; 0x01
	spideselect(sensor->select_pin);
     b76:	92 81       	ldd	r25, Z+2	; 0x02
     b78:	a8 d3       	rcall	.+1872   	; 0x12ca <spiwrite>
     b7a:	d1 01       	movw	r26, r2
     b7c:	8c 91       	ld	r24, X
	
	delay_us(delay_time);
     b7e:	bf d3       	rcall	.+1918   	; 0x12fe <spideselect>
     b80:	49 81       	ldd	r20, Y+1	; 0x01
     b82:	5a 81       	ldd	r21, Y+2	; 0x02
     b84:	41 15       	cp	r20, r1
     b86:	51 05       	cpc	r21, r1
     b88:	d1 f1       	breq	.+116    	; 0xbfe <readMS56XX+0x1dc>
     b8a:	a1 2c       	mov	r10, r1
     b8c:	0f 2e       	mov	r0, r31
     b8e:	f8 e4       	ldi	r31, 0x48	; 72
     b90:	bf 2e       	mov	r11, r31
     b92:	f0 2d       	mov	r31, r0
     b94:	0f 2e       	mov	r0, r31
     b96:	f8 ee       	ldi	r31, 0xE8	; 232
     b98:	cf 2e       	mov	r12, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	dd 24       	eor	r13, r13
     b9e:	d3 94       	inc	r13
     ba0:	e1 2c       	mov	r14, r1
     ba2:	f1 2c       	mov	r15, r1
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	10 e0       	ldi	r17, 0x00	; 0
     ba8:	24 2f       	mov	r18, r20
     baa:	35 2f       	mov	r19, r21
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     bbc:	0f 2e       	mov	r0, r31
     bbe:	f6 e0       	ldi	r31, 0x06	; 6
     bc0:	af 2e       	mov	r10, r31
     bc2:	f0 2d       	mov	r31, r0
     bc4:	b1 2c       	mov	r11, r1
     bc6:	c1 2c       	mov	r12, r1
     bc8:	d1 2c       	mov	r13, r1
     bca:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivdi3>
     bce:	21 5c       	subi	r18, 0xC1	; 193
     bd0:	3d 4b       	sbci	r19, 0xBD	; 189
     bd2:	40 4f       	sbci	r20, 0xF0	; 240
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	6f 4f       	sbci	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	8f 4f       	sbci	r24, 0xFF	; 255
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__floatundisf>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	34 e2       	ldi	r19, 0x24	; 36
     be6:	44 e7       	ldi	r20, 0x74	; 116
     be8:	59 e4       	ldi	r21, 0x49	; 73
     bea:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     bee:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fixunssfdi>
     bf2:	62 2f       	mov	r22, r18
     bf4:	73 2f       	mov	r23, r19
     bf6:	84 2f       	mov	r24, r20
     bf8:	95 2f       	mov	r25, r21
     bfa:	e9 dd       	rcall	.-1070   	; 0x7ce <__portable_avr_delay_cycles>
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <readMS56XX+0x1e6>

	//Read off raw temperature (D2)
	spiselect(sensor->select_pin);
     bfe:	66 e0       	ldi	r22, 0x06	; 6
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
	spiwrite(sensor->spi, 0x0);
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	e3 dd       	rcall	.-1082   	; 0x7ce <__portable_avr_delay_cycles>
     c08:	f1 01       	movw	r30, r2
     c0a:	80 81       	ld	r24, Z
     c0c:	64 d3       	rcall	.+1736   	; 0x12d6 <spiselect>
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	d1 01       	movw	r26, r2
     c12:	11 96       	adiw	r26, 0x01	; 1
	rawTemp = read24(sensor->spi);
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	57 d3       	rcall	.+1710   	; 0x12ca <spiwrite>
     c1c:	f1 01       	movw	r30, r2
     c1e:	81 81       	ldd	r24, Z+1	; 0x01
     c20:	92 81       	ldd	r25, Z+2	; 0x02
	spideselect(sensor->select_pin);
     c22:	f4 dd       	rcall	.-1048   	; 0x80c <read24>
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24
     c28:	d1 01       	movw	r26, r2
	
	printf("Raw D1 & D2: %" PRIi32 ", %" PRIi32 "\n", rawPressure, rawTemp);
     c2a:	8c 91       	ld	r24, X
     c2c:	68 d3       	rcall	.+1744   	; 0x12fe <spideselect>
     c2e:	ff 92       	push	r15
     c30:	ef 92       	push	r14
     c32:	df 92       	push	r13
     c34:	cf 92       	push	r12
     c36:	bc 8d       	ldd	r27, Y+28	; 0x1c
     c38:	bf 93       	push	r27
     c3a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c3c:	ef 93       	push	r30
     c3e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c40:	ff 93       	push	r31
     c42:	a9 8c       	ldd	r10, Y+25	; 0x19
     c44:	af 92       	push	r10
     c46:	86 e5       	ldi	r24, 0x56	; 86
     c48:	90 e2       	ldi	r25, 0x20	; 32
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
	
	int32_t dT = rawTemp - (int32_t)(((int64_t)sensor->Tref) * ((int64_t)256));
	int32_t TEMP = (int32_t)(((int32_t)2000) + ((int32_t)(((int64_t)dT) * ((int64_t)sensor->TEMPSENS) / ((int64_t)8388608))));
     c4e:	0e 94 20 11 	call	0x2240	; 0x2240 <printf>
     c52:	d1 01       	movw	r26, r2
     c54:	56 96       	adiw	r26, 0x16	; 22
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	57 97       	sbiw	r26, 0x17	; 23
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ba 2f       	mov	r27, r26
     c62:	a9 2f       	mov	r26, r25
     c64:	98 2f       	mov	r25, r24
     c66:	88 27       	eor	r24, r24
     c68:	97 01       	movw	r18, r14
     c6a:	86 01       	movw	r16, r12
     c6c:	08 1b       	sub	r16, r24
     c6e:	19 0b       	sbc	r17, r25
     c70:	2a 0b       	sbc	r18, r26
     c72:	3b 0b       	sbc	r19, r27
     c74:	0d 83       	std	Y+5, r16	; 0x05
     c76:	1e 83       	std	Y+6, r17	; 0x06
     c78:	2f 83       	std	Y+7, r18	; 0x07
     c7a:	38 87       	std	Y+8, r19	; 0x08
     c7c:	33 0f       	add	r19, r19
     c7e:	00 0b       	sbc	r16, r16
     c80:	10 2f       	mov	r17, r16
     c82:	98 01       	movw	r18, r16
     c84:	0d 87       	std	Y+13, r16	; 0x0d
     c86:	1e 87       	std	Y+14, r17	; 0x0e
     c88:	2f 87       	std	Y+15, r18	; 0x0f
     c8a:	38 8b       	std	Y+16, r19	; 0x10
     c8c:	d1 01       	movw	r26, r2
     c8e:	58 96       	adiw	r26, 0x18	; 24
     c90:	4d 91       	ld	r20, X+
     c92:	5c 91       	ld	r21, X
     c94:	59 97       	sbiw	r26, 0x19	; 25
     c96:	ad 80       	ldd	r10, Y+5	; 0x05
     c98:	be 80       	ldd	r11, Y+6	; 0x06
     c9a:	cf 80       	ldd	r12, Y+7	; 0x07
     c9c:	d8 84       	ldd	r13, Y+8	; 0x08
     c9e:	ed 84       	ldd	r14, Y+13	; 0x0d
     ca0:	fe 2c       	mov	r15, r14
     ca2:	0e 2d       	mov	r16, r14
     ca4:	1e 2d       	mov	r17, r14
     ca6:	24 2f       	mov	r18, r20
     ca8:	35 2f       	mov	r19, r21
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     cba:	d2 2e       	mov	r13, r18
     cbc:	e3 2e       	mov	r14, r19
     cbe:	72 2e       	mov	r7, r18
     cc0:	83 2e       	mov	r8, r19
     cc2:	94 2e       	mov	r9, r20
     cc4:	a5 2e       	mov	r10, r21
     cc6:	b6 2e       	mov	r11, r22
     cc8:	c7 2e       	mov	r12, r23
     cca:	58 2e       	mov	r5, r24
     ccc:	69 2e       	mov	r6, r25
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	2d 2d       	mov	r18, r13
     cd4:	3e 2d       	mov	r19, r14
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpdi2_s8>
     cdc:	84 f4       	brge	.+32     	; 0xcfe <readMS56XX+0x2dc>
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	31 09       	sbc	r19, r1
     ce2:	40 48       	sbci	r20, 0x80	; 128
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	6f 4f       	sbci	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	8f 4f       	sbci	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	72 2e       	mov	r7, r18
     cf0:	83 2e       	mov	r8, r19
     cf2:	94 2e       	mov	r9, r20
     cf4:	a5 2e       	mov	r10, r21
     cf6:	b6 2e       	mov	r11, r22
     cf8:	c7 2e       	mov	r12, r23
     cfa:	58 2e       	mov	r5, r24
     cfc:	69 2e       	mov	r6, r25
     cfe:	27 2d       	mov	r18, r7
     d00:	38 2d       	mov	r19, r8
     d02:	49 2d       	mov	r20, r9
     d04:	5a 2d       	mov	r21, r10
     d06:	6b 2d       	mov	r22, r11
     d08:	7c 2d       	mov	r23, r12
     d0a:	85 2d       	mov	r24, r5
     d0c:	96 2d       	mov	r25, r6
     d0e:	07 e1       	ldi	r16, 0x17	; 23
     d10:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__ashrdi3>
     d14:	82 2f       	mov	r24, r18
     d16:	93 2f       	mov	r25, r19
     d18:	a4 2f       	mov	r26, r20
     d1a:	b5 2f       	mov	r27, r21
     d1c:	89 8b       	std	Y+17, r24	; 0x11
     d1e:	9a 8b       	std	Y+18, r25	; 0x12
     d20:	ab 8b       	std	Y+19, r26	; 0x13
     d22:	bc 8b       	std	Y+20, r27	; 0x14
     d24:	8c 01       	movw	r16, r24
     d26:	9d 01       	movw	r18, r26
     d28:	00 53       	subi	r16, 0x30	; 48
     d2a:	18 4f       	sbci	r17, 0xF8	; 248
     d2c:	2f 4f       	sbci	r18, 0xFF	; 255
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	0d 8b       	std	Y+21, r16	; 0x15
     d32:	1e 8b       	std	Y+22, r17	; 0x16
	
	int32_t T2 = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	if (TEMP < 2000)
     d34:	2f 8b       	std	Y+23, r18	; 0x17
     d36:	38 8f       	std	Y+24, r19	; 0x18
     d38:	00 3d       	cpi	r16, 0xD0	; 208
     d3a:	17 40       	sbci	r17, 0x07	; 7
     d3c:	21 05       	cpc	r18, r1
     d3e:	31 05       	cpc	r19, r1
	{
		T2 = ((int64_t)dT) * ((int64_t)dT) / ((int64_t)2147483648);
     d40:	0c f0       	brlt	.+2      	; 0xd44 <readMS56XX+0x322>
     d42:	b2 c0       	rjmp	.+356    	; 0xea8 <readMS56XX+0x486>
     d44:	ad 80       	ldd	r10, Y+5	; 0x05
     d46:	be 80       	ldd	r11, Y+6	; 0x06
     d48:	cf 80       	ldd	r12, Y+7	; 0x07
     d4a:	d8 84       	ldd	r13, Y+8	; 0x08
     d4c:	ed 84       	ldd	r14, Y+13	; 0x0d
     d4e:	fe 2c       	mov	r15, r14
     d50:	0e 2d       	mov	r16, r14
     d52:	1e 2d       	mov	r17, r14
     d54:	2a 2d       	mov	r18, r10
     d56:	3b 2d       	mov	r19, r11
     d58:	4c 2d       	mov	r20, r12
     d5a:	5d 2d       	mov	r21, r13
     d5c:	60 2f       	mov	r22, r16
     d5e:	70 2f       	mov	r23, r16
     d60:	80 2f       	mov	r24, r16
     d62:	9e 2d       	mov	r25, r14
     d64:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     d68:	f2 2e       	mov	r15, r18
     d6a:	03 2f       	mov	r16, r19
     d6c:	14 2f       	mov	r17, r20
     d6e:	b5 2f       	mov	r27, r21
     d70:	f6 2f       	mov	r31, r22
     d72:	e7 2f       	mov	r30, r23
     d74:	58 2e       	mov	r5, r24
     d76:	69 2e       	mov	r6, r25
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpdi2_s8>
     d7e:	84 f4       	brge	.+32     	; 0xda0 <readMS56XX+0x37e>
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	31 09       	sbc	r19, r1
     d84:	41 09       	sbc	r20, r1
     d86:	50 48       	sbci	r21, 0x80	; 128
     d88:	6f 4f       	sbci	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	8f 4f       	sbci	r24, 0xFF	; 255
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	f2 2e       	mov	r15, r18
     d92:	03 2f       	mov	r16, r19
     d94:	14 2f       	mov	r17, r20
     d96:	b5 2f       	mov	r27, r21
     d98:	f6 2f       	mov	r31, r22
     d9a:	e7 2f       	mov	r30, r23
     d9c:	58 2e       	mov	r5, r24
     d9e:	69 2e       	mov	r6, r25
     da0:	2f 2d       	mov	r18, r15
     da2:	30 2f       	mov	r19, r16
     da4:	41 2f       	mov	r20, r17
     da6:	5b 2f       	mov	r21, r27
     da8:	6f 2f       	mov	r22, r31
     daa:	7e 2f       	mov	r23, r30
     dac:	85 2d       	mov	r24, r5
     dae:	96 2d       	mov	r25, r6
     db0:	0f e1       	ldi	r16, 0x1F	; 31
     db2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__ashrdi3>
     db6:	28 a3       	std	Y+32, r18	; 0x20
     db8:	39 a3       	std	Y+33, r19	; 0x21
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
     dba:	4a a3       	std	Y+34, r20	; 0x22
     dbc:	5b a3       	std	Y+35, r21	; 0x23
     dbe:	49 88       	ldd	r4, Y+17	; 0x11
     dc0:	5a 88       	ldd	r5, Y+18	; 0x12
     dc2:	6b 88       	ldd	r6, Y+19	; 0x13
     dc4:	7c 88       	ldd	r7, Y+20	; 0x14
     dc6:	77 0c       	add	r7, r7
     dc8:	44 08       	sbc	r4, r4
     dca:	54 2c       	mov	r5, r4
     dcc:	32 01       	movw	r6, r4
     dce:	29 89       	ldd	r18, Y+17	; 0x11
     dd0:	3a 89       	ldd	r19, Y+18	; 0x12
     dd2:	4b 89       	ldd	r20, Y+19	; 0x13
     dd4:	5c 89       	ldd	r21, Y+20	; 0x14
     dd6:	64 2d       	mov	r22, r4
     dd8:	74 2d       	mov	r23, r4
     dda:	84 2d       	mov	r24, r4
     ddc:	94 2d       	mov	r25, r4
     dde:	02 e0       	ldi	r16, 0x02	; 2
     de0:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
     de4:	a2 2e       	mov	r10, r18
     de6:	b3 2e       	mov	r11, r19
     de8:	c4 2e       	mov	r12, r20
     dea:	d5 2e       	mov	r13, r21
     dec:	e6 2e       	mov	r14, r22
     dee:	f7 2e       	mov	r15, r23
     df0:	e8 2f       	mov	r30, r24
     df2:	19 2f       	mov	r17, r25
     df4:	04 e0       	ldi	r16, 0x04	; 4
     df6:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
     dfa:	0e 2f       	mov	r16, r30
     dfc:	0e 94 b2 10 	call	0x2164	; 0x2164 <__subdi3>
     e00:	a9 88       	ldd	r10, Y+17	; 0x11
     e02:	ba 88       	ldd	r11, Y+18	; 0x12
     e04:	cb 88       	ldd	r12, Y+19	; 0x13
     e06:	dc 88       	ldd	r13, Y+20	; 0x14
     e08:	e4 2c       	mov	r14, r4
     e0a:	f4 2c       	mov	r15, r4
     e0c:	04 2d       	mov	r16, r4
     e0e:	14 2d       	mov	r17, r4
     e10:	0e 94 9d 10 	call	0x213a	; 0x213a <__adddi3>
     e14:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     e18:	2d 8f       	std	Y+29, r18	; 0x1d
     e1a:	83 2e       	mov	r8, r19
     e1c:	94 2e       	mov	r9, r20
     e1e:	a5 2e       	mov	r10, r21
     e20:	b6 2e       	mov	r11, r22
     e22:	c7 2e       	mov	r12, r23
     e24:	8e 8f       	std	Y+30, r24	; 0x1e
     e26:	9f 8f       	std	Y+31, r25	; 0x1f
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpdi2_s8>
     e2e:	5c f4       	brge	.+22     	; 0xe46 <readMS56XX+0x424>
     e30:	af e0       	ldi	r26, 0x0F	; 15
     e32:	0e 94 a6 10 	call	0x214c	; 0x214c <__adddi3_s8>
     e36:	2d 8f       	std	Y+29, r18	; 0x1d
     e38:	83 2e       	mov	r8, r19
     e3a:	94 2e       	mov	r9, r20
     e3c:	a5 2e       	mov	r10, r21
     e3e:	b6 2e       	mov	r11, r22
     e40:	c7 2e       	mov	r12, r23
     e42:	8e 8f       	std	Y+30, r24	; 0x1e
     e44:	9f 8f       	std	Y+31, r25	; 0x1f
     e46:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e48:	38 2d       	mov	r19, r8
     e4a:	49 2d       	mov	r20, r9
     e4c:	5a 2d       	mov	r21, r10
     e4e:	6b 2d       	mov	r22, r11
     e50:	7c 2d       	mov	r23, r12
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e56:	04 e0       	ldi	r16, 0x04	; 4
     e58:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__ashrdi3>
     e5c:	2d 8f       	std	Y+29, r18	; 0x1d
     e5e:	3e 8f       	std	Y+30, r19	; 0x1e
     e60:	4f 8f       	std	Y+31, r20	; 0x1f
     e62:	5c a3       	std	Y+36, r21	; 0x24
     e64:	6d a3       	std	Y+37, r22	; 0x25
     e66:	7e a3       	std	Y+38, r23	; 0x26
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
     e68:	8f a3       	std	Y+39, r24	; 0x27
     e6a:	98 a7       	std	Y+40, r25	; 0x28
     e6c:	29 89       	ldd	r18, Y+17	; 0x11
     e6e:	3a 89       	ldd	r19, Y+18	; 0x12
     e70:	4b 89       	ldd	r20, Y+19	; 0x13
     e72:	5c 89       	ldd	r21, Y+20	; 0x14
     e74:	64 2d       	mov	r22, r4
     e76:	74 2d       	mov	r23, r4
     e78:	84 2d       	mov	r24, r4
     e7a:	94 2d       	mov	r25, r4
     e7c:	01 e0       	ldi	r16, 0x01	; 1
     e7e:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
     e82:	a9 88       	ldd	r10, Y+17	; 0x11
     e84:	ba 88       	ldd	r11, Y+18	; 0x12
     e86:	cb 88       	ldd	r12, Y+19	; 0x13
     e88:	dc 88       	ldd	r13, Y+20	; 0x14
     e8a:	e4 2c       	mov	r14, r4
     e8c:	f4 2c       	mov	r15, r4
     e8e:	04 2d       	mov	r16, r4
     e90:	14 2d       	mov	r17, r4
     e92:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__muldi3>
     e96:	29 8b       	std	Y+17, r18	; 0x11
     e98:	39 a7       	std	Y+41, r19	; 0x29
     e9a:	4a a7       	std	Y+42, r20	; 0x2a
     e9c:	5b a7       	std	Y+43, r21	; 0x2b
     e9e:	6c a7       	std	Y+44, r22	; 0x2c
     ea0:	7d a7       	std	Y+45, r23	; 0x2d
     ea2:	8e a7       	std	Y+46, r24	; 0x2e
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
		SENS2 = 0;	
     ea4:	9f a7       	std	Y+47, r25	; 0x2f
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <readMS56XX+0x4ae>
     ea8:	19 8a       	std	Y+17, r1	; 0x11
     eaa:	19 a6       	std	Y+41, r1	; 0x29
     eac:	1a a6       	std	Y+42, r1	; 0x2a
     eae:	1b a6       	std	Y+43, r1	; 0x2b
     eb0:	1c a6       	std	Y+44, r1	; 0x2c
     eb2:	1d a6       	std	Y+45, r1	; 0x2d
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
     eb4:	1e a6       	std	Y+46, r1	; 0x2e
     eb6:	1f a6       	std	Y+47, r1	; 0x2f
     eb8:	1d 8e       	std	Y+29, r1	; 0x1d
     eba:	1e 8e       	std	Y+30, r1	; 0x1e
     ebc:	1f 8e       	std	Y+31, r1	; 0x1f
     ebe:	1c a2       	std	Y+36, r1	; 0x24
     ec0:	1d a2       	std	Y+37, r1	; 0x25
     ec2:	1e a2       	std	Y+38, r1	; 0x26
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
     ec4:	1f a2       	std	Y+39, r1	; 0x27
     ec6:	18 a6       	std	Y+40, r1	; 0x28
     ec8:	18 a2       	std	Y+32, r1	; 0x20
     eca:	19 a2       	std	Y+33, r1	; 0x21
		OFF2 = 0;
		SENS2 = 0;	
	} 
	
	if (TEMP<-1500)
     ecc:	1a a2       	std	Y+34, r1	; 0x22
     ece:	1b a2       	std	Y+35, r1	; 0x23
     ed0:	8d 89       	ldd	r24, Y+21	; 0x15
     ed2:	9e 89       	ldd	r25, Y+22	; 0x16
     ed4:	af 89       	ldd	r26, Y+23	; 0x17
     ed6:	b8 8d       	ldd	r27, Y+24	; 0x18
     ed8:	84 32       	cpi	r24, 0x24	; 36
     eda:	ea ef       	ldi	r30, 0xFA	; 250
     edc:	9e 07       	cpc	r25, r30
     ede:	ef ef       	ldi	r30, 0xFF	; 255
     ee0:	ae 07       	cpc	r26, r30
     ee2:	be 07       	cpc	r27, r30
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
     ee4:	0c f0       	brlt	.+2      	; 0xee8 <readMS56XX+0x4c6>
     ee6:	5d c0       	rjmp	.+186    	; 0xfa2 <readMS56XX+0x580>
     ee8:	2d 89       	ldd	r18, Y+21	; 0x15
     eea:	3e 89       	ldd	r19, Y+22	; 0x16
     eec:	4f 89       	ldd	r20, Y+23	; 0x17
     eee:	58 8d       	ldd	r21, Y+24	; 0x18
     ef0:	6c 01       	movw	r12, r24
     ef2:	7d 01       	movw	r14, r26
     ef4:	ff 0c       	add	r15, r15
     ef6:	cc 08       	sbc	r12, r12
     ef8:	dc 2c       	mov	r13, r12
     efa:	76 01       	movw	r14, r12
     efc:	6c 2d       	mov	r22, r12
     efe:	7c 2d       	mov	r23, r12
     f00:	8c 2d       	mov	r24, r12
     f02:	9c 2d       	mov	r25, r12
     f04:	24 52       	subi	r18, 0x24	; 36
     f06:	3a 4f       	sbci	r19, 0xFA	; 250
     f08:	4f 4f       	sbci	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	6f 4f       	sbci	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	52 2e       	mov	r5, r18
     f16:	63 2e       	mov	r6, r19
     f18:	74 2e       	mov	r7, r20
     f1a:	85 2e       	mov	r8, r21
     f1c:	96 2e       	mov	r9, r22
     f1e:	b7 2f       	mov	r27, r23
     f20:	a8 2f       	mov	r26, r24
     f22:	f9 2f       	mov	r31, r25
     f24:	04 e0       	ldi	r16, 0x04	; 4
     f26:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
     f2a:	a5 2c       	mov	r10, r5
     f2c:	b6 2c       	mov	r11, r6
     f2e:	c7 2c       	mov	r12, r7
     f30:	d8 2c       	mov	r13, r8
     f32:	e9 2c       	mov	r14, r9
     f34:	fb 2e       	mov	r15, r27
     f36:	0a 2f       	mov	r16, r26
     f38:	1f 2f       	mov	r17, r31
     f3a:	0e 94 b2 10 	call	0x2164	; 0x2164 <__subdi3>
     f3e:	e2 e0       	ldi	r30, 0x02	; 2
     f40:	2e 27       	eor	r18, r30
     f42:	ad 8c       	ldd	r10, Y+29	; 0x1d
     f44:	be 8c       	ldd	r11, Y+30	; 0x1e
     f46:	cf 8c       	ldd	r12, Y+31	; 0x1f
     f48:	dc a0       	ldd	r13, Y+36	; 0x24
     f4a:	ed a0       	ldd	r14, Y+37	; 0x25
     f4c:	fe a0       	ldd	r15, Y+38	; 0x26
     f4e:	0f a1       	ldd	r16, Y+39	; 0x27
     f50:	18 a5       	ldd	r17, Y+40	; 0x28
     f52:	0e 94 9d 10 	call	0x213a	; 0x213a <__adddi3>
     f56:	2d 8f       	std	Y+29, r18	; 0x1d
     f58:	3e 8f       	std	Y+30, r19	; 0x1e
     f5a:	4f 8f       	std	Y+31, r20	; 0x1f
     f5c:	5c a3       	std	Y+36, r21	; 0x24
     f5e:	6d a3       	std	Y+37, r22	; 0x25
     f60:	7e a3       	std	Y+38, r23	; 0x26
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
     f62:	8f a3       	std	Y+39, r24	; 0x27
     f64:	98 a7       	std	Y+40, r25	; 0x28
     f66:	25 2d       	mov	r18, r5
     f68:	36 2d       	mov	r19, r6
     f6a:	47 2d       	mov	r20, r7
     f6c:	58 2d       	mov	r21, r8
     f6e:	69 2d       	mov	r22, r9
     f70:	7b 2f       	mov	r23, r27
     f72:	8a 2f       	mov	r24, r26
     f74:	9f 2f       	mov	r25, r31
     f76:	03 e0       	ldi	r16, 0x03	; 3
     f78:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
     f7c:	2e 27       	eor	r18, r30
     f7e:	a9 88       	ldd	r10, Y+17	; 0x11
     f80:	b9 a4       	ldd	r11, Y+41	; 0x29
     f82:	ca a4       	ldd	r12, Y+42	; 0x2a
     f84:	db a4       	ldd	r13, Y+43	; 0x2b
     f86:	ec a4       	ldd	r14, Y+44	; 0x2c
     f88:	fd a4       	ldd	r15, Y+45	; 0x2d
     f8a:	0e a5       	ldd	r16, Y+46	; 0x2e
     f8c:	1f a5       	ldd	r17, Y+47	; 0x2f
     f8e:	0e 94 9d 10 	call	0x213a	; 0x213a <__adddi3>
     f92:	29 8b       	std	Y+17, r18	; 0x11
     f94:	39 a7       	std	Y+41, r19	; 0x29
     f96:	4a a7       	std	Y+42, r20	; 0x2a
     f98:	5b a7       	std	Y+43, r21	; 0x2b
     f9a:	6c a7       	std	Y+44, r22	; 0x2c
     f9c:	7d a7       	std	Y+45, r23	; 0x2d
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
     f9e:	8e a7       	std	Y+46, r24	; 0x2e
     fa0:	9f a7       	std	Y+47, r25	; 0x2f
     fa2:	d1 01       	movw	r26, r2
     fa4:	54 96       	adiw	r26, 0x14	; 20
     fa6:	4d 91       	ld	r20, X+
     fa8:	5c 91       	ld	r21, X
     faa:	55 97       	sbiw	r26, 0x15	; 21
     fac:	ad 80       	ldd	r10, Y+5	; 0x05
     fae:	be 80       	ldd	r11, Y+6	; 0x06
     fb0:	cf 80       	ldd	r12, Y+7	; 0x07
     fb2:	d8 84       	ldd	r13, Y+8	; 0x08
     fb4:	ed 84       	ldd	r14, Y+13	; 0x0d
     fb6:	fe 2c       	mov	r15, r14
     fb8:	0e 2d       	mov	r16, r14
     fba:	1e 2d       	mov	r17, r14
     fbc:	24 2f       	mov	r18, r20
     fbe:	35 2f       	mov	r19, r21
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	d0 d7       	rcall	.+4000   	; 0x1f6e <__muldi3>
     fce:	72 2e       	mov	r7, r18
     fd0:	83 2e       	mov	r8, r19
     fd2:	94 2e       	mov	r9, r20
     fd4:	a5 2e       	mov	r10, r21
     fd6:	b6 2e       	mov	r11, r22
     fd8:	c7 2e       	mov	r12, r23
     fda:	58 2e       	mov	r5, r24
     fdc:	69 2e       	mov	r6, r25
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpdi2_s8>
     fe4:	5c f4       	brge	.+22     	; 0xffc <readMS56XX+0x5da>
     fe6:	af e3       	ldi	r26, 0x3F	; 63
     fe8:	0e 94 a6 10 	call	0x214c	; 0x214c <__adddi3_s8>
     fec:	72 2e       	mov	r7, r18
     fee:	83 2e       	mov	r8, r19
     ff0:	94 2e       	mov	r9, r20
     ff2:	a5 2e       	mov	r10, r21
     ff4:	b6 2e       	mov	r11, r22
     ff6:	c7 2e       	mov	r12, r23
     ff8:	58 2e       	mov	r5, r24
     ffa:	69 2e       	mov	r6, r25
     ffc:	27 2d       	mov	r18, r7
     ffe:	38 2d       	mov	r19, r8
    1000:	49 2d       	mov	r20, r9
    1002:	5a 2d       	mov	r21, r10
    1004:	6b 2d       	mov	r22, r11
    1006:	7c 2d       	mov	r23, r12
    1008:	85 2d       	mov	r24, r5
    100a:	96 2d       	mov	r25, r6
    100c:	06 e0       	ldi	r16, 0x06	; 6
    100e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__ashrdi3>
    1012:	62 2e       	mov	r6, r18
    1014:	73 2e       	mov	r7, r19
    1016:	84 2e       	mov	r8, r20
    1018:	95 2e       	mov	r9, r21
    101a:	b6 2f       	mov	r27, r22
    101c:	a7 2f       	mov	r26, r23
    101e:	58 2e       	mov	r5, r24
    1020:	49 2e       	mov	r4, r25
    1022:	f1 01       	movw	r30, r2
    1024:	a0 88       	ldd	r10, Z+16	; 0x10
    1026:	b1 88       	ldd	r11, Z+17	; 0x11
    1028:	2a 2d       	mov	r18, r10
    102a:	3b 2d       	mov	r19, r11
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	01 e1       	ldi	r16, 0x11	; 17
    103a:	0e 94 66 10 	call	0x20cc	; 0x20cc <__ashldi3>
    103e:	a2 2e       	mov	r10, r18
    1040:	b3 2e       	mov	r11, r19
    1042:	c4 2e       	mov	r12, r20
    1044:	d5 2e       	mov	r13, r21
    1046:	e6 2e       	mov	r14, r22
    1048:	f7 2e       	mov	r15, r23
    104a:	08 2f       	mov	r16, r24
    104c:	19 2f       	mov	r17, r25
    104e:	26 2d       	mov	r18, r6
    1050:	37 2d       	mov	r19, r7
    1052:	48 2d       	mov	r20, r8
    1054:	59 2d       	mov	r21, r9
    1056:	6b 2f       	mov	r22, r27
    1058:	7a 2f       	mov	r23, r26
    105a:	85 2d       	mov	r24, r5
    105c:	94 2d       	mov	r25, r4
    105e:	0e 94 9d 10 	call	0x213a	; 0x213a <__adddi3>
    1062:	72 2e       	mov	r7, r18
    1064:	38 ab       	std	Y+48, r19	; 0x30
    1066:	49 ab       	std	Y+49, r20	; 0x31
    1068:	5a ab       	std	Y+50, r21	; 0x32
    106a:	6b ab       	std	Y+51, r22	; 0x33
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
	
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
    106c:	7c ab       	std	Y+52, r23	; 0x34
    106e:	8d ab       	std	Y+53, r24	; 0x35
    1070:	9e ab       	std	Y+54, r25	; 0x36
    1072:	42 89       	ldd	r20, Z+18	; 0x12
    1074:	53 89       	ldd	r21, Z+19	; 0x13
    1076:	ad 80       	ldd	r10, Y+5	; 0x05
    1078:	be 80       	ldd	r11, Y+6	; 0x06
    107a:	cf 80       	ldd	r12, Y+7	; 0x07
    107c:	d8 84       	ldd	r13, Y+8	; 0x08
    107e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1080:	fe 2c       	mov	r15, r14
    1082:	0e 2d       	mov	r16, r14
    1084:	1e 2d       	mov	r17, r14
    1086:	24 2f       	mov	r18, r20
    1088:	35 2f       	mov	r19, r21
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	6b d7       	rcall	.+3798   	; 0x1f6e <__muldi3>
    1098:	42 2e       	mov	r4, r18
    109a:	53 2e       	mov	r5, r19
    109c:	64 2e       	mov	r6, r20
    109e:	a5 2e       	mov	r10, r21
    10a0:	b6 2e       	mov	r11, r22
    10a2:	c7 2e       	mov	r12, r23
    10a4:	88 2e       	mov	r8, r24
    10a6:	99 2e       	mov	r9, r25
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpdi2_s8>
    10ae:	5c f4       	brge	.+22     	; 0x10c6 <readMS56XX+0x6a4>
    10b0:	af e7       	ldi	r26, 0x7F	; 127
    10b2:	0e 94 a6 10 	call	0x214c	; 0x214c <__adddi3_s8>
    10b6:	42 2e       	mov	r4, r18
    10b8:	53 2e       	mov	r5, r19
    10ba:	64 2e       	mov	r6, r20
    10bc:	a5 2e       	mov	r10, r21
    10be:	b6 2e       	mov	r11, r22
    10c0:	c7 2e       	mov	r12, r23
    10c2:	88 2e       	mov	r8, r24
    10c4:	99 2e       	mov	r9, r25
    10c6:	24 2d       	mov	r18, r4
    10c8:	35 2d       	mov	r19, r5
    10ca:	46 2d       	mov	r20, r6
    10cc:	5a 2d       	mov	r21, r10
    10ce:	6b 2d       	mov	r22, r11
    10d0:	7c 2d       	mov	r23, r12
    10d2:	88 2d       	mov	r24, r8
    10d4:	99 2d       	mov	r25, r9
    10d6:	07 e0       	ldi	r16, 0x07	; 7
    10d8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__ashrdi3>
    10dc:	2d 83       	std	Y+5, r18	; 0x05
    10de:	43 2e       	mov	r4, r19
    10e0:	54 2e       	mov	r5, r20
    10e2:	65 2e       	mov	r6, r21
    10e4:	b6 2f       	mov	r27, r22
    10e6:	a7 2f       	mov	r26, r23
    10e8:	8d 87       	std	Y+13, r24	; 0x0d
    10ea:	9f ab       	std	Y+55, r25	; 0x37
    10ec:	f1 01       	movw	r30, r2
    10ee:	a6 84       	ldd	r10, Z+14	; 0x0e
    10f0:	b7 84       	ldd	r11, Z+15	; 0x0f
    10f2:	45 01       	movw	r8, r10
    10f4:	28 2d       	mov	r18, r8
    10f6:	39 2d       	mov	r19, r9
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	00 e1       	ldi	r16, 0x10	; 16
    1106:	e2 d7       	rcall	.+4036   	; 0x20cc <__ashldi3>
    1108:	a2 2e       	mov	r10, r18
    110a:	b3 2e       	mov	r11, r19
    110c:	c4 2e       	mov	r12, r20
    110e:	d5 2e       	mov	r13, r21
    1110:	e6 2e       	mov	r14, r22
    1112:	f7 2e       	mov	r15, r23
    1114:	08 2f       	mov	r16, r24
    1116:	19 2f       	mov	r17, r25
    1118:	2d 81       	ldd	r18, Y+5	; 0x05
    111a:	34 2d       	mov	r19, r4
    111c:	45 2d       	mov	r20, r5
    111e:	56 2d       	mov	r21, r6
    1120:	6b 2f       	mov	r22, r27
    1122:	7a 2f       	mov	r23, r26
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9f a9       	ldd	r25, Y+55	; 0x37
	pressureSensorCalibration.TEMPSENS);*/
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
    1128:	0e 94 9d 10 	call	0x213a	; 0x213a <__adddi3>
    112c:	a9 88       	ldd	r10, Y+17	; 0x11
    112e:	b9 a4       	ldd	r11, Y+41	; 0x29
    1130:	ca a4       	ldd	r12, Y+42	; 0x2a
    1132:	db a4       	ldd	r13, Y+43	; 0x2b
    1134:	ec a4       	ldd	r14, Y+44	; 0x2c
    1136:	fd a4       	ldd	r15, Y+45	; 0x2d
    1138:	0e a5       	ldd	r16, Y+46	; 0x2e
    113a:	1f a5       	ldd	r17, Y+47	; 0x2f
    113c:	0e 94 b2 10 	call	0x2164	; 0x2164 <__subdi3>
    1140:	c9 8c       	ldd	r12, Y+25	; 0x19
    1142:	da 8c       	ldd	r13, Y+26	; 0x1a
    1144:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1146:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1148:	56 01       	movw	r10, r12
    114a:	67 01       	movw	r12, r14
    114c:	e1 2c       	mov	r14, r1
    114e:	f1 2c       	mov	r15, r1
    1150:	87 01       	movw	r16, r14
    1152:	ad 82       	std	Y+5, r10	; 0x05
    1154:	be 82       	std	Y+6, r11	; 0x06
    1156:	cf 82       	std	Y+7, r12	; 0x07
    1158:	d8 86       	std	Y+8, r13	; 0x08
    115a:	e9 86       	std	Y+9, r14	; 0x09
    115c:	fa 86       	std	Y+10, r15	; 0x0a
    115e:	0b 87       	std	Y+11, r16	; 0x0b
    1160:	1c 87       	std	Y+12, r17	; 0x0c
    1162:	e1 2c       	mov	r14, r1
    1164:	f1 2c       	mov	r15, r1
    1166:	00 e0       	ldi	r16, 0x00	; 0
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	01 d7       	rcall	.+3586   	; 0x1f6e <__muldi3>
    116c:	42 2e       	mov	r4, r18
    116e:	53 2e       	mov	r5, r19
    1170:	64 2e       	mov	r6, r20
    1172:	a5 2e       	mov	r10, r21
    1174:	b6 2e       	mov	r11, r22
    1176:	c7 2e       	mov	r12, r23
    1178:	88 2e       	mov	r8, r24
    117a:	99 2e       	mov	r9, r25
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	fb d7       	rcall	.+4086   	; 0x2176 <__cmpdi2_s8>
    1180:	84 f4       	brge	.+32     	; 0x11a2 <readMS56XX+0x780>
    1182:	21 50       	subi	r18, 0x01	; 1
    1184:	31 09       	sbc	r19, r1
    1186:	40 4e       	sbci	r20, 0xE0	; 224
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	6f 4f       	sbci	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	42 2e       	mov	r4, r18
    1194:	53 2e       	mov	r5, r19
    1196:	64 2e       	mov	r6, r20
    1198:	a5 2e       	mov	r10, r21
    119a:	b6 2e       	mov	r11, r22
    119c:	c7 2e       	mov	r12, r23
    119e:	88 2e       	mov	r8, r24
    11a0:	99 2e       	mov	r9, r25
    11a2:	24 2d       	mov	r18, r4
    11a4:	35 2d       	mov	r19, r5
    11a6:	46 2d       	mov	r20, r6
    11a8:	5a 2d       	mov	r21, r10
    11aa:	6b 2d       	mov	r22, r11
    11ac:	7c 2d       	mov	r23, r12
    11ae:	88 2d       	mov	r24, r8
    11b0:	99 2d       	mov	r25, r9
    11b2:	05 e1       	ldi	r16, 0x15	; 21
    11b4:	a4 d7       	rcall	.+3912   	; 0x20fe <__ashrdi3>
    11b6:	92 2e       	mov	r9, r18
    11b8:	43 2e       	mov	r4, r19
    11ba:	54 2e       	mov	r5, r20
    11bc:	65 2e       	mov	r6, r21
    11be:	b6 2f       	mov	r27, r22
    11c0:	a7 2f       	mov	r26, r23
    11c2:	f8 2f       	mov	r31, r24
    11c4:	e9 2f       	mov	r30, r25
    11c6:	27 2d       	mov	r18, r7
    11c8:	38 a9       	ldd	r19, Y+48	; 0x30
    11ca:	49 a9       	ldd	r20, Y+49	; 0x31
    11cc:	5a a9       	ldd	r21, Y+50	; 0x32
    11ce:	6b a9       	ldd	r22, Y+51	; 0x33
    11d0:	7c a9       	ldd	r23, Y+52	; 0x34
    11d2:	8d a9       	ldd	r24, Y+53	; 0x35
    11d4:	9e a9       	ldd	r25, Y+54	; 0x36
    11d6:	ad 8c       	ldd	r10, Y+29	; 0x1d
    11d8:	be 8c       	ldd	r11, Y+30	; 0x1e
    11da:	cf 8c       	ldd	r12, Y+31	; 0x1f
    11dc:	dc a0       	ldd	r13, Y+36	; 0x24
    11de:	ed a0       	ldd	r14, Y+37	; 0x25
    11e0:	fe a0       	ldd	r15, Y+38	; 0x26
    11e2:	0f a1       	ldd	r16, Y+39	; 0x27
    11e4:	18 a5       	ldd	r17, Y+40	; 0x28
    11e6:	be d7       	rcall	.+3964   	; 0x2164 <__subdi3>
    11e8:	a2 2e       	mov	r10, r18
    11ea:	b3 2e       	mov	r11, r19
    11ec:	c4 2e       	mov	r12, r20
    11ee:	d5 2e       	mov	r13, r21
    11f0:	e6 2e       	mov	r14, r22
    11f2:	f7 2e       	mov	r15, r23
    11f4:	08 2f       	mov	r16, r24
    11f6:	19 2f       	mov	r17, r25
    11f8:	29 2d       	mov	r18, r9
    11fa:	34 2d       	mov	r19, r4
    11fc:	45 2d       	mov	r20, r5
    11fe:	56 2d       	mov	r21, r6
    1200:	6b 2f       	mov	r22, r27
    1202:	7a 2f       	mov	r23, r26
    1204:	8f 2f       	mov	r24, r31
    1206:	9e 2f       	mov	r25, r30
    1208:	ad d7       	rcall	.+3930   	; 0x2164 <__subdi3>
    120a:	72 2e       	mov	r7, r18
    120c:	83 2e       	mov	r8, r19
    120e:	94 2e       	mov	r9, r20
    1210:	a5 2e       	mov	r10, r21
    1212:	b6 2e       	mov	r11, r22
    1214:	c7 2e       	mov	r12, r23
    1216:	58 2e       	mov	r5, r24
    1218:	69 2e       	mov	r6, r25
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	ac d7       	rcall	.+3928   	; 0x2176 <__cmpdi2_s8>
    121e:	84 f4       	brge	.+32     	; 0x1240 <readMS56XX+0x81e>
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	30 48       	sbci	r19, 0x80	; 128
    1224:	4f 4f       	sbci	r20, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	6f 4f       	sbci	r22, 0xFF	; 255
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	72 2e       	mov	r7, r18
    1232:	83 2e       	mov	r8, r19
    1234:	94 2e       	mov	r9, r20
    1236:	a5 2e       	mov	r10, r21
    1238:	b6 2e       	mov	r11, r22
    123a:	c7 2e       	mov	r12, r23
    123c:	58 2e       	mov	r5, r24
    123e:	69 2e       	mov	r6, r25
    1240:	27 2d       	mov	r18, r7
    1242:	38 2d       	mov	r19, r8
    1244:	49 2d       	mov	r20, r9
    1246:	5a 2d       	mov	r21, r10
    1248:	6b 2d       	mov	r22, r11
    124a:	7c 2d       	mov	r23, r12
    124c:	85 2d       	mov	r24, r5
    124e:	96 2d       	mov	r25, r6
    1250:	0f e0       	ldi	r16, 0x0F	; 15
    1252:	55 d7       	rcall	.+3754   	; 0x20fe <__ashrdi3>
    1254:	d1 01       	movw	r26, r2
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	2c 93       	st	X, r18
    125a:	14 97       	sbiw	r26, 0x04	; 4
    125c:	15 96       	adiw	r26, 0x05	; 5
    125e:	3c 93       	st	X, r19
    1260:	15 97       	sbiw	r26, 0x05	; 5
    1262:	16 96       	adiw	r26, 0x06	; 6
    1264:	4c 93       	st	X, r20
    1266:	16 97       	sbiw	r26, 0x06	; 6
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
    1268:	17 96       	adiw	r26, 0x07	; 7
    126a:	5c 93       	st	X, r21
    126c:	8d 89       	ldd	r24, Y+21	; 0x15
    126e:	9e 89       	ldd	r25, Y+22	; 0x16
    1270:	af 89       	ldd	r26, Y+23	; 0x17
    1272:	b8 8d       	ldd	r27, Y+24	; 0x18
    1274:	a8 a0       	ldd	r10, Y+32	; 0x20
    1276:	b9 a0       	ldd	r11, Y+33	; 0x21
    1278:	ca a0       	ldd	r12, Y+34	; 0x22
    127a:	db a0       	ldd	r13, Y+35	; 0x23
    127c:	8a 19       	sub	r24, r10
    127e:	9b 09       	sbc	r25, r11
    1280:	ac 09       	sbc	r26, r12
    1282:	bd 09       	sbc	r27, r13
    1284:	f1 01       	movw	r30, r2
    1286:	80 87       	std	Z+8, r24	; 0x08
    1288:	91 87       	std	Z+9, r25	; 0x09
 }
    128a:	a2 87       	std	Z+10, r26	; 0x0a
    128c:	b3 87       	std	Z+11, r27	; 0x0b
    128e:	e7 96       	adiw	r28, 0x37	; 55
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	9f 90       	pop	r9
    12aa:	8f 90       	pop	r8
    12ac:	7f 90       	pop	r7
    12ae:	6f 90       	pop	r6
    12b0:	5f 90       	pop	r5
    12b2:	4f 90       	pop	r4
    12b4:	3f 90       	pop	r3
    12b6:	2f 90       	pop	r2
    12b8:	08 95       	ret

000012ba <spiread>:
 */

#include "SPI.h"

uint8_t spiread(SPI_t* targetspi)
{
    12ba:	fc 01       	movw	r30, r24
	targetspi->DATA = 0xFE;
    12bc:	8e ef       	ldi	r24, 0xFE	; 254
    12be:	83 83       	std	Z+3, r24	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait until data actually comes in
    12c0:	92 81       	ldd	r25, Z+2	; 0x02
    12c2:	99 23       	and	r25, r25
    12c4:	ec f7       	brge	.-6      	; 0x12c0 <spiread+0x6>
	return targetspi->DATA;
    12c6:	83 81       	ldd	r24, Z+3	; 0x03

}
    12c8:	08 95       	ret

000012ca <spiwrite>:

void spiwrite(SPI_t* targetspi, uint8_t data)
{
    12ca:	fc 01       	movw	r30, r24
	targetspi->DATA = data;
    12cc:	63 83       	std	Z+3, r22	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait for data to be sent
    12ce:	92 81       	ldd	r25, Z+2	; 0x02
    12d0:	99 23       	and	r25, r25
    12d2:	ec f7       	brge	.-6      	; 0x12ce <spiwrite+0x4>
}
    12d4:	08 95       	ret

000012d6 <spiselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12d6:	e8 2f       	mov	r30, r24
    12d8:	e6 95       	lsr	r30
    12da:	e6 95       	lsr	r30
    12dc:	e6 95       	lsr	r30
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	e4 9f       	mul	r30, r20
    12e2:	f0 01       	movw	r30, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12e8:	87 70       	andi	r24, 0x07	; 7
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <spiselect+0x20>
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <spiselect+0x1c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12fa:	46 83       	std	Z+6, r20	; 0x06
    12fc:	08 95       	ret

000012fe <spideselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12fe:	e8 2f       	mov	r30, r24
    1300:	e6 95       	lsr	r30
    1302:	e6 95       	lsr	r30
    1304:	e6 95       	lsr	r30
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	e4 9f       	mul	r30, r20
    130a:	f0 01       	movw	r30, r0
    130c:	11 24       	eor	r1, r1
    130e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <spideselect+0x20>
    131a:	44 0f       	add	r20, r20
    131c:	55 1f       	adc	r21, r21
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <spideselect+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1322:	45 83       	std	Z+5, r20	; 0x05
    1324:	08 95       	ret

00001326 <enable_select_pin>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1326:	e8 2f       	mov	r30, r24
    1328:	e6 95       	lsr	r30
    132a:	e6 95       	lsr	r30
    132c:	e6 95       	lsr	r30
    132e:	90 e2       	ldi	r25, 0x20	; 32
    1330:	e9 9f       	mul	r30, r25
    1332:	f0 01       	movw	r30, r0
    1334:	11 24       	eor	r1, r1
    1336:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1338:	98 2f       	mov	r25, r24
    133a:	97 70       	andi	r25, 0x07	; 7
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <enable_select_pin+0x20>
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	9a 95       	dec	r25
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <enable_select_pin+0x1c>
}

void enable_select_pin(ioport_pin_t pin)
{
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	spideselect(pin); //Ensure we default to the deselected state
    134a:	21 83       	std	Z+1, r18	; 0x01
    134c:	d8 cf       	rjmp	.-80     	; 0x12fe <spideselect>
    134e:	08 95       	ret

00001350 <initializespi>:
}

void initializespi(SPI_t* targetspi, PORT_t* port)
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
    135a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	09 f4       	brne	.+2      	; 0x1362 <initializespi+0x12>
    1360:	36 c1       	rjmp	.+620    	; 0x15ce <initializespi+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1362:	80 3c       	cpi	r24, 0xC0	; 192
    1364:	91 05       	cpc	r25, r1
    1366:	21 f4       	brne	.+8      	; 0x1370 <initializespi+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1368:	60 e1       	ldi	r22, 0x10	; 16
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	fa d3       	rcall	.+2036   	; 0x1b62 <sysclk_enable_module>
    136e:	2f c1       	rjmp	.+606    	; 0x15ce <initializespi+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1370:	c0 34       	cpi	r28, 0x40	; 64
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	d8 07       	cpc	r29, r24
    1376:	21 f4       	brne	.+8      	; 0x1380 <initializespi+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1378:	68 e0       	ldi	r22, 0x08	; 8
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	f2 d3       	rcall	.+2020   	; 0x1b62 <sysclk_enable_module>
    137e:	27 c1       	rjmp	.+590    	; 0x15ce <initializespi+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1380:	c1 15       	cp	r28, r1
    1382:	e4 e0       	ldi	r30, 0x04	; 4
    1384:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1386:	21 f4       	brne	.+8      	; 0x1390 <initializespi+0x40>
    1388:	64 e0       	ldi	r22, 0x04	; 4
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	ea d3       	rcall	.+2004   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    138e:	1f c1       	rjmp	.+574    	; 0x15ce <initializespi+0x27e>
    1390:	c0 38       	cpi	r28, 0x80	; 128
    1392:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1394:	df 07       	cpc	r29, r31
    1396:	21 f4       	brne	.+8      	; 0x13a0 <initializespi+0x50>
    1398:	62 e0       	ldi	r22, 0x02	; 2
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	e2 d3       	rcall	.+1988   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    139e:	17 c1       	rjmp	.+558    	; 0x15ce <initializespi+0x27e>
    13a0:	c1 15       	cp	r28, r1
    13a2:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    13a4:	d8 07       	cpc	r29, r24
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <initializespi+0x60>
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	da d3       	rcall	.+1972   	; 0x1b62 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    13ae:	0f c1       	rjmp	.+542    	; 0x15ce <initializespi+0x27e>
    13b0:	c0 38       	cpi	r28, 0x80	; 128
    13b2:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    13b4:	de 07       	cpc	r29, r30
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <initializespi+0x70>
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    13bc:	d2 d3       	rcall	.+1956   	; 0x1b62 <sysclk_enable_module>
    13be:	07 c1       	rjmp	.+526    	; 0x15ce <initializespi+0x27e>
    13c0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    13c2:	f3 e0       	ldi	r31, 0x03	; 3
    13c4:	df 07       	cpc	r29, r31
    13c6:	21 f4       	brne	.+8      	; 0x13d0 <initializespi+0x80>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	ca d3       	rcall	.+1940   	; 0x1b62 <sysclk_enable_module>
    13ce:	ff c0       	rjmp	.+510    	; 0x15ce <initializespi+0x27e>
    13d0:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	d8 07       	cpc	r29, r24
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <initializespi+0x90>
    13d8:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	c2 d3       	rcall	.+1924   	; 0x1b62 <sysclk_enable_module>
    13de:	f7 c0       	rjmp	.+494    	; 0x15ce <initializespi+0x27e>
    13e0:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    13e2:	e2 e0       	ldi	r30, 0x02	; 2
    13e4:	de 07       	cpc	r29, r30
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <initializespi+0xa0>
    13e8:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	ba d3       	rcall	.+1908   	; 0x1b62 <sysclk_enable_module>
    13ee:	ef c0       	rjmp	.+478    	; 0x15ce <initializespi+0x27e>
    13f0:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	df 07       	cpc	r29, r31
    13f6:	21 f4       	brne	.+8      	; 0x1400 <initializespi+0xb0>
    13f8:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	b2 d3       	rcall	.+1892   	; 0x1b62 <sysclk_enable_module>
    13fe:	e7 c0       	rjmp	.+462    	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1400:	c0 32       	cpi	r28, 0x20	; 32
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	d8 07       	cpc	r29, r24
    1406:	21 f4       	brne	.+8      	; 0x1410 <initializespi+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1408:	64 e0       	ldi	r22, 0x04	; 4
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	aa d3       	rcall	.+1876   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    140e:	df c0       	rjmp	.+446    	; 0x15ce <initializespi+0x27e>
    1410:	c1 15       	cp	r28, r1
    1412:	e8 e0       	ldi	r30, 0x08	; 8
    1414:	de 07       	cpc	r29, r30
    1416:	21 f4       	brne	.+8      	; 0x1420 <initializespi+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	a2 d3       	rcall	.+1860   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    141e:	d7 c0       	rjmp	.+430    	; 0x15ce <initializespi+0x27e>
    1420:	c1 15       	cp	r28, r1
    1422:	f9 e0       	ldi	r31, 0x09	; 9
    1424:	df 07       	cpc	r29, r31
    1426:	21 f4       	brne	.+8      	; 0x1430 <initializespi+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	9a d3       	rcall	.+1844   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    142e:	cf c0       	rjmp	.+414    	; 0x15ce <initializespi+0x27e>
    1430:	c1 15       	cp	r28, r1
    1432:	8a e0       	ldi	r24, 0x0A	; 10
    1434:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1436:	21 f4       	brne	.+8      	; 0x1440 <initializespi+0xf0>
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    143c:	92 d3       	rcall	.+1828   	; 0x1b62 <sysclk_enable_module>
    143e:	c7 c0       	rjmp	.+398    	; 0x15ce <initializespi+0x27e>
    1440:	c1 15       	cp	r28, r1
    1442:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1444:	de 07       	cpc	r29, r30
    1446:	21 f4       	brne	.+8      	; 0x1450 <initializespi+0x100>
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    144c:	8a d3       	rcall	.+1812   	; 0x1b62 <sysclk_enable_module>
    144e:	bf c0       	rjmp	.+382    	; 0x15ce <initializespi+0x27e>
    1450:	c0 34       	cpi	r28, 0x40	; 64
    1452:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1454:	df 07       	cpc	r29, r31
    1456:	21 f4       	brne	.+8      	; 0x1460 <initializespi+0x110>
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    145c:	82 d3       	rcall	.+1796   	; 0x1b62 <sysclk_enable_module>
    145e:	b7 c0       	rjmp	.+366    	; 0x15ce <initializespi+0x27e>
    1460:	c0 34       	cpi	r28, 0x40	; 64
    1462:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1464:	d8 07       	cpc	r29, r24
    1466:	21 f4       	brne	.+8      	; 0x1470 <initializespi+0x120>
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    146c:	7a d3       	rcall	.+1780   	; 0x1b62 <sysclk_enable_module>
    146e:	af c0       	rjmp	.+350    	; 0x15ce <initializespi+0x27e>
    1470:	c0 34       	cpi	r28, 0x40	; 64
    1472:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1474:	de 07       	cpc	r29, r30
    1476:	21 f4       	brne	.+8      	; 0x1480 <initializespi+0x130>
    1478:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    147a:	85 e0       	ldi	r24, 0x05	; 5
    147c:	72 d3       	rcall	.+1764   	; 0x1b62 <sysclk_enable_module>
    147e:	a7 c0       	rjmp	.+334    	; 0x15ce <initializespi+0x27e>
    1480:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1482:	fb e0       	ldi	r31, 0x0B	; 11
    1484:	df 07       	cpc	r29, r31
    1486:	21 f4       	brne	.+8      	; 0x1490 <initializespi+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	86 e0       	ldi	r24, 0x06	; 6
    148c:	6a d3       	rcall	.+1748   	; 0x1b62 <sysclk_enable_module>
    148e:	9f c0       	rjmp	.+318    	; 0x15ce <initializespi+0x27e>
    1490:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	d8 07       	cpc	r29, r24
    1496:	21 f4       	brne	.+8      	; 0x14a0 <initializespi+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1498:	64 e0       	ldi	r22, 0x04	; 4
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	62 d3       	rcall	.+1732   	; 0x1b62 <sysclk_enable_module>
    149e:	97 c0       	rjmp	.+302    	; 0x15ce <initializespi+0x27e>
    14a0:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    14a2:	e9 e0       	ldi	r30, 0x09	; 9
    14a4:	de 07       	cpc	r29, r30
    14a6:	21 f4       	brne	.+8      	; 0x14b0 <initializespi+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    14a8:	64 e0       	ldi	r22, 0x04	; 4
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	5a d3       	rcall	.+1716   	; 0x1b62 <sysclk_enable_module>
    14ae:	8f c0       	rjmp	.+286    	; 0x15ce <initializespi+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    14b0:	c0 39       	cpi	r28, 0x90	; 144
    14b2:	fa e0       	ldi	r31, 0x0A	; 10
    14b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <initializespi+0x170>
    14b8:	64 e0       	ldi	r22, 0x04	; 4
    14ba:	85 e0       	ldi	r24, 0x05	; 5
    14bc:	52 d3       	rcall	.+1700   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    14be:	87 c0       	rjmp	.+270    	; 0x15ce <initializespi+0x27e>
    14c0:	c0 39       	cpi	r28, 0x90	; 144
    14c2:	8b e0       	ldi	r24, 0x0B	; 11
    14c4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <initializespi+0x180>
    14c8:	64 e0       	ldi	r22, 0x04	; 4
    14ca:	86 e0       	ldi	r24, 0x06	; 6
    14cc:	4a d3       	rcall	.+1684   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    14ce:	7f c0       	rjmp	.+254    	; 0x15ce <initializespi+0x27e>
    14d0:	c0 3c       	cpi	r28, 0xC0	; 192
    14d2:	e8 e0       	ldi	r30, 0x08	; 8
    14d4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <initializespi+0x190>
    14d8:	68 e0       	ldi	r22, 0x08	; 8
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	42 d3       	rcall	.+1668   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    14de:	77 c0       	rjmp	.+238    	; 0x15ce <initializespi+0x27e>
    14e0:	c0 3c       	cpi	r28, 0xC0	; 192
    14e2:	f9 e0       	ldi	r31, 0x09	; 9
    14e4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <initializespi+0x1a0>
    14e8:	68 e0       	ldi	r22, 0x08	; 8
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	3a d3       	rcall	.+1652   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    14ee:	6f c0       	rjmp	.+222    	; 0x15ce <initializespi+0x27e>
    14f0:	c0 3c       	cpi	r28, 0xC0	; 192
    14f2:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    14f4:	d8 07       	cpc	r29, r24
    14f6:	21 f4       	brne	.+8      	; 0x1500 <initializespi+0x1b0>
    14f8:	68 e0       	ldi	r22, 0x08	; 8
    14fa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    14fc:	32 d3       	rcall	.+1636   	; 0x1b62 <sysclk_enable_module>
    14fe:	67 c0       	rjmp	.+206    	; 0x15ce <initializespi+0x27e>
    1500:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1502:	eb e0       	ldi	r30, 0x0B	; 11
    1504:	de 07       	cpc	r29, r30
    1506:	21 f4       	brne	.+8      	; 0x1510 <initializespi+0x1c0>
    1508:	68 e0       	ldi	r22, 0x08	; 8
    150a:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    150c:	2a d3       	rcall	.+1620   	; 0x1b62 <sysclk_enable_module>
    150e:	5f c0       	rjmp	.+190    	; 0x15ce <initializespi+0x27e>
    1510:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1512:	f8 e0       	ldi	r31, 0x08	; 8
    1514:	df 07       	cpc	r29, r31
    1516:	21 f4       	brne	.+8      	; 0x1520 <initializespi+0x1d0>
    1518:	60 e1       	ldi	r22, 0x10	; 16
    151a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    151c:	22 d3       	rcall	.+1604   	; 0x1b62 <sysclk_enable_module>
    151e:	57 c0       	rjmp	.+174    	; 0x15ce <initializespi+0x27e>
    1520:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1522:	89 e0       	ldi	r24, 0x09	; 9
    1524:	d8 07       	cpc	r29, r24
    1526:	21 f4       	brne	.+8      	; 0x1530 <initializespi+0x1e0>
    1528:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	1a d3       	rcall	.+1588   	; 0x1b62 <sysclk_enable_module>
    152e:	4f c0       	rjmp	.+158    	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1530:	c0 3a       	cpi	r28, 0xA0	; 160
    1532:	ea e0       	ldi	r30, 0x0A	; 10
    1534:	de 07       	cpc	r29, r30
    1536:	21 f4       	brne	.+8      	; 0x1540 <initializespi+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1538:	60 e1       	ldi	r22, 0x10	; 16
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	12 d3       	rcall	.+1572   	; 0x1b62 <sysclk_enable_module>
    153e:	47 c0       	rjmp	.+142    	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1540:	c0 3a       	cpi	r28, 0xA0	; 160
    1542:	fb e0       	ldi	r31, 0x0B	; 11
    1544:	df 07       	cpc	r29, r31
    1546:	21 f4       	brne	.+8      	; 0x1550 <initializespi+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1548:	60 e1       	ldi	r22, 0x10	; 16
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	0a d3       	rcall	.+1556   	; 0x1b62 <sysclk_enable_module>
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1550:	c0 3b       	cpi	r28, 0xB0	; 176
    1552:	88 e0       	ldi	r24, 0x08	; 8
    1554:	d8 07       	cpc	r29, r24
    1556:	21 f4       	brne	.+8      	; 0x1560 <initializespi+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1558:	60 e2       	ldi	r22, 0x20	; 32
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	02 d3       	rcall	.+1540   	; 0x1b62 <sysclk_enable_module>
    155e:	37 c0       	rjmp	.+110    	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1560:	c0 3b       	cpi	r28, 0xB0	; 176
    1562:	e9 e0       	ldi	r30, 0x09	; 9
    1564:	de 07       	cpc	r29, r30
    1566:	21 f4       	brne	.+8      	; 0x1570 <initializespi+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1568:	60 e2       	ldi	r22, 0x20	; 32
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	fa d2       	rcall	.+1524   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    156e:	2f c0       	rjmp	.+94     	; 0x15ce <initializespi+0x27e>
    1570:	c0 3b       	cpi	r28, 0xB0	; 176
    1572:	fa e0       	ldi	r31, 0x0A	; 10
    1574:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1576:	21 f4       	brne	.+8      	; 0x1580 <initializespi+0x230>
    1578:	60 e2       	ldi	r22, 0x20	; 32
    157a:	85 e0       	ldi	r24, 0x05	; 5
    157c:	f2 d2       	rcall	.+1508   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    157e:	27 c0       	rjmp	.+78     	; 0x15ce <initializespi+0x27e>
    1580:	c0 3b       	cpi	r28, 0xB0	; 176
    1582:	8b e0       	ldi	r24, 0x0B	; 11
    1584:	d8 07       	cpc	r29, r24
    1586:	21 f4       	brne	.+8      	; 0x1590 <initializespi+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1588:	60 e2       	ldi	r22, 0x20	; 32
    158a:	86 e0       	ldi	r24, 0x06	; 6
    158c:	ea d2       	rcall	.+1492   	; 0x1b62 <sysclk_enable_module>
    158e:	1f c0       	rjmp	.+62     	; 0x15ce <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1590:	c0 38       	cpi	r28, 0x80	; 128
    1592:	e4 e0       	ldi	r30, 0x04	; 4
    1594:	de 07       	cpc	r29, r30
    1596:	21 f4       	brne	.+8      	; 0x15a0 <initializespi+0x250>
    1598:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	e2 d2       	rcall	.+1476   	; 0x1b62 <sysclk_enable_module>
    159e:	17 c0       	rjmp	.+46     	; 0x15ce <initializespi+0x27e>
    15a0:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    15a2:	f4 e0       	ldi	r31, 0x04	; 4
    15a4:	df 07       	cpc	r29, r31
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <initializespi+0x260>
    15a8:	60 e4       	ldi	r22, 0x40	; 64
    15aa:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    15ac:	da d2       	rcall	.+1460   	; 0x1b62 <sysclk_enable_module>
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <initializespi+0x27e>
    15b0:	c0 3a       	cpi	r28, 0xA0	; 160
    15b2:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    15b4:	d8 07       	cpc	r29, r24
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <initializespi+0x270>
    15b8:	60 e4       	ldi	r22, 0x40	; 64
    15ba:	85 e0       	ldi	r24, 0x05	; 5
	*	Initialize pins
	*		MOSI direction to out (Master out, slave in) (pin 5)
	*		MISO direction to in (Master in, slave out) (pin 6)
	*		SCK direction to out? (clock) (pin 7)
	*/
	port->DIRSET |= 0b10110000;  //4 (default SS), 5 (MOSI) & 7 (SCK) to out
    15bc:	d2 d2       	rcall	.+1444   	; 0x1b62 <sysclk_enable_module>
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <initializespi+0x27e>
    15c0:	c0 3b       	cpi	r28, 0xB0	; 176
    15c2:	e4 e0       	ldi	r30, 0x04	; 4
	port->DIRSET &= 0b10111111; //6 (MISO) in
    15c4:	de 07       	cpc	r29, r30
    15c6:	19 f4       	brne	.+6      	; 0x15ce <initializespi+0x27e>
    15c8:	60 e4       	ldi	r22, 0x40	; 64
	port->OUT |= 0b10110000; //Setting 4 to high deselects it, in case it isn't the select we're using
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	ca d2       	rcall	.+1428   	; 0x1b62 <sysclk_enable_module>
    15ce:	f8 01       	movw	r30, r16
	port->IN &= 0b10111111;
    15d0:	81 81       	ldd	r24, Z+1	; 0x01
    15d2:	80 6b       	ori	r24, 0xB0	; 176
    15d4:	81 83       	std	Z+1, r24	; 0x01
	*	6 coefficients are stored in PROM, use them for converting data from D1 and D2 into accurate temperature and pressure
	*	Clock polarity and phase modes 0 and 3 are both acceptable
	*
	*/

	targetspi->CTRL = 0b11010000;
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	8f 7b       	andi	r24, 0xBF	; 191
    15da:	81 83       	std	Z+1, r24	; 0x01
    15dc:	84 81       	ldd	r24, Z+4	; 0x04
    15de:	80 6b       	ori	r24, 0xB0	; 176
    15e0:	84 83       	std	Z+4, r24	; 0x04
    15e2:	80 85       	ldd	r24, Z+8	; 0x08
    15e4:	8f 7b       	andi	r24, 0xBF	; 191
    15e6:	80 87       	std	Z+8, r24	; 0x08
    15e8:	80 ed       	ldi	r24, 0xD0	; 208
    15ea:	88 83       	st	Y, r24
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    15fc:	0e 94 46 01 	call	0x28c	; 0x28c <usart_getchar>
    1600:	88 83       	st	Y, r24
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1608:	0c 94 3e 01 	jmp	0x27c	; 0x27c <usart_putchar>
}
    160c:	08 95       	ret

0000160e <UART_computer_init>:

void UART_computer_init(USART_t* comms_usart, PORT_t* comms_port, ioport_pin_t tx_pin, ioport_pin_t rx_pin)
/* This sets up the UART pins that are used by the XBee (if plugged into a one month board), and by the computer during debugging
Call during startup.
Based on Adam's code template for one month, but with RX pin configuration. */
{
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	27 97       	sbiw	r28, 0x07	; 7
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	8c 01       	movw	r16, r24
    162a:	f2 2e       	mov	r15, r18
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    162c:	84 2f       	mov	r24, r20
    162e:	87 70       	andi	r24, 0x07	; 7
    1630:	cc 24       	eor	r12, r12
    1632:	c3 94       	inc	r12
    1634:	d1 2c       	mov	r13, r1
    1636:	b6 01       	movw	r22, r12
    1638:	02 c0       	rjmp	.+4      	; 0x163e <UART_computer_init+0x30>
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	8a 95       	dec	r24
    1640:	e2 f7       	brpl	.-8      	; 0x163a <UART_computer_init+0x2c>
    1642:	46 95       	lsr	r20
    1644:	46 95       	lsr	r20
    1646:	46 95       	lsr	r20
    1648:	20 e2       	ldi	r18, 0x20	; 32
    164a:	42 9f       	mul	r20, r18
    164c:	c0 01       	movw	r24, r0
    164e:	11 24       	eor	r1, r1
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	9a 5f       	subi	r25, 0xFA	; 250
    1656:	29 d2       	rcall	.+1106   	; 0x1aaa <ioport_configure_port_pin>
    1658:	8f 2d       	mov	r24, r15
    165a:	87 70       	andi	r24, 0x07	; 7
    165c:	b6 01       	movw	r22, r12
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <UART_computer_init+0x56>
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <UART_computer_init+0x52>
    1668:	f6 94       	lsr	r15
    166a:	f6 94       	lsr	r15
    166c:	f6 94       	lsr	r15
    166e:	20 e2       	ldi	r18, 0x20	; 32
    1670:	f2 9e       	mul	r15, r18
    1672:	c0 01       	movw	r24, r0
    1674:	11 24       	eor	r1, r1
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	9a 5f       	subi	r25, 0xFA	; 250
    167c:	16 d2       	rcall	.+1068   	; 0x1aaa <ioport_configure_port_pin>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    167e:	01 15       	cp	r16, r1
    1680:	11 05       	cpc	r17, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <UART_computer_init+0x78>
    1684:	d2 c1       	rjmp	.+932    	; 0x1a2a <UART_computer_init+0x41c>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1686:	00 3c       	cpi	r16, 0xC0	; 192
    1688:	11 05       	cpc	r17, r1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    168a:	21 f4       	brne	.+8      	; 0x1694 <UART_computer_init+0x86>
    168c:	60 e1       	ldi	r22, 0x10	; 16
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	68 d2       	rcall	.+1232   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1692:	cb c1       	rjmp	.+918    	; 0x1a2a <UART_computer_init+0x41c>
    1694:	00 34       	cpi	r16, 0x40	; 64
    1696:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1698:	18 07       	cpc	r17, r24
    169a:	21 f4       	brne	.+8      	; 0x16a4 <UART_computer_init+0x96>
    169c:	68 e0       	ldi	r22, 0x08	; 8
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	60 d2       	rcall	.+1216   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    16a2:	c3 c1       	rjmp	.+902    	; 0x1a2a <UART_computer_init+0x41c>
    16a4:	01 15       	cp	r16, r1
    16a6:	24 e0       	ldi	r18, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    16a8:	12 07       	cpc	r17, r18
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <UART_computer_init+0xa6>
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	58 d2       	rcall	.+1200   	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    16b2:	bb c1       	rjmp	.+886    	; 0x1a2a <UART_computer_init+0x41c>
    16b4:	00 38       	cpi	r16, 0x80	; 128
    16b6:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    16b8:	18 07       	cpc	r17, r24
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <UART_computer_init+0xb6>
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	80 e0       	ldi	r24, 0x00	; 0
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    16c0:	50 d2       	rcall	.+1184   	; 0x1b62 <sysclk_enable_module>
    16c2:	b3 c1       	rjmp	.+870    	; 0x1a2a <UART_computer_init+0x41c>
    16c4:	01 15       	cp	r16, r1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	12 07       	cpc	r17, r18
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <UART_computer_init+0xc6>
    16cc:	61 e0       	ldi	r22, 0x01	; 1
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	48 d2       	rcall	.+1168   	; 0x1b62 <sysclk_enable_module>
    16d2:	ab c1       	rjmp	.+854    	; 0x1a2a <UART_computer_init+0x41c>
    16d4:	00 38       	cpi	r16, 0x80	; 128
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	18 07       	cpc	r17, r24
    16da:	21 f4       	brne	.+8      	; 0x16e4 <UART_computer_init+0xd6>
    16dc:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	40 d2       	rcall	.+1152   	; 0x1b62 <sysclk_enable_module>
    16e2:	a3 c1       	rjmp	.+838    	; 0x1a2a <UART_computer_init+0x41c>
    16e4:	00 39       	cpi	r16, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    16e6:	23 e0       	ldi	r18, 0x03	; 3
    16e8:	12 07       	cpc	r17, r18
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <UART_computer_init+0xe6>
    16ec:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	38 d2       	rcall	.+1136   	; 0x1b62 <sysclk_enable_module>
    16f2:	9b c1       	rjmp	.+822    	; 0x1a2a <UART_computer_init+0x41c>
    16f4:	01 15       	cp	r16, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	18 07       	cpc	r17, r24
    16fa:	21 f4       	brne	.+8      	; 0x1704 <UART_computer_init+0xf6>
    16fc:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	30 d2       	rcall	.+1120   	; 0x1b62 <sysclk_enable_module>
    1702:	93 c1       	rjmp	.+806    	; 0x1a2a <UART_computer_init+0x41c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1704:	00 34       	cpi	r16, 0x40	; 64
    1706:	22 e0       	ldi	r18, 0x02	; 2
    1708:	12 07       	cpc	r17, r18
    170a:	21 f4       	brne	.+8      	; 0x1714 <UART_computer_init+0x106>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	28 d2       	rcall	.+1104   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1712:	8b c1       	rjmp	.+790    	; 0x1a2a <UART_computer_init+0x41c>
    1714:	01 15       	cp	r16, r1
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	18 07       	cpc	r17, r24
    171a:	21 f4       	brne	.+8      	; 0x1724 <UART_computer_init+0x116>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	20 d2       	rcall	.+1088   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1722:	83 c1       	rjmp	.+774    	; 0x1a2a <UART_computer_init+0x41c>
    1724:	00 32       	cpi	r16, 0x20	; 32
    1726:	23 e0       	ldi	r18, 0x03	; 3
    1728:	12 07       	cpc	r17, r18
    172a:	21 f4       	brne	.+8      	; 0x1734 <UART_computer_init+0x126>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    172c:	64 e0       	ldi	r22, 0x04	; 4
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	18 d2       	rcall	.+1072   	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1732:	7b c1       	rjmp	.+758    	; 0x1a2a <UART_computer_init+0x41c>
    1734:	01 15       	cp	r16, r1
    1736:	88 e0       	ldi	r24, 0x08	; 8
    1738:	18 07       	cpc	r17, r24
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    173a:	21 f4       	brne	.+8      	; 0x1744 <UART_computer_init+0x136>
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1740:	10 d2       	rcall	.+1056   	; 0x1b62 <sysclk_enable_module>
    1742:	73 c1       	rjmp	.+742    	; 0x1a2a <UART_computer_init+0x41c>
    1744:	01 15       	cp	r16, r1
    1746:	29 e0       	ldi	r18, 0x09	; 9
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1748:	12 07       	cpc	r17, r18
    174a:	21 f4       	brne	.+8      	; 0x1754 <UART_computer_init+0x146>
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1750:	08 d2       	rcall	.+1040   	; 0x1b62 <sysclk_enable_module>
    1752:	6b c1       	rjmp	.+726    	; 0x1a2a <UART_computer_init+0x41c>
    1754:	01 15       	cp	r16, r1
    1756:	8a e0       	ldi	r24, 0x0A	; 10
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1758:	18 07       	cpc	r17, r24
    175a:	21 f4       	brne	.+8      	; 0x1764 <UART_computer_init+0x156>
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1760:	00 d2       	rcall	.+1024   	; 0x1b62 <sysclk_enable_module>
    1762:	63 c1       	rjmp	.+710    	; 0x1a2a <UART_computer_init+0x41c>
    1764:	01 15       	cp	r16, r1
    1766:	2b e0       	ldi	r18, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1768:	12 07       	cpc	r17, r18
    176a:	21 f4       	brne	.+8      	; 0x1774 <UART_computer_init+0x166>
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1770:	f8 d1       	rcall	.+1008   	; 0x1b62 <sysclk_enable_module>
    1772:	5b c1       	rjmp	.+694    	; 0x1a2a <UART_computer_init+0x41c>
    1774:	00 34       	cpi	r16, 0x40	; 64
    1776:	88 e0       	ldi	r24, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1778:	18 07       	cpc	r17, r24
    177a:	21 f4       	brne	.+8      	; 0x1784 <UART_computer_init+0x176>
    177c:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	f0 d1       	rcall	.+992    	; 0x1b62 <sysclk_enable_module>
    1782:	53 c1       	rjmp	.+678    	; 0x1a2a <UART_computer_init+0x41c>
    1784:	00 34       	cpi	r16, 0x40	; 64
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1786:	29 e0       	ldi	r18, 0x09	; 9
    1788:	12 07       	cpc	r17, r18
    178a:	21 f4       	brne	.+8      	; 0x1794 <UART_computer_init+0x186>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	e8 d1       	rcall	.+976    	; 0x1b62 <sysclk_enable_module>
    1792:	4b c1       	rjmp	.+662    	; 0x1a2a <UART_computer_init+0x41c>
    1794:	00 34       	cpi	r16, 0x40	; 64
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1796:	8a e0       	ldi	r24, 0x0A	; 10
    1798:	18 07       	cpc	r17, r24
    179a:	21 f4       	brne	.+8      	; 0x17a4 <UART_computer_init+0x196>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	e0 d1       	rcall	.+960    	; 0x1b62 <sysclk_enable_module>
    17a2:	43 c1       	rjmp	.+646    	; 0x1a2a <UART_computer_init+0x41c>
    17a4:	00 34       	cpi	r16, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    17a6:	2b e0       	ldi	r18, 0x0B	; 11
    17a8:	12 07       	cpc	r17, r18
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <UART_computer_init+0x1a6>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	d8 d1       	rcall	.+944    	; 0x1b62 <sysclk_enable_module>
    17b2:	3b c1       	rjmp	.+630    	; 0x1a2a <UART_computer_init+0x41c>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    17b4:	00 39       	cpi	r16, 0x90	; 144
    17b6:	88 e0       	ldi	r24, 0x08	; 8
    17b8:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <UART_computer_init+0x1b6>
    17bc:	64 e0       	ldi	r22, 0x04	; 4
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	d0 d1       	rcall	.+928    	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    17c2:	33 c1       	rjmp	.+614    	; 0x1a2a <UART_computer_init+0x41c>
    17c4:	00 39       	cpi	r16, 0x90	; 144
    17c6:	29 e0       	ldi	r18, 0x09	; 9
    17c8:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <UART_computer_init+0x1c6>
    17cc:	64 e0       	ldi	r22, 0x04	; 4
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	c8 d1       	rcall	.+912    	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    17d2:	2b c1       	rjmp	.+598    	; 0x1a2a <UART_computer_init+0x41c>
    17d4:	00 39       	cpi	r16, 0x90	; 144
    17d6:	8a e0       	ldi	r24, 0x0A	; 10
    17d8:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17da:	21 f4       	brne	.+8      	; 0x17e4 <UART_computer_init+0x1d6>
    17dc:	64 e0       	ldi	r22, 0x04	; 4
    17de:	85 e0       	ldi	r24, 0x05	; 5
    17e0:	c0 d1       	rcall	.+896    	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    17e2:	23 c1       	rjmp	.+582    	; 0x1a2a <UART_computer_init+0x41c>
    17e4:	00 39       	cpi	r16, 0x90	; 144
    17e6:	2b e0       	ldi	r18, 0x0B	; 11
    17e8:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <UART_computer_init+0x1e6>
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	86 e0       	ldi	r24, 0x06	; 6
    17f0:	b8 d1       	rcall	.+880    	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    17f2:	1b c1       	rjmp	.+566    	; 0x1a2a <UART_computer_init+0x41c>
    17f4:	00 3c       	cpi	r16, 0xC0	; 192
    17f6:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    17f8:	18 07       	cpc	r17, r24
    17fa:	21 f4       	brne	.+8      	; 0x1804 <UART_computer_init+0x1f6>
    17fc:	68 e0       	ldi	r22, 0x08	; 8
    17fe:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1800:	b0 d1       	rcall	.+864    	; 0x1b62 <sysclk_enable_module>
    1802:	13 c1       	rjmp	.+550    	; 0x1a2a <UART_computer_init+0x41c>
    1804:	00 3c       	cpi	r16, 0xC0	; 192
    1806:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1808:	12 07       	cpc	r17, r18
    180a:	21 f4       	brne	.+8      	; 0x1814 <UART_computer_init+0x206>
    180c:	68 e0       	ldi	r22, 0x08	; 8
    180e:	84 e0       	ldi	r24, 0x04	; 4
    1810:	a8 d1       	rcall	.+848    	; 0x1b62 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1812:	0b c1       	rjmp	.+534    	; 0x1a2a <UART_computer_init+0x41c>
    1814:	00 3c       	cpi	r16, 0xC0	; 192
    1816:	8a e0       	ldi	r24, 0x0A	; 10
    1818:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    181a:	21 f4       	brne	.+8      	; 0x1824 <UART_computer_init+0x216>
    181c:	68 e0       	ldi	r22, 0x08	; 8
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	a0 d1       	rcall	.+832    	; 0x1b62 <sysclk_enable_module>
    1822:	03 c1       	rjmp	.+518    	; 0x1a2a <UART_computer_init+0x41c>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1824:	00 3c       	cpi	r16, 0xC0	; 192
    1826:	2b e0       	ldi	r18, 0x0B	; 11
    1828:	12 07       	cpc	r17, r18
    182a:	21 f4       	brne	.+8      	; 0x1834 <UART_computer_init+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    182c:	68 e0       	ldi	r22, 0x08	; 8
    182e:	86 e0       	ldi	r24, 0x06	; 6
    1830:	98 d1       	rcall	.+816    	; 0x1b62 <sysclk_enable_module>
    1832:	fb c0       	rjmp	.+502    	; 0x1a2a <UART_computer_init+0x41c>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1834:	00 3a       	cpi	r16, 0xA0	; 160
    1836:	88 e0       	ldi	r24, 0x08	; 8
    1838:	18 07       	cpc	r17, r24
    183a:	31 f5       	brne	.+76     	; 0x1888 <UART_computer_init+0x27a>
    183c:	60 e1       	ldi	r22, 0x10	; 16
    183e:	83 e0       	ldi	r24, 0x03	; 3
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1840:	90 d1       	rcall	.+800    	; 0x1b62 <sysclk_enable_module>
    1842:	80 ea       	ldi	r24, 0xA0	; 160
    1844:	98 e0       	ldi	r25, 0x08	; 8
    1846:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <stdio_base>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    184a:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <stdio_base+0x1>
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	9b e0       	ldi	r25, 0x0B	; 11
    1852:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <ptr_put>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1856:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <ptr_put+0x1>
    185a:	8b ef       	ldi	r24, 0xFB	; 251
	usart_rs232_options.paritytype   = options->paritytype;
    185c:	9a e0       	ldi	r25, 0x0A	; 10
    185e:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <__data_end>
	usart_rs232_options.stopbits     = options->stopbits;
    1862:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <__data_end+0x1>
	usart_rs232_options.baudrate     = options->baudrate;
    1866:	e6 e0       	ldi	r30, 0x06	; 6
    1868:	f0 e2       	ldi	r31, 0x20	; 32
    186a:	84 81       	ldd	r24, Z+4	; 0x04
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	85 81       	ldd	r24, Z+5	; 0x05
    1870:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1872:	86 81       	ldd	r24, Z+6	; 0x06
    1874:	8f 83       	std	Y+7, r24	; 0x07
    1876:	80 81       	ld	r24, Z
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	a2 81       	ldd	r26, Z+2	; 0x02
    187c:	b3 81       	ldd	r27, Z+3	; 0x03
    187e:	89 83       	std	Y+1, r24	; 0x01
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	ab 83       	std	Y+3, r26	; 0x03
    1884:	bc 83       	std	Y+4, r27	; 0x04
    1886:	7d c0       	rjmp	.+250    	; 0x1982 <UART_computer_init+0x374>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1888:	00 3a       	cpi	r16, 0xA0	; 160
    188a:	29 e0       	ldi	r18, 0x09	; 9
    188c:	12 07       	cpc	r17, r18
    188e:	21 f4       	brne	.+8      	; 0x1898 <UART_computer_init+0x28a>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1890:	60 e1       	ldi	r22, 0x10	; 16
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	66 d1       	rcall	.+716    	; 0x1b62 <sysclk_enable_module>
    1896:	c9 c0       	rjmp	.+402    	; 0x1a2a <UART_computer_init+0x41c>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1898:	00 3a       	cpi	r16, 0xA0	; 160
    189a:	8a e0       	ldi	r24, 0x0A	; 10
    189c:	18 07       	cpc	r17, r24
    189e:	21 f4       	brne	.+8      	; 0x18a8 <UART_computer_init+0x29a>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    18a0:	60 e1       	ldi	r22, 0x10	; 16
    18a2:	85 e0       	ldi	r24, 0x05	; 5
    18a4:	5e d1       	rcall	.+700    	; 0x1b62 <sysclk_enable_module>
    18a6:	c1 c0       	rjmp	.+386    	; 0x1a2a <UART_computer_init+0x41c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    18a8:	00 3a       	cpi	r16, 0xA0	; 160
    18aa:	2b e0       	ldi	r18, 0x0B	; 11
    18ac:	12 07       	cpc	r17, r18
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <UART_computer_init+0x2aa>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    18b0:	60 e1       	ldi	r22, 0x10	; 16
    18b2:	86 e0       	ldi	r24, 0x06	; 6
    18b4:	56 d1       	rcall	.+684    	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    18b6:	b9 c0       	rjmp	.+370    	; 0x1a2a <UART_computer_init+0x41c>
    18b8:	00 3b       	cpi	r16, 0xB0	; 176
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	18 07       	cpc	r17, r24
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    18be:	21 f4       	brne	.+8      	; 0x18c8 <UART_computer_init+0x2ba>
    18c0:	60 e2       	ldi	r22, 0x20	; 32
    18c2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    18c4:	4e d1       	rcall	.+668    	; 0x1b62 <sysclk_enable_module>
    18c6:	b1 c0       	rjmp	.+354    	; 0x1a2a <UART_computer_init+0x41c>
    18c8:	00 3b       	cpi	r16, 0xB0	; 176
    18ca:	29 e0       	ldi	r18, 0x09	; 9
    18cc:	12 07       	cpc	r17, r18
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <UART_computer_init+0x2ca>
    18d0:	60 e2       	ldi	r22, 0x20	; 32
    18d2:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    18d4:	46 d1       	rcall	.+652    	; 0x1b62 <sysclk_enable_module>
    18d6:	a9 c0       	rjmp	.+338    	; 0x1a2a <UART_computer_init+0x41c>
    18d8:	00 3b       	cpi	r16, 0xB0	; 176
    18da:	8a e0       	ldi	r24, 0x0A	; 10
    18dc:	18 07       	cpc	r17, r24
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    18de:	21 f4       	brne	.+8      	; 0x18e8 <UART_computer_init+0x2da>
    18e0:	60 e2       	ldi	r22, 0x20	; 32
    18e2:	85 e0       	ldi	r24, 0x05	; 5
    18e4:	3e d1       	rcall	.+636    	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    18e6:	a1 c0       	rjmp	.+322    	; 0x1a2a <UART_computer_init+0x41c>
    18e8:	00 3b       	cpi	r16, 0xB0	; 176
    18ea:	2b e0       	ldi	r18, 0x0B	; 11
    18ec:	12 07       	cpc	r17, r18
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <UART_computer_init+0x2ea>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    18f0:	60 e2       	ldi	r22, 0x20	; 32
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	36 d1       	rcall	.+620    	; 0x1b62 <sysclk_enable_module>
    18f6:	99 c0       	rjmp	.+306    	; 0x1a2a <UART_computer_init+0x41c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    18f8:	00 38       	cpi	r16, 0x80	; 128
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	18 07       	cpc	r17, r24
    18fe:	21 f4       	brne	.+8      	; 0x1908 <UART_computer_init+0x2fa>
    1900:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	2e d1       	rcall	.+604    	; 0x1b62 <sysclk_enable_module>
    1906:	91 c0       	rjmp	.+290    	; 0x1a2a <UART_computer_init+0x41c>
    1908:	00 39       	cpi	r16, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	12 07       	cpc	r17, r18
    190e:	21 f4       	brne	.+8      	; 0x1918 <UART_computer_init+0x30a>
    1910:	60 e4       	ldi	r22, 0x40	; 64
    1912:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1914:	26 d1       	rcall	.+588    	; 0x1b62 <sysclk_enable_module>
    1916:	89 c0       	rjmp	.+274    	; 0x1a2a <UART_computer_init+0x41c>
    1918:	00 3a       	cpi	r16, 0xA0	; 160
    191a:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    191c:	18 07       	cpc	r17, r24
    191e:	21 f4       	brne	.+8      	; 0x1928 <UART_computer_init+0x31a>
    1920:	60 e4       	ldi	r22, 0x40	; 64
    1922:	85 e0       	ldi	r24, 0x05	; 5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1924:	1e d1       	rcall	.+572    	; 0x1b62 <sysclk_enable_module>
    1926:	81 c0       	rjmp	.+258    	; 0x1a2a <UART_computer_init+0x41c>
    1928:	00 3b       	cpi	r16, 0xB0	; 176
    192a:	24 e0       	ldi	r18, 0x04	; 4
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    192c:	12 07       	cpc	r17, r18
    192e:	21 f4       	brne	.+8      	; 0x1938 <UART_computer_init+0x32a>
    1930:	60 e4       	ldi	r22, 0x40	; 64
    1932:	86 e0       	ldi	r24, 0x06	; 6
    1934:	16 d1       	rcall	.+556    	; 0x1b62 <sysclk_enable_module>
    1936:	79 c0       	rjmp	.+242    	; 0x1a2a <UART_computer_init+0x41c>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1938:	00 93 d0 20 	sts	0x20D0, r16	; 0x8020d0 <stdio_base>
    193c:	10 93 d1 20 	sts	0x20D1, r17	; 0x8020d1 <stdio_base+0x1>
    1940:	84 e0       	ldi	r24, 0x04	; 4
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1942:	9b e0       	ldi	r25, 0x0B	; 11
    1944:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <ptr_put>
    1948:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <ptr_put+0x1>
	usart_rs232_options.paritytype   = options->paritytype;
	usart_rs232_options.stopbits     = options->stopbits;
    194c:	8b ef       	ldi	r24, 0xFB	; 251
	usart_rs232_options.baudrate     = options->baudrate;
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <__data_end>
    1954:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <__data_end+0x1>
    1958:	e6 e0       	ldi	r30, 0x06	; 6
    195a:	f0 e2       	ldi	r31, 0x20	; 32

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    195c:	84 81       	ldd	r24, Z+4	; 0x04
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	85 81       	ldd	r24, Z+5	; 0x05
    1962:	8e 83       	std	Y+6, r24	; 0x06
    1964:	86 81       	ldd	r24, Z+6	; 0x06
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1966:	8f 83       	std	Y+7, r24	; 0x07
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	a2 81       	ldd	r26, Z+2	; 0x02
    196e:	b3 81       	ldd	r27, Z+3	; 0x03
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	ab 83       	std	Y+3, r26	; 0x03
    1976:	bc 83       	std	Y+4, r27	; 0x04
    1978:	78 01       	movw	r14, r16
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    197a:	00 3a       	cpi	r16, 0xA0	; 160
    197c:	88 e0       	ldi	r24, 0x08	; 8
    197e:	18 07       	cpc	r17, r24
    1980:	51 f4       	brne	.+20     	; 0x1996 <UART_computer_init+0x388>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    1982:	60 e1       	ldi	r22, 0x10	; 16
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	ed d0       	rcall	.+474    	; 0x1b62 <sysclk_enable_module>
    1988:	0f 2e       	mov	r0, r31
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    198a:	f0 ea       	ldi	r31, 0xA0	; 160
    198c:	ef 2e       	mov	r14, r31
    198e:	f8 e0       	ldi	r31, 0x08	; 8
    1990:	ff 2e       	mov	r15, r31
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    1992:	f0 2d       	mov	r31, r0
    1994:	12 c0       	rjmp	.+36     	; 0x19ba <UART_computer_init+0x3ac>
    1996:	20 eb       	ldi	r18, 0xB0	; 176
    1998:	e2 16       	cp	r14, r18
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    199a:	28 e0       	ldi	r18, 0x08	; 8
    199c:	f2 06       	cpc	r15, r18
    199e:	21 f4       	brne	.+8      	; 0x19a8 <UART_computer_init+0x39a>
    19a0:	60 e2       	ldi	r22, 0x20	; 32
    19a2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    19a4:	de d0       	rcall	.+444    	; 0x1b62 <sysclk_enable_module>
    19a6:	12 c0       	rjmp	.+36     	; 0x19cc <UART_computer_init+0x3be>
    19a8:	80 ea       	ldi	r24, 0xA0	; 160
    19aa:	e8 16       	cp	r14, r24
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    19ac:	89 e0       	ldi	r24, 0x09	; 9
    19ae:	f8 06       	cpc	r15, r24
    19b0:	21 f4       	brne	.+8      	; 0x19ba <UART_computer_init+0x3ac>
    19b2:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    19b4:	84 e0       	ldi	r24, 0x04	; 4
    19b6:	d5 d0       	rcall	.+426    	; 0x1b62 <sysclk_enable_module>
    19b8:	12 c0       	rjmp	.+36     	; 0x19de <UART_computer_init+0x3d0>
    19ba:	20 eb       	ldi	r18, 0xB0	; 176
    19bc:	e2 16       	cp	r14, r18
	}
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
    19be:	29 e0       	ldi	r18, 0x09	; 9
    19c0:	f2 06       	cpc	r15, r18
    19c2:	21 f4       	brne	.+8      	; 0x19cc <UART_computer_init+0x3be>
    19c4:	60 e2       	ldi	r22, 0x20	; 32
    19c6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
    19c8:	cc d0       	rcall	.+408    	; 0x1b62 <sysclk_enable_module>
    19ca:	12 c0       	rjmp	.+36     	; 0x19f0 <UART_computer_init+0x3e2>
    19cc:	80 ea       	ldi	r24, 0xA0	; 160
    19ce:	e8 16       	cp	r14, r24
    19d0:	8a e0       	ldi	r24, 0x0A	; 10
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    19d2:	f8 06       	cpc	r15, r24
    19d4:	21 f4       	brne	.+8      	; 0x19de <UART_computer_init+0x3d0>
    19d6:	60 e1       	ldi	r22, 0x10	; 16
    19d8:	85 e0       	ldi	r24, 0x05	; 5
    19da:	c3 d0       	rcall	.+390    	; 0x1b62 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    19dc:	12 c0       	rjmp	.+36     	; 0x1a02 <UART_computer_init+0x3f4>
    19de:	20 eb       	ldi	r18, 0xB0	; 176
    19e0:	e2 16       	cp	r14, r18
    19e2:	2a e0       	ldi	r18, 0x0A	; 10
    19e4:	f2 06       	cpc	r15, r18
	}
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <UART_computer_init+0x3e2>
    19e8:	60 e2       	ldi	r22, 0x20	; 32
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	ba d0       	rcall	.+372    	; 0x1b62 <sysclk_enable_module>
    19ee:	11 c0       	rjmp	.+34     	; 0x1a12 <UART_computer_init+0x404>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
    19f0:	80 ea       	ldi	r24, 0xA0	; 160
    19f2:	e8 16       	cp	r14, r24
    19f4:	8b e0       	ldi	r24, 0x0B	; 11
    19f6:	f8 06       	cpc	r15, r24
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <UART_computer_init+0x3f4>
    19fa:	60 e1       	ldi	r22, 0x10	; 16
    19fc:	86 e0       	ldi	r24, 0x06	; 6
    19fe:	b1 d0       	rcall	.+354    	; 0x1b62 <sysclk_enable_module>
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <UART_computer_init+0x404>
    1a02:	20 eb       	ldi	r18, 0xB0	; 176
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1a04:	e2 16       	cp	r14, r18
    1a06:	2b e0       	ldi	r18, 0x0B	; 11
    1a08:	f2 06       	cpc	r15, r18
    1a0a:	19 f4       	brne	.+6      	; 0x1a12 <UART_computer_init+0x404>
    1a0c:	60 e2       	ldi	r22, 0x20	; 32
    1a0e:	86 e0       	ldi	r24, 0x06	; 6
	gpio_configure_pin(tx_pin, IOPORT_DIR_OUTPUT);
	gpio_configure_pin(rx_pin, IOPORT_DIR_INPUT);
	sysclk_enable_peripheral_clock(comms_usart); 
	
	stdio_serial_init(comms_usart, &options);
    1a10:	a8 d0       	rcall	.+336    	; 0x1b62 <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1a12:	be 01       	movw	r22, r28
    1a14:	6f 5f       	subi	r22, 0xFF	; 255
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	c8 01       	movw	r24, r16
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1a1a:	0e 94 5f 02 	call	0x4be	; 0x4be <usart_init_rs232>
    1a1e:	65 e2       	ldi	r22, 0x25	; 37
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	83 e4       	ldi	r24, 0x43	; 67
    1a24:	9d e0       	ldi	r25, 0x0D	; 13
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1a26:	c2 d3       	rcall	.+1924   	; 0x21ac <fdevopen>
    1a28:	22 c0       	rjmp	.+68     	; 0x1a6e <UART_computer_init+0x460>
    1a2a:	00 93 d0 20 	sts	0x20D0, r16	; 0x8020d0 <stdio_base>
    1a2e:	10 93 d1 20 	sts	0x20D1, r17	; 0x8020d1 <stdio_base+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1a32:	84 e0       	ldi	r24, 0x04	; 4
    1a34:	9b e0       	ldi	r25, 0x0B	; 11
    1a36:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <ptr_put>
	usart_rs232_options.paritytype   = options->paritytype;
    1a3a:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <ptr_put+0x1>
	usart_rs232_options.stopbits     = options->stopbits;
    1a3e:	8b ef       	ldi	r24, 0xFB	; 251
    1a40:	9a e0       	ldi	r25, 0x0A	; 10
	usart_rs232_options.baudrate     = options->baudrate;
    1a42:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <__data_end>
    1a46:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <__data_end+0x1>
    1a4a:	e6 e0       	ldi	r30, 0x06	; 6
    1a4c:	f0 e2       	ldi	r31, 0x20	; 32
    1a4e:	84 81       	ldd	r24, Z+4	; 0x04
    1a50:	8d 83       	std	Y+5, r24	; 0x05

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1a52:	85 81       	ldd	r24, Z+5	; 0x05
    1a54:	8e 83       	std	Y+6, r24	; 0x06
    1a56:	86 81       	ldd	r24, Z+6	; 0x06
    1a58:	8f 83       	std	Y+7, r24	; 0x07
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a60:	b3 81       	ldd	r27, Z+3	; 0x03
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	ab 83       	std	Y+3, r26	; 0x03
    1a68:	bc 83       	std	Y+4, r27	; 0x04
    1a6a:	78 01       	movw	r14, r16
    1a6c:	94 cf       	rjmp	.-216    	; 0x1996 <UART_computer_init+0x388>
    1a6e:	27 96       	adiw	r28, 0x07	; 7
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	08 95       	ret

00001a86 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1a86:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1a88:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <stdio_base>
    1a8c:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <stdio_base+0x1>
    1a90:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <ptr_put>
    1a94:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <ptr_put+0x1>
    1a98:	19 95       	eicall
    1a9a:	99 23       	and	r25, r25
    1a9c:	1c f0       	brlt	.+6      	; 0x1aa4 <_write+0x1e>
		return -1;
	}
	return 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    1aa8:	08 95       	ret

00001aaa <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1ab4:	c6 2f       	mov	r28, r22
    1ab6:	d0 e0       	ldi	r29, 0x00	; 0
    1ab8:	de 01       	movw	r26, r28
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <ioport_configure_port_pin+0x18>
    1abe:	b5 95       	asr	r27
    1ac0:	a7 95       	ror	r26
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <ioport_configure_port_pin+0x14>
    1ac6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1ac8:	50 8b       	std	Z+16, r21	; 0x10
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1ad0:	28 30       	cpi	r18, 0x08	; 8
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	89 f7       	brne	.-30     	; 0x1ab8 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1ad6:	40 ff       	sbrs	r20, 0
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1ada:	41 ff       	sbrs	r20, 1
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1ade:	fc 01       	movw	r30, r24
    1ae0:	65 83       	std	Z+5, r22	; 0x05
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1ae8:	fc 01       	movw	r30, r24
    1aea:	61 83       	std	Z+1, r22	; 0x01
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1aee:	fc 01       	movw	r30, r24
    1af0:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	1f 92       	push	r1
    1afe:	1f 92       	push	r1
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1b0a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1b0e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1b12:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1b16:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1b1a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1b1e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b22:	8f b7       	in	r24, 0x3f	; 63
    1b24:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1b26:	f8 94       	cli
	return flags;
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1b2a:	e0 e5       	ldi	r30, 0x50	; 80
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	82 60       	ori	r24, 0x02	; 2
    1b32:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b34:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1b36:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1b38:	81 ff       	sbrs	r24, 1
    1b3a:	fd cf       	rjmp	.-6      	; 0x1b36 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	80 e4       	ldi	r24, 0x40	; 64
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	25 d0       	rcall	.+74     	; 0x1b8e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b44:	8f b7       	in	r24, 0x3f	; 63
    1b46:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b48:	f8 94       	cli
	return flags;
    1b4a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1b4c:	e0 e5       	ldi	r30, 0x50	; 80
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8e 7f       	andi	r24, 0xFE	; 254
    1b54:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b56:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	08 95       	ret

00001b62 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	1f 92       	push	r1
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b6c:	9f b7       	in	r25, 0x3f	; 63
    1b6e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1b70:	f8 94       	cli
	return flags;
    1b72:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1b74:	e8 2f       	mov	r30, r24
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e0 59       	subi	r30, 0x90	; 144
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 95       	com	r22
    1b7e:	80 81       	ld	r24, Z
    1b80:	68 23       	and	r22, r24
    1b82:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b84:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1b86:	0f 90       	pop	r0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b8e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b90:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b92:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b94:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b96:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b98:	08 95       	ret

00001b9a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1b9a:	08 95       	ret

00001b9c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1b9e:	61 50       	subi	r22, 0x01	; 1
    1ba0:	71 09       	sbc	r23, r1
    1ba2:	81 09       	sbc	r24, r1
    1ba4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1ba6:	61 15       	cp	r22, r1
    1ba8:	71 05       	cpc	r23, r1
    1baa:	81 05       	cpc	r24, r1
    1bac:	91 05       	cpc	r25, r1
    1bae:	b9 f7       	brne	.-18     	; 0x1b9e <__portable_avr_delay_cycles+0x2>
    1bb0:	08 95       	ret

00001bb2 <main>:
#define USART_RX_PIN			IOPORT_CREATE_PIN(PORTC, 2)


//Example usage of MS5611/07 driver for One Monthers
int main (void)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	6a 97       	sbiw	r28, 0x1a	; 26
    1bbc:	cd bf       	out	0x3d, r28	; 61
	board_init();
	sysclk_init();
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	ec df       	rcall	.-40     	; 0x1b9a <board_init>

	UART_computer_init(&COMMS_USART, &PORTC, USART_TX_PIN, USART_RX_PIN);
    1bc2:	9a df       	rcall	.-204    	; 0x1af8 <sysclk_init>
    1bc4:	22 e1       	ldi	r18, 0x12	; 18
    1bc6:	43 e1       	ldi	r20, 0x13	; 19
    1bc8:	60 e4       	ldi	r22, 0x40	; 64
    1bca:	76 e0       	ldi	r23, 0x06	; 6
    1bcc:	80 ea       	ldi	r24, 0xA0	; 160
    1bce:	98 e0       	ldi	r25, 0x08	; 8

	PORTE.DIR = 0xff;
    1bd0:	1e dd       	rcall	.-1476   	; 0x160e <UART_computer_init>
    1bd2:	e0 e8       	ldi	r30, 0x80	; 128
    1bd4:	f6 e0       	ldi	r31, 0x06	; 6
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
	PORTE.OUT = 0x0f;
    1bd8:	80 83       	st	Z, r24
    1bda:	8f e0       	ldi	r24, 0x0F	; 15
	
	MS56XX_t pressure_sensor = define_new_MS56XX_default_OSR(MS5607, &SPIC, IOPORT_CREATE_PIN(PORTC, 4));
    1bdc:	84 83       	std	Z+4, r24	; 0x04
    1bde:	24 e1       	ldi	r18, 0x14	; 20
    1be0:	40 ec       	ldi	r20, 0xC0	; 192
    1be2:	58 e0       	ldi	r21, 0x08	; 8
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	ce 01       	movw	r24, r28
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	0e 94 26 04 	call	0x84c	; 0x84c <define_new_MS56XX_default_OSR>
	
	initializespi(&SPIC, &PORTC);
    1bee:	60 e4       	ldi	r22, 0x40	; 64
    1bf0:	76 e0       	ldi	r23, 0x06	; 6
    1bf2:	80 ec       	ldi	r24, 0xC0	; 192
	enable_select_pin(pressure_sensor.select_pin);
    1bf4:	98 e0       	ldi	r25, 0x08	; 8
    1bf6:	ac db       	rcall	.-2216   	; 0x1350 <initializespi>
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
	
	//Pressure sensor initialization routine, also reads calibration data from sensor
	calibratePressureSensor(&pressure_sensor);
    1bfa:	95 db       	rcall	.-2262   	; 0x1326 <enable_select_pin>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	0e 94 45 04 	call	0x88a	; 0x88a <calibratePressureSensor>
	
	readMS56XX(&pressure_sensor);
    1c04:	ce 01       	movw	r24, r28
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	0e 94 11 05 	call	0xa22	; 0xa22 <readMS56XX>

	printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1c0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c0e:	8f 93       	push	r24
    1c10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c12:	8f 93       	push	r24
    1c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c16:	8f 93       	push	r24
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	8f 93       	push	r24
    1c1c:	88 85       	ldd	r24, Y+8	; 0x08
    1c1e:	8f 93       	push	r24
    1c20:	8f 81       	ldd	r24, Y+7	; 0x07
    1c22:	8f 93       	push	r24
    1c24:	8e 81       	ldd	r24, Y+6	; 0x06
    1c26:	8f 93       	push	r24
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	8f 93       	push	r24
    1c2c:	8d e7       	ldi	r24, 0x7D	; 125
    1c2e:	90 e2       	ldi	r25, 0x20	; 32
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	05 d3       	rcall	.+1546   	; 0x2240 <printf>
    1c36:	cd bf       	out	0x3d, r28	; 61
	
	while (1)
	{
		readMS56XX(&pressure_sensor);
		printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 ", %s\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature, pressure_sensor.data.valid ? "Valid" : "Not valid");
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	fd e6       	ldi	r31, 0x6D	; 109
    1c3e:	cf 2e       	mov	r12, r31
    1c40:	f0 e2       	ldi	r31, 0x20	; 32
    1c42:	df 2e       	mov	r13, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	0f 2e       	mov	r0, r31
    1c48:	f3 e7       	ldi	r31, 0x73	; 115
    1c4a:	ef 2e       	mov	r14, r31
    1c4c:	f0 e2       	ldi	r31, 0x20	; 32
    1c4e:	ff 2e       	mov	r15, r31
    1c50:	f0 2d       	mov	r31, r0
    1c52:	02 ea       	ldi	r16, 0xA2	; 162

	printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
	
	while (1)
	{
		readMS56XX(&pressure_sensor);
    1c54:	10 e2       	ldi	r17, 0x20	; 32
    1c56:	ce 01       	movw	r24, r28
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	0e 94 11 05 	call	0xa22	; 0xa22 <readMS56XX>
		printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 ", %s\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature, pressure_sensor.data.valid ? "Valid" : "Not valid");
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	81 11       	cpse	r24, r1
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <main+0xb8>
    1c64:	8e 2d       	mov	r24, r14
    1c66:	9f 2d       	mov	r25, r15
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <main+0xbc>
    1c6a:	8c 2d       	mov	r24, r12
    1c6c:	9d 2d       	mov	r25, r13
    1c6e:	9f 93       	push	r25
    1c70:	8f 93       	push	r24
    1c72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c74:	8f 93       	push	r24
    1c76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c78:	8f 93       	push	r24
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	8f 93       	push	r24
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	8f 93       	push	r24
    1c82:	88 85       	ldd	r24, Y+8	; 0x08
    1c84:	8f 93       	push	r24
    1c86:	8f 81       	ldd	r24, Y+7	; 0x07
    1c88:	8f 93       	push	r24
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	8f 93       	push	r24
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	8f 93       	push	r24
    1c92:	1f 93       	push	r17
		delay_ms(1000);
    1c94:	0f 93       	push	r16
    1c96:	d4 d2       	rcall	.+1448   	; 0x2240 <printf>
    1c98:	66 e5       	ldi	r22, 0x56	; 86
    1c9a:	71 e6       	ldi	r23, 0x61	; 97
    1c9c:	81 e5       	ldi	r24, 0x51	; 81
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
	}
    1ca0:	7d df       	rcall	.-262    	; 0x1b9c <__portable_avr_delay_cycles>
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	d7 cf       	rjmp	.-82     	; 0x1c56 <main+0xa4>

00001ca8 <__divsf3>:
    1ca8:	0c d0       	rcall	.+24     	; 0x1cc2 <__divsf3x>
    1caa:	05 c1       	rjmp	.+522    	; 0x1eb6 <__fp_round>
    1cac:	fd d0       	rcall	.+506    	; 0x1ea8 <__fp_pscB>
    1cae:	40 f0       	brcs	.+16     	; 0x1cc0 <__divsf3+0x18>
    1cb0:	f4 d0       	rcall	.+488    	; 0x1e9a <__fp_pscA>
    1cb2:	30 f0       	brcs	.+12     	; 0x1cc0 <__divsf3+0x18>
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <__divsf3+0x16>
    1cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <__divsf3+0x18>
    1cba:	d6 c0       	rjmp	.+428    	; 0x1e68 <__fp_inf>
    1cbc:	51 11       	cpse	r21, r1
    1cbe:	2f c1       	rjmp	.+606    	; 0x1f1e <__fp_szero>
    1cc0:	d9 c0       	rjmp	.+434    	; 0x1e74 <__fp_nan>

00001cc2 <__divsf3x>:
    1cc2:	0a d1       	rcall	.+532    	; 0x1ed8 <__fp_split3>
    1cc4:	98 f3       	brcs	.-26     	; 0x1cac <__divsf3+0x4>

00001cc6 <__divsf3_pse>:
    1cc6:	99 23       	and	r25, r25
    1cc8:	c9 f3       	breq	.-14     	; 0x1cbc <__divsf3+0x14>
    1cca:	55 23       	and	r21, r21
    1ccc:	b1 f3       	breq	.-20     	; 0x1cba <__divsf3+0x12>
    1cce:	95 1b       	sub	r25, r21
    1cd0:	55 0b       	sbc	r21, r21
    1cd2:	bb 27       	eor	r27, r27
    1cd4:	aa 27       	eor	r26, r26
    1cd6:	62 17       	cp	r22, r18
    1cd8:	73 07       	cpc	r23, r19
    1cda:	84 07       	cpc	r24, r20
    1cdc:	38 f0       	brcs	.+14     	; 0x1cec <__divsf3_pse+0x26>
    1cde:	9f 5f       	subi	r25, 0xFF	; 255
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	44 1f       	adc	r20, r20
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	a9 f3       	breq	.-22     	; 0x1cd6 <__divsf3_pse+0x10>
    1cec:	33 d0       	rcall	.+102    	; 0x1d54 <__divsf3_pse+0x8e>
    1cee:	0e 2e       	mov	r0, r30
    1cf0:	3a f0       	brmi	.+14     	; 0x1d00 <__divsf3_pse+0x3a>
    1cf2:	e0 e8       	ldi	r30, 0x80	; 128
    1cf4:	30 d0       	rcall	.+96     	; 0x1d56 <__divsf3_pse+0x90>
    1cf6:	91 50       	subi	r25, 0x01	; 1
    1cf8:	50 40       	sbci	r21, 0x00	; 0
    1cfa:	e6 95       	lsr	r30
    1cfc:	00 1c       	adc	r0, r0
    1cfe:	ca f7       	brpl	.-14     	; 0x1cf2 <__divsf3_pse+0x2c>
    1d00:	29 d0       	rcall	.+82     	; 0x1d54 <__divsf3_pse+0x8e>
    1d02:	fe 2f       	mov	r31, r30
    1d04:	27 d0       	rcall	.+78     	; 0x1d54 <__divsf3_pse+0x8e>
    1d06:	66 0f       	add	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	26 17       	cp	r18, r22
    1d10:	37 07       	cpc	r19, r23
    1d12:	48 07       	cpc	r20, r24
    1d14:	ab 07       	cpc	r26, r27
    1d16:	b0 e8       	ldi	r27, 0x80	; 128
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <__divsf3_pse+0x56>
    1d1a:	bb 0b       	sbc	r27, r27
    1d1c:	80 2d       	mov	r24, r0
    1d1e:	bf 01       	movw	r22, r30
    1d20:	ff 27       	eor	r31, r31
    1d22:	93 58       	subi	r25, 0x83	; 131
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	2a f0       	brmi	.+10     	; 0x1d32 <__divsf3_pse+0x6c>
    1d28:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	68 f0       	brcs	.+26     	; 0x1d48 <__divsf3_pse+0x82>
    1d2e:	9c c0       	rjmp	.+312    	; 0x1e68 <__fp_inf>
    1d30:	f6 c0       	rjmp	.+492    	; 0x1f1e <__fp_szero>
    1d32:	5f 3f       	cpi	r21, 0xFF	; 255
    1d34:	ec f3       	brlt	.-6      	; 0x1d30 <__divsf3_pse+0x6a>
    1d36:	98 3e       	cpi	r25, 0xE8	; 232
    1d38:	dc f3       	brlt	.-10     	; 0x1d30 <__divsf3_pse+0x6a>
    1d3a:	86 95       	lsr	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	f7 95       	ror	r31
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <__divsf3_pse+0x74>
    1d48:	88 0f       	add	r24, r24
    1d4a:	91 1d       	adc	r25, r1
    1d4c:	96 95       	lsr	r25
    1d4e:	87 95       	ror	r24
    1d50:	97 f9       	bld	r25, 7
    1d52:	08 95       	ret
    1d54:	e1 e0       	ldi	r30, 0x01	; 1
    1d56:	66 0f       	add	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	62 17       	cp	r22, r18
    1d60:	73 07       	cpc	r23, r19
    1d62:	84 07       	cpc	r24, r20
    1d64:	ba 07       	cpc	r27, r26
    1d66:	20 f0       	brcs	.+8      	; 0x1d70 <__divsf3_pse+0xaa>
    1d68:	62 1b       	sub	r22, r18
    1d6a:	73 0b       	sbc	r23, r19
    1d6c:	84 0b       	sbc	r24, r20
    1d6e:	ba 0b       	sbc	r27, r26
    1d70:	ee 1f       	adc	r30, r30
    1d72:	88 f7       	brcc	.-30     	; 0x1d56 <__divsf3_pse+0x90>
    1d74:	e0 95       	com	r30
    1d76:	08 95       	ret

00001d78 <__fixsfdi>:
    1d78:	be e3       	ldi	r27, 0x3E	; 62
    1d7a:	04 d0       	rcall	.+8      	; 0x1d84 <__fixunssfdi+0x2>
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <__fixsfdi+0x8>
    1d7e:	90 e8       	ldi	r25, 0x80	; 128
    1d80:	08 95       	ret

00001d82 <__fixunssfdi>:
    1d82:	bf e3       	ldi	r27, 0x3F	; 63
    1d84:	22 27       	eor	r18, r18
    1d86:	33 27       	eor	r19, r19
    1d88:	a9 01       	movw	r20, r18
    1d8a:	ae d0       	rcall	.+348    	; 0x1ee8 <__fp_splitA>
    1d8c:	58 f1       	brcs	.+86     	; 0x1de4 <__fixunssfdi+0x62>
    1d8e:	9f 57       	subi	r25, 0x7F	; 127
    1d90:	40 f1       	brcs	.+80     	; 0x1de2 <__fixunssfdi+0x60>
    1d92:	b9 17       	cp	r27, r25
    1d94:	38 f1       	brcs	.+78     	; 0x1de4 <__fixunssfdi+0x62>
    1d96:	bf e3       	ldi	r27, 0x3F	; 63
    1d98:	b9 1b       	sub	r27, r25
    1d9a:	99 27       	eor	r25, r25
    1d9c:	b8 50       	subi	r27, 0x08	; 8
    1d9e:	3a f4       	brpl	.+14     	; 0x1dae <__fixunssfdi+0x2c>
    1da0:	66 0f       	add	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	b3 95       	inc	r27
    1daa:	d2 f3       	brmi	.-12     	; 0x1da0 <__fixunssfdi+0x1e>
    1dac:	16 c0       	rjmp	.+44     	; 0x1dda <__fixunssfdi+0x58>
    1dae:	b8 50       	subi	r27, 0x08	; 8
    1db0:	4a f0       	brmi	.+18     	; 0x1dc4 <__fixunssfdi+0x42>
    1db2:	23 2f       	mov	r18, r19
    1db4:	34 2f       	mov	r19, r20
    1db6:	45 2f       	mov	r20, r21
    1db8:	56 2f       	mov	r21, r22
    1dba:	67 2f       	mov	r22, r23
    1dbc:	78 2f       	mov	r23, r24
    1dbe:	88 27       	eor	r24, r24
    1dc0:	b8 50       	subi	r27, 0x08	; 8
    1dc2:	ba f7       	brpl	.-18     	; 0x1db2 <__fixunssfdi+0x30>
    1dc4:	b8 5f       	subi	r27, 0xF8	; 248
    1dc6:	49 f0       	breq	.+18     	; 0x1dda <__fixunssfdi+0x58>
    1dc8:	86 95       	lsr	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	57 95       	ror	r21
    1dd0:	47 95       	ror	r20
    1dd2:	37 95       	ror	r19
    1dd4:	27 95       	ror	r18
    1dd6:	ba 95       	dec	r27
    1dd8:	b9 f7       	brne	.-18     	; 0x1dc8 <__fixunssfdi+0x46>
    1dda:	0e f4       	brtc	.+2      	; 0x1dde <__fixunssfdi+0x5c>
    1ddc:	4e d0       	rcall	.+156    	; 0x1e7a <__fp_negdi>
    1dde:	88 94       	clc
    1de0:	08 95       	ret
    1de2:	88 94       	clc
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	cb 01       	movw	r24, r22
    1dea:	08 95       	ret

00001dec <__floatundisf>:
    1dec:	e8 94       	clt

00001dee <__fp_di2sf>:
    1dee:	f9 2f       	mov	r31, r25
    1df0:	96 eb       	ldi	r25, 0xB6	; 182
    1df2:	ff 23       	and	r31, r31
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <__fp_di2sf+0x28>
    1df6:	12 16       	cp	r1, r18
    1df8:	13 06       	cpc	r1, r19
    1dfa:	14 06       	cpc	r1, r20
    1dfc:	44 0b       	sbc	r20, r20
    1dfe:	93 95       	inc	r25
    1e00:	f6 95       	lsr	r31
    1e02:	87 95       	ror	r24
    1e04:	77 95       	ror	r23
    1e06:	67 95       	ror	r22
    1e08:	57 95       	ror	r21
    1e0a:	40 40       	sbci	r20, 0x00	; 0
    1e0c:	ff 23       	and	r31, r31
    1e0e:	b9 f7       	brne	.-18     	; 0x1dfe <__fp_di2sf+0x10>
    1e10:	1b c0       	rjmp	.+54     	; 0x1e48 <__fp_di2sf+0x5a>
    1e12:	99 27       	eor	r25, r25
    1e14:	08 95       	ret
    1e16:	88 23       	and	r24, r24
    1e18:	51 f4       	brne	.+20     	; 0x1e2e <__fp_di2sf+0x40>
    1e1a:	98 50       	subi	r25, 0x08	; 8
    1e1c:	d2 f7       	brpl	.-12     	; 0x1e12 <__fp_di2sf+0x24>
    1e1e:	87 2b       	or	r24, r23
    1e20:	76 2f       	mov	r23, r22
    1e22:	65 2f       	mov	r22, r21
    1e24:	54 2f       	mov	r21, r20
    1e26:	43 2f       	mov	r20, r19
    1e28:	32 2f       	mov	r19, r18
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	b1 f3       	breq	.-20     	; 0x1e1a <__fp_di2sf+0x2c>
    1e2e:	12 16       	cp	r1, r18
    1e30:	13 06       	cpc	r1, r19
    1e32:	14 06       	cpc	r1, r20
    1e34:	44 0b       	sbc	r20, r20
    1e36:	88 23       	and	r24, r24
    1e38:	3a f0       	brmi	.+14     	; 0x1e48 <__fp_di2sf+0x5a>
    1e3a:	9a 95       	dec	r25
    1e3c:	44 0f       	add	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	66 1f       	adc	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	ca f7       	brpl	.-14     	; 0x1e3a <__fp_di2sf+0x4c>
    1e48:	55 23       	and	r21, r21
    1e4a:	4a f4       	brpl	.+18     	; 0x1e5e <__fp_di2sf+0x70>
    1e4c:	44 0f       	add	r20, r20
    1e4e:	55 1f       	adc	r21, r21
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <__fp_di2sf+0x68>
    1e52:	60 ff       	sbrs	r22, 0
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__fp_di2sf+0x70>
    1e56:	6f 5f       	subi	r22, 0xFF	; 255
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	88 0f       	add	r24, r24
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	97 f9       	bld	r25, 7
    1e66:	08 95       	ret

00001e68 <__fp_inf>:
    1e68:	97 f9       	bld	r25, 7
    1e6a:	9f 67       	ori	r25, 0x7F	; 127
    1e6c:	80 e8       	ldi	r24, 0x80	; 128
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	08 95       	ret

00001e74 <__fp_nan>:
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	80 ec       	ldi	r24, 0xC0	; 192
    1e78:	08 95       	ret

00001e7a <__fp_negdi>:
    1e7a:	90 95       	com	r25
    1e7c:	80 95       	com	r24
    1e7e:	70 95       	com	r23
    1e80:	60 95       	com	r22
    1e82:	50 95       	com	r21
    1e84:	40 95       	com	r20
    1e86:	30 95       	com	r19
    1e88:	21 95       	neg	r18
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	6f 4f       	sbci	r22, 0xFF	; 255
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	8f 4f       	sbci	r24, 0xFF	; 255
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	08 95       	ret

00001e9a <__fp_pscA>:
    1e9a:	00 24       	eor	r0, r0
    1e9c:	0a 94       	dec	r0
    1e9e:	16 16       	cp	r1, r22
    1ea0:	17 06       	cpc	r1, r23
    1ea2:	18 06       	cpc	r1, r24
    1ea4:	09 06       	cpc	r0, r25
    1ea6:	08 95       	ret

00001ea8 <__fp_pscB>:
    1ea8:	00 24       	eor	r0, r0
    1eaa:	0a 94       	dec	r0
    1eac:	12 16       	cp	r1, r18
    1eae:	13 06       	cpc	r1, r19
    1eb0:	14 06       	cpc	r1, r20
    1eb2:	05 06       	cpc	r0, r21
    1eb4:	08 95       	ret

00001eb6 <__fp_round>:
    1eb6:	09 2e       	mov	r0, r25
    1eb8:	03 94       	inc	r0
    1eba:	00 0c       	add	r0, r0
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <__fp_round+0xc>
    1ebe:	88 23       	and	r24, r24
    1ec0:	52 f0       	brmi	.+20     	; 0x1ed6 <__fp_round+0x20>
    1ec2:	bb 0f       	add	r27, r27
    1ec4:	40 f4       	brcc	.+16     	; 0x1ed6 <__fp_round+0x20>
    1ec6:	bf 2b       	or	r27, r31
    1ec8:	11 f4       	brne	.+4      	; 0x1ece <__fp_round+0x18>
    1eca:	60 ff       	sbrs	r22, 0
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <__fp_round+0x20>
    1ece:	6f 5f       	subi	r22, 0xFF	; 255
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	08 95       	ret

00001ed8 <__fp_split3>:
    1ed8:	57 fd       	sbrc	r21, 7
    1eda:	90 58       	subi	r25, 0x80	; 128
    1edc:	44 0f       	add	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	59 f0       	breq	.+22     	; 0x1ef8 <__fp_splitA+0x10>
    1ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee4:	71 f0       	breq	.+28     	; 0x1f02 <__fp_splitA+0x1a>
    1ee6:	47 95       	ror	r20

00001ee8 <__fp_splitA>:
    1ee8:	88 0f       	add	r24, r24
    1eea:	97 fb       	bst	r25, 7
    1eec:	99 1f       	adc	r25, r25
    1eee:	61 f0       	breq	.+24     	; 0x1f08 <__fp_splitA+0x20>
    1ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef2:	79 f0       	breq	.+30     	; 0x1f12 <__fp_splitA+0x2a>
    1ef4:	87 95       	ror	r24
    1ef6:	08 95       	ret
    1ef8:	12 16       	cp	r1, r18
    1efa:	13 06       	cpc	r1, r19
    1efc:	14 06       	cpc	r1, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	f2 cf       	rjmp	.-28     	; 0x1ee6 <__fp_split3+0xe>
    1f02:	46 95       	lsr	r20
    1f04:	f1 df       	rcall	.-30     	; 0x1ee8 <__fp_splitA>
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__fp_splitA+0x30>
    1f08:	16 16       	cp	r1, r22
    1f0a:	17 06       	cpc	r1, r23
    1f0c:	18 06       	cpc	r1, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	f1 cf       	rjmp	.-30     	; 0x1ef4 <__fp_splitA+0xc>
    1f12:	86 95       	lsr	r24
    1f14:	71 05       	cpc	r23, r1
    1f16:	61 05       	cpc	r22, r1
    1f18:	08 94       	sec
    1f1a:	08 95       	ret

00001f1c <__fp_zero>:
    1f1c:	e8 94       	clt

00001f1e <__fp_szero>:
    1f1e:	bb 27       	eor	r27, r27
    1f20:	66 27       	eor	r22, r22
    1f22:	77 27       	eor	r23, r23
    1f24:	cb 01       	movw	r24, r22
    1f26:	97 f9       	bld	r25, 7
    1f28:	08 95       	ret

00001f2a <__udivmodsi4>:
    1f2a:	a1 e2       	ldi	r26, 0x21	; 33
    1f2c:	1a 2e       	mov	r1, r26
    1f2e:	aa 1b       	sub	r26, r26
    1f30:	bb 1b       	sub	r27, r27
    1f32:	fd 01       	movw	r30, r26
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <__udivmodsi4_ep>

00001f36 <__udivmodsi4_loop>:
    1f36:	aa 1f       	adc	r26, r26
    1f38:	bb 1f       	adc	r27, r27
    1f3a:	ee 1f       	adc	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	a2 17       	cp	r26, r18
    1f40:	b3 07       	cpc	r27, r19
    1f42:	e4 07       	cpc	r30, r20
    1f44:	f5 07       	cpc	r31, r21
    1f46:	20 f0       	brcs	.+8      	; 0x1f50 <__udivmodsi4_ep>
    1f48:	a2 1b       	sub	r26, r18
    1f4a:	b3 0b       	sbc	r27, r19
    1f4c:	e4 0b       	sbc	r30, r20
    1f4e:	f5 0b       	sbc	r31, r21

00001f50 <__udivmodsi4_ep>:
    1f50:	66 1f       	adc	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	1a 94       	dec	r1
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <__udivmodsi4_loop>
    1f5c:	60 95       	com	r22
    1f5e:	70 95       	com	r23
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	bd 01       	movw	r22, r26
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	08 95       	ret

00001f6e <__muldi3>:
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	1f 93       	push	r17
    1f74:	0f 93       	push	r16
    1f76:	9a 9d       	mul	r25, r10
    1f78:	f0 2d       	mov	r31, r0
    1f7a:	21 9f       	mul	r18, r17
    1f7c:	f0 0d       	add	r31, r0
    1f7e:	8b 9d       	mul	r24, r11
    1f80:	f0 0d       	add	r31, r0
    1f82:	8a 9d       	mul	r24, r10
    1f84:	e0 2d       	mov	r30, r0
    1f86:	f1 0d       	add	r31, r1
    1f88:	03 9f       	mul	r16, r19
    1f8a:	f0 0d       	add	r31, r0
    1f8c:	02 9f       	mul	r16, r18
    1f8e:	e0 0d       	add	r30, r0
    1f90:	f1 1d       	adc	r31, r1
    1f92:	4e 9d       	mul	r20, r14
    1f94:	e0 0d       	add	r30, r0
    1f96:	f1 1d       	adc	r31, r1
    1f98:	5e 9d       	mul	r21, r14
    1f9a:	f0 0d       	add	r31, r0
    1f9c:	4f 9d       	mul	r20, r15
    1f9e:	f0 0d       	add	r31, r0
    1fa0:	7f 93       	push	r23
    1fa2:	6f 93       	push	r22
    1fa4:	bf 92       	push	r11
    1fa6:	af 92       	push	r10
    1fa8:	5f 93       	push	r21
    1faa:	4f 93       	push	r20
    1fac:	d5 01       	movw	r26, r10
    1fae:	ef d0       	rcall	.+478    	; 0x218e <__umulhisi3>
    1fb0:	8b 01       	movw	r16, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	d7 01       	movw	r26, r14
    1fb6:	eb d0       	rcall	.+470    	; 0x218e <__umulhisi3>
    1fb8:	eb 01       	movw	r28, r22
    1fba:	e8 0f       	add	r30, r24
    1fbc:	f9 1f       	adc	r31, r25
    1fbe:	d6 01       	movw	r26, r12
    1fc0:	1f d0       	rcall	.+62     	; 0x2000 <__muldi3_6>
    1fc2:	2f 91       	pop	r18
    1fc4:	3f 91       	pop	r19
    1fc6:	d6 01       	movw	r26, r12
    1fc8:	e2 d0       	rcall	.+452    	; 0x218e <__umulhisi3>
    1fca:	c6 0f       	add	r28, r22
    1fcc:	d7 1f       	adc	r29, r23
    1fce:	e8 1f       	adc	r30, r24
    1fd0:	f9 1f       	adc	r31, r25
    1fd2:	af 91       	pop	r26
    1fd4:	bf 91       	pop	r27
    1fd6:	14 d0       	rcall	.+40     	; 0x2000 <__muldi3_6>
    1fd8:	2f 91       	pop	r18
    1fda:	3f 91       	pop	r19
    1fdc:	d8 d0       	rcall	.+432    	; 0x218e <__umulhisi3>
    1fde:	c6 0f       	add	r28, r22
    1fe0:	d7 1f       	adc	r29, r23
    1fe2:	e8 1f       	adc	r30, r24
    1fe4:	f9 1f       	adc	r31, r25
    1fe6:	d6 01       	movw	r26, r12
    1fe8:	d2 d0       	rcall	.+420    	; 0x218e <__umulhisi3>
    1fea:	e6 0f       	add	r30, r22
    1fec:	f7 1f       	adc	r31, r23
    1fee:	98 01       	movw	r18, r16
    1ff0:	be 01       	movw	r22, r28
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	11 24       	eor	r1, r1
    1ff6:	0f 91       	pop	r16
    1ff8:	1f 91       	pop	r17
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <__muldi3_6>:
    2000:	c6 d0       	rcall	.+396    	; 0x218e <__umulhisi3>
    2002:	46 0f       	add	r20, r22
    2004:	57 1f       	adc	r21, r23
    2006:	c8 1f       	adc	r28, r24
    2008:	d9 1f       	adc	r29, r25
    200a:	08 f4       	brcc	.+2      	; 0x200e <__muldi3_6+0xe>
    200c:	31 96       	adiw	r30, 0x01	; 1
    200e:	08 95       	ret

00002010 <__umoddi3>:
    2010:	68 94       	set
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <__udivdi3_umoddi3>

00002014 <__udivdi3>:
    2014:	e8 94       	clt

00002016 <__udivdi3_umoddi3>:
    2016:	8f 92       	push	r8
    2018:	9f 92       	push	r9
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	05 d0       	rcall	.+10     	; 0x202a <__udivmod64>
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	9f 90       	pop	r9
    2026:	8f 90       	pop	r8
    2028:	08 95       	ret

0000202a <__udivmod64>:
    202a:	88 24       	eor	r8, r8
    202c:	99 24       	eor	r9, r9
    202e:	f4 01       	movw	r30, r8
    2030:	e4 01       	movw	r28, r8
    2032:	b0 e4       	ldi	r27, 0x40	; 64
    2034:	9f 93       	push	r25
    2036:	aa 27       	eor	r26, r26
    2038:	9a 15       	cp	r25, r10
    203a:	8b 04       	cpc	r8, r11
    203c:	9c 04       	cpc	r9, r12
    203e:	ed 05       	cpc	r30, r13
    2040:	fe 05       	cpc	r31, r14
    2042:	cf 05       	cpc	r28, r15
    2044:	d0 07       	cpc	r29, r16
    2046:	a1 07       	cpc	r26, r17
    2048:	98 f4       	brcc	.+38     	; 0x2070 <__udivmod64+0x46>
    204a:	ad 2f       	mov	r26, r29
    204c:	dc 2f       	mov	r29, r28
    204e:	cf 2f       	mov	r28, r31
    2050:	fe 2f       	mov	r31, r30
    2052:	e9 2d       	mov	r30, r9
    2054:	98 2c       	mov	r9, r8
    2056:	89 2e       	mov	r8, r25
    2058:	98 2f       	mov	r25, r24
    205a:	87 2f       	mov	r24, r23
    205c:	76 2f       	mov	r23, r22
    205e:	65 2f       	mov	r22, r21
    2060:	54 2f       	mov	r21, r20
    2062:	43 2f       	mov	r20, r19
    2064:	32 2f       	mov	r19, r18
    2066:	22 27       	eor	r18, r18
    2068:	b8 50       	subi	r27, 0x08	; 8
    206a:	31 f7       	brne	.-52     	; 0x2038 <__udivmod64+0xe>
    206c:	bf 91       	pop	r27
    206e:	27 c0       	rjmp	.+78     	; 0x20be <__udivmod64+0x94>
    2070:	1b 2e       	mov	r1, r27
    2072:	bf 91       	pop	r27
    2074:	bb 27       	eor	r27, r27
    2076:	22 0f       	add	r18, r18
    2078:	33 1f       	adc	r19, r19
    207a:	44 1f       	adc	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	88 1c       	adc	r8, r8
    2088:	99 1c       	adc	r9, r9
    208a:	ee 1f       	adc	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	cc 1f       	adc	r28, r28
    2090:	dd 1f       	adc	r29, r29
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	8a 14       	cp	r8, r10
    2098:	9b 04       	cpc	r9, r11
    209a:	ec 05       	cpc	r30, r12
    209c:	fd 05       	cpc	r31, r13
    209e:	ce 05       	cpc	r28, r14
    20a0:	df 05       	cpc	r29, r15
    20a2:	a0 07       	cpc	r26, r16
    20a4:	b1 07       	cpc	r27, r17
    20a6:	48 f0       	brcs	.+18     	; 0x20ba <__udivmod64+0x90>
    20a8:	8a 18       	sub	r8, r10
    20aa:	9b 08       	sbc	r9, r11
    20ac:	ec 09       	sbc	r30, r12
    20ae:	fd 09       	sbc	r31, r13
    20b0:	ce 09       	sbc	r28, r14
    20b2:	df 09       	sbc	r29, r15
    20b4:	a0 0b       	sbc	r26, r16
    20b6:	b1 0b       	sbc	r27, r17
    20b8:	21 60       	ori	r18, 0x01	; 1
    20ba:	1a 94       	dec	r1
    20bc:	e1 f6       	brne	.-72     	; 0x2076 <__udivmod64+0x4c>
    20be:	2e f4       	brtc	.+10     	; 0x20ca <__udivmod64+0xa0>
    20c0:	94 01       	movw	r18, r8
    20c2:	af 01       	movw	r20, r30
    20c4:	be 01       	movw	r22, r28
    20c6:	cd 01       	movw	r24, r26
    20c8:	00 0c       	add	r0, r0
    20ca:	08 95       	ret

000020cc <__ashldi3>:
    20cc:	0f 93       	push	r16
    20ce:	08 30       	cpi	r16, 0x08	; 8
    20d0:	90 f0       	brcs	.+36     	; 0x20f6 <__ashldi3+0x2a>
    20d2:	98 2f       	mov	r25, r24
    20d4:	87 2f       	mov	r24, r23
    20d6:	76 2f       	mov	r23, r22
    20d8:	65 2f       	mov	r22, r21
    20da:	54 2f       	mov	r21, r20
    20dc:	43 2f       	mov	r20, r19
    20de:	32 2f       	mov	r19, r18
    20e0:	22 27       	eor	r18, r18
    20e2:	08 50       	subi	r16, 0x08	; 8
    20e4:	f4 cf       	rjmp	.-24     	; 0x20ce <__ashldi3+0x2>
    20e6:	22 0f       	add	r18, r18
    20e8:	33 1f       	adc	r19, r19
    20ea:	44 1f       	adc	r20, r20
    20ec:	55 1f       	adc	r21, r21
    20ee:	66 1f       	adc	r22, r22
    20f0:	77 1f       	adc	r23, r23
    20f2:	88 1f       	adc	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	0a 95       	dec	r16
    20f8:	b2 f7       	brpl	.-20     	; 0x20e6 <__ashldi3+0x1a>
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <__ashrdi3>:
    20fe:	97 fb       	bst	r25, 7
    2100:	10 f8       	bld	r1, 0

00002102 <__lshrdi3>:
    2102:	16 94       	lsr	r1
    2104:	00 08       	sbc	r0, r0
    2106:	0f 93       	push	r16
    2108:	08 30       	cpi	r16, 0x08	; 8
    210a:	98 f0       	brcs	.+38     	; 0x2132 <__lshrdi3+0x30>
    210c:	08 50       	subi	r16, 0x08	; 8
    210e:	23 2f       	mov	r18, r19
    2110:	34 2f       	mov	r19, r20
    2112:	45 2f       	mov	r20, r21
    2114:	56 2f       	mov	r21, r22
    2116:	67 2f       	mov	r22, r23
    2118:	78 2f       	mov	r23, r24
    211a:	89 2f       	mov	r24, r25
    211c:	90 2d       	mov	r25, r0
    211e:	f4 cf       	rjmp	.-24     	; 0x2108 <__lshrdi3+0x6>
    2120:	05 94       	asr	r0
    2122:	97 95       	ror	r25
    2124:	87 95       	ror	r24
    2126:	77 95       	ror	r23
    2128:	67 95       	ror	r22
    212a:	57 95       	ror	r21
    212c:	47 95       	ror	r20
    212e:	37 95       	ror	r19
    2130:	27 95       	ror	r18
    2132:	0a 95       	dec	r16
    2134:	aa f7       	brpl	.-22     	; 0x2120 <__lshrdi3+0x1e>
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <__adddi3>:
    213a:	2a 0d       	add	r18, r10
    213c:	3b 1d       	adc	r19, r11
    213e:	4c 1d       	adc	r20, r12
    2140:	5d 1d       	adc	r21, r13
    2142:	6e 1d       	adc	r22, r14
    2144:	7f 1d       	adc	r23, r15
    2146:	80 1f       	adc	r24, r16
    2148:	91 1f       	adc	r25, r17
    214a:	08 95       	ret

0000214c <__adddi3_s8>:
    214c:	00 24       	eor	r0, r0
    214e:	a7 fd       	sbrc	r26, 7
    2150:	00 94       	com	r0
    2152:	2a 0f       	add	r18, r26
    2154:	30 1d       	adc	r19, r0
    2156:	40 1d       	adc	r20, r0
    2158:	50 1d       	adc	r21, r0
    215a:	60 1d       	adc	r22, r0
    215c:	70 1d       	adc	r23, r0
    215e:	80 1d       	adc	r24, r0
    2160:	90 1d       	adc	r25, r0
    2162:	08 95       	ret

00002164 <__subdi3>:
    2164:	2a 19       	sub	r18, r10
    2166:	3b 09       	sbc	r19, r11
    2168:	4c 09       	sbc	r20, r12
    216a:	5d 09       	sbc	r21, r13
    216c:	6e 09       	sbc	r22, r14
    216e:	7f 09       	sbc	r23, r15
    2170:	80 0b       	sbc	r24, r16
    2172:	91 0b       	sbc	r25, r17
    2174:	08 95       	ret

00002176 <__cmpdi2_s8>:
    2176:	00 24       	eor	r0, r0
    2178:	a7 fd       	sbrc	r26, 7
    217a:	00 94       	com	r0
    217c:	2a 17       	cp	r18, r26
    217e:	30 05       	cpc	r19, r0
    2180:	40 05       	cpc	r20, r0
    2182:	50 05       	cpc	r21, r0
    2184:	60 05       	cpc	r22, r0
    2186:	70 05       	cpc	r23, r0
    2188:	80 05       	cpc	r24, r0
    218a:	90 05       	cpc	r25, r0
    218c:	08 95       	ret

0000218e <__umulhisi3>:
    218e:	a2 9f       	mul	r26, r18
    2190:	b0 01       	movw	r22, r0
    2192:	b3 9f       	mul	r27, r19
    2194:	c0 01       	movw	r24, r0
    2196:	a3 9f       	mul	r26, r19
    2198:	70 0d       	add	r23, r0
    219a:	81 1d       	adc	r24, r1
    219c:	11 24       	eor	r1, r1
    219e:	91 1d       	adc	r25, r1
    21a0:	b2 9f       	mul	r27, r18
    21a2:	70 0d       	add	r23, r0
    21a4:	81 1d       	adc	r24, r1
    21a6:	11 24       	eor	r1, r1
    21a8:	91 1d       	adc	r25, r1
    21aa:	08 95       	ret

000021ac <fdevopen>:
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	31 f4       	brne	.+12     	; 0x21c4 <fdevopen+0x18>
    21b8:	61 15       	cp	r22, r1
    21ba:	71 05       	cpc	r23, r1
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <fdevopen+0x18>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	39 c0       	rjmp	.+114    	; 0x2236 <fdevopen+0x8a>
    21c4:	8b 01       	movw	r16, r22
    21c6:	ec 01       	movw	r28, r24
    21c8:	6e e0       	ldi	r22, 0x0E	; 14
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	71 d2       	rcall	.+1250   	; 0x26b4 <calloc>
    21d2:	fc 01       	movw	r30, r24
    21d4:	89 2b       	or	r24, r25
    21d6:	99 f3       	breq	.-26     	; 0x21be <fdevopen+0x12>
    21d8:	80 e8       	ldi	r24, 0x80	; 128
    21da:	83 83       	std	Z+3, r24	; 0x03
    21dc:	01 15       	cp	r16, r1
    21de:	11 05       	cpc	r17, r1
    21e0:	71 f0       	breq	.+28     	; 0x21fe <fdevopen+0x52>
    21e2:	02 87       	std	Z+10, r16	; 0x0a
    21e4:	13 87       	std	Z+11, r17	; 0x0b
    21e6:	81 e8       	ldi	r24, 0x81	; 129
    21e8:	83 83       	std	Z+3, r24	; 0x03
    21ea:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <__iob>
    21ee:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <__iob+0x1>
    21f2:	89 2b       	or	r24, r25
    21f4:	21 f4       	brne	.+8      	; 0x21fe <fdevopen+0x52>
    21f6:	e0 93 d2 20 	sts	0x20D2, r30	; 0x8020d2 <__iob>
    21fa:	f0 93 d3 20 	sts	0x20D3, r31	; 0x8020d3 <__iob+0x1>
    21fe:	20 97       	sbiw	r28, 0x00	; 0
    2200:	c9 f0       	breq	.+50     	; 0x2234 <fdevopen+0x88>
    2202:	c0 87       	std	Z+8, r28	; 0x08
    2204:	d1 87       	std	Z+9, r29	; 0x09
    2206:	83 81       	ldd	r24, Z+3	; 0x03
    2208:	82 60       	ori	r24, 0x02	; 2
    220a:	83 83       	std	Z+3, r24	; 0x03
    220c:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <__iob+0x2>
    2210:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <__iob+0x3>
    2214:	89 2b       	or	r24, r25
    2216:	71 f4       	brne	.+28     	; 0x2234 <fdevopen+0x88>
    2218:	e0 93 d4 20 	sts	0x20D4, r30	; 0x8020d4 <__iob+0x2>
    221c:	f0 93 d5 20 	sts	0x20D5, r31	; 0x8020d5 <__iob+0x3>
    2220:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <__iob+0x4>
    2224:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <__iob+0x5>
    2228:	89 2b       	or	r24, r25
    222a:	21 f4       	brne	.+8      	; 0x2234 <fdevopen+0x88>
    222c:	e0 93 d6 20 	sts	0x20D6, r30	; 0x8020d6 <__iob+0x4>
    2230:	f0 93 d7 20 	sts	0x20D7, r31	; 0x8020d7 <__iob+0x5>
    2234:	cf 01       	movw	r24, r30
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <printf>:
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	ae 01       	movw	r20, r28
    224a:	4a 5f       	subi	r20, 0xFA	; 250
    224c:	5f 4f       	sbci	r21, 0xFF	; 255
    224e:	fa 01       	movw	r30, r20
    2250:	61 91       	ld	r22, Z+
    2252:	71 91       	ld	r23, Z+
    2254:	af 01       	movw	r20, r30
    2256:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <__iob+0x2>
    225a:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <__iob+0x3>
    225e:	33 d0       	rcall	.+102    	; 0x22c6 <vfprintf>
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <puts>:
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <__iob+0x2>
    2272:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <__iob+0x3>
    2276:	23 81       	ldd	r18, Z+3	; 0x03
    2278:	21 ff       	sbrs	r18, 1
    227a:	1b c0       	rjmp	.+54     	; 0x22b2 <puts+0x4c>
    227c:	8c 01       	movw	r16, r24
    227e:	d0 e0       	ldi	r29, 0x00	; 0
    2280:	c0 e0       	ldi	r28, 0x00	; 0
    2282:	f8 01       	movw	r30, r16
    2284:	81 91       	ld	r24, Z+
    2286:	8f 01       	movw	r16, r30
    2288:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <__iob+0x2>
    228c:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <__iob+0x3>
    2290:	db 01       	movw	r26, r22
    2292:	18 96       	adiw	r26, 0x08	; 8
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	19 97       	sbiw	r26, 0x09	; 9
    229a:	88 23       	and	r24, r24
    229c:	31 f0       	breq	.+12     	; 0x22aa <puts+0x44>
    229e:	19 95       	eicall
    22a0:	89 2b       	or	r24, r25
    22a2:	79 f3       	breq	.-34     	; 0x2282 <puts+0x1c>
    22a4:	df ef       	ldi	r29, 0xFF	; 255
    22a6:	cf ef       	ldi	r28, 0xFF	; 255
    22a8:	ec cf       	rjmp	.-40     	; 0x2282 <puts+0x1c>
    22aa:	8a e0       	ldi	r24, 0x0A	; 10
    22ac:	19 95       	eicall
    22ae:	89 2b       	or	r24, r25
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <puts+0x52>
    22b2:	8f ef       	ldi	r24, 0xFF	; 255
    22b4:	9f ef       	ldi	r25, 0xFF	; 255
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <puts+0x56>
    22b8:	8d 2f       	mov	r24, r29
    22ba:	9c 2f       	mov	r25, r28
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <vfprintf>:
    22c6:	2f 92       	push	r2
    22c8:	3f 92       	push	r3
    22ca:	4f 92       	push	r4
    22cc:	5f 92       	push	r5
    22ce:	6f 92       	push	r6
    22d0:	7f 92       	push	r7
    22d2:	8f 92       	push	r8
    22d4:	9f 92       	push	r9
    22d6:	af 92       	push	r10
    22d8:	bf 92       	push	r11
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	2b 97       	sbiw	r28, 0x0b	; 11
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	6c 01       	movw	r12, r24
    22f6:	7b 01       	movw	r14, r22
    22f8:	8a 01       	movw	r16, r20
    22fa:	fc 01       	movw	r30, r24
    22fc:	16 82       	std	Z+6, r1	; 0x06
    22fe:	17 82       	std	Z+7, r1	; 0x07
    2300:	83 81       	ldd	r24, Z+3	; 0x03
    2302:	81 ff       	sbrs	r24, 1
    2304:	bf c1       	rjmp	.+894    	; 0x2684 <vfprintf+0x3be>
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	3c 01       	movw	r6, r24
    230c:	f6 01       	movw	r30, r12
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	f7 01       	movw	r30, r14
    2312:	93 fd       	sbrc	r25, 3
    2314:	85 91       	lpm	r24, Z+
    2316:	93 ff       	sbrs	r25, 3
    2318:	81 91       	ld	r24, Z+
    231a:	7f 01       	movw	r14, r30
    231c:	88 23       	and	r24, r24
    231e:	09 f4       	brne	.+2      	; 0x2322 <vfprintf+0x5c>
    2320:	ad c1       	rjmp	.+858    	; 0x267c <vfprintf+0x3b6>
    2322:	85 32       	cpi	r24, 0x25	; 37
    2324:	39 f4       	brne	.+14     	; 0x2334 <vfprintf+0x6e>
    2326:	93 fd       	sbrc	r25, 3
    2328:	85 91       	lpm	r24, Z+
    232a:	93 ff       	sbrs	r25, 3
    232c:	81 91       	ld	r24, Z+
    232e:	7f 01       	movw	r14, r30
    2330:	85 32       	cpi	r24, 0x25	; 37
    2332:	21 f4       	brne	.+8      	; 0x233c <vfprintf+0x76>
    2334:	b6 01       	movw	r22, r12
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	15 d3       	rcall	.+1578   	; 0x2964 <fputc>
    233a:	e8 cf       	rjmp	.-48     	; 0x230c <vfprintf+0x46>
    233c:	91 2c       	mov	r9, r1
    233e:	21 2c       	mov	r2, r1
    2340:	31 2c       	mov	r3, r1
    2342:	ff e1       	ldi	r31, 0x1F	; 31
    2344:	f3 15       	cp	r31, r3
    2346:	d8 f0       	brcs	.+54     	; 0x237e <vfprintf+0xb8>
    2348:	8b 32       	cpi	r24, 0x2B	; 43
    234a:	79 f0       	breq	.+30     	; 0x236a <vfprintf+0xa4>
    234c:	38 f4       	brcc	.+14     	; 0x235c <vfprintf+0x96>
    234e:	80 32       	cpi	r24, 0x20	; 32
    2350:	79 f0       	breq	.+30     	; 0x2370 <vfprintf+0xaa>
    2352:	83 32       	cpi	r24, 0x23	; 35
    2354:	a1 f4       	brne	.+40     	; 0x237e <vfprintf+0xb8>
    2356:	23 2d       	mov	r18, r3
    2358:	20 61       	ori	r18, 0x10	; 16
    235a:	1d c0       	rjmp	.+58     	; 0x2396 <vfprintf+0xd0>
    235c:	8d 32       	cpi	r24, 0x2D	; 45
    235e:	61 f0       	breq	.+24     	; 0x2378 <vfprintf+0xb2>
    2360:	80 33       	cpi	r24, 0x30	; 48
    2362:	69 f4       	brne	.+26     	; 0x237e <vfprintf+0xb8>
    2364:	23 2d       	mov	r18, r3
    2366:	21 60       	ori	r18, 0x01	; 1
    2368:	16 c0       	rjmp	.+44     	; 0x2396 <vfprintf+0xd0>
    236a:	83 2d       	mov	r24, r3
    236c:	82 60       	ori	r24, 0x02	; 2
    236e:	38 2e       	mov	r3, r24
    2370:	e3 2d       	mov	r30, r3
    2372:	e4 60       	ori	r30, 0x04	; 4
    2374:	3e 2e       	mov	r3, r30
    2376:	2a c0       	rjmp	.+84     	; 0x23cc <vfprintf+0x106>
    2378:	f3 2d       	mov	r31, r3
    237a:	f8 60       	ori	r31, 0x08	; 8
    237c:	1d c0       	rjmp	.+58     	; 0x23b8 <vfprintf+0xf2>
    237e:	37 fc       	sbrc	r3, 7
    2380:	2d c0       	rjmp	.+90     	; 0x23dc <vfprintf+0x116>
    2382:	20 ed       	ldi	r18, 0xD0	; 208
    2384:	28 0f       	add	r18, r24
    2386:	2a 30       	cpi	r18, 0x0A	; 10
    2388:	40 f0       	brcs	.+16     	; 0x239a <vfprintf+0xd4>
    238a:	8e 32       	cpi	r24, 0x2E	; 46
    238c:	b9 f4       	brne	.+46     	; 0x23bc <vfprintf+0xf6>
    238e:	36 fc       	sbrc	r3, 6
    2390:	75 c1       	rjmp	.+746    	; 0x267c <vfprintf+0x3b6>
    2392:	23 2d       	mov	r18, r3
    2394:	20 64       	ori	r18, 0x40	; 64
    2396:	32 2e       	mov	r3, r18
    2398:	19 c0       	rjmp	.+50     	; 0x23cc <vfprintf+0x106>
    239a:	36 fe       	sbrs	r3, 6
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <vfprintf+0xe4>
    239e:	8a e0       	ldi	r24, 0x0A	; 10
    23a0:	98 9e       	mul	r9, r24
    23a2:	20 0d       	add	r18, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	92 2e       	mov	r9, r18
    23a8:	11 c0       	rjmp	.+34     	; 0x23cc <vfprintf+0x106>
    23aa:	ea e0       	ldi	r30, 0x0A	; 10
    23ac:	2e 9e       	mul	r2, r30
    23ae:	20 0d       	add	r18, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	22 2e       	mov	r2, r18
    23b4:	f3 2d       	mov	r31, r3
    23b6:	f0 62       	ori	r31, 0x20	; 32
    23b8:	3f 2e       	mov	r3, r31
    23ba:	08 c0       	rjmp	.+16     	; 0x23cc <vfprintf+0x106>
    23bc:	8c 36       	cpi	r24, 0x6C	; 108
    23be:	21 f4       	brne	.+8      	; 0x23c8 <vfprintf+0x102>
    23c0:	83 2d       	mov	r24, r3
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	38 2e       	mov	r3, r24
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <vfprintf+0x106>
    23c8:	88 36       	cpi	r24, 0x68	; 104
    23ca:	41 f4       	brne	.+16     	; 0x23dc <vfprintf+0x116>
    23cc:	f7 01       	movw	r30, r14
    23ce:	93 fd       	sbrc	r25, 3
    23d0:	85 91       	lpm	r24, Z+
    23d2:	93 ff       	sbrs	r25, 3
    23d4:	81 91       	ld	r24, Z+
    23d6:	7f 01       	movw	r14, r30
    23d8:	81 11       	cpse	r24, r1
    23da:	b3 cf       	rjmp	.-154    	; 0x2342 <vfprintf+0x7c>
    23dc:	98 2f       	mov	r25, r24
    23de:	9f 7d       	andi	r25, 0xDF	; 223
    23e0:	95 54       	subi	r25, 0x45	; 69
    23e2:	93 30       	cpi	r25, 0x03	; 3
    23e4:	28 f4       	brcc	.+10     	; 0x23f0 <vfprintf+0x12a>
    23e6:	0c 5f       	subi	r16, 0xFC	; 252
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	9f e3       	ldi	r25, 0x3F	; 63
    23ec:	99 83       	std	Y+1, r25	; 0x01
    23ee:	0d c0       	rjmp	.+26     	; 0x240a <vfprintf+0x144>
    23f0:	83 36       	cpi	r24, 0x63	; 99
    23f2:	31 f0       	breq	.+12     	; 0x2400 <vfprintf+0x13a>
    23f4:	83 37       	cpi	r24, 0x73	; 115
    23f6:	71 f0       	breq	.+28     	; 0x2414 <vfprintf+0x14e>
    23f8:	83 35       	cpi	r24, 0x53	; 83
    23fa:	09 f0       	breq	.+2      	; 0x23fe <vfprintf+0x138>
    23fc:	55 c0       	rjmp	.+170    	; 0x24a8 <vfprintf+0x1e2>
    23fe:	20 c0       	rjmp	.+64     	; 0x2440 <vfprintf+0x17a>
    2400:	f8 01       	movw	r30, r16
    2402:	80 81       	ld	r24, Z
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	0e 5f       	subi	r16, 0xFE	; 254
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	88 24       	eor	r8, r8
    240c:	83 94       	inc	r8
    240e:	91 2c       	mov	r9, r1
    2410:	53 01       	movw	r10, r6
    2412:	12 c0       	rjmp	.+36     	; 0x2438 <vfprintf+0x172>
    2414:	28 01       	movw	r4, r16
    2416:	f2 e0       	ldi	r31, 0x02	; 2
    2418:	4f 0e       	add	r4, r31
    241a:	51 1c       	adc	r5, r1
    241c:	f8 01       	movw	r30, r16
    241e:	a0 80       	ld	r10, Z
    2420:	b1 80       	ldd	r11, Z+1	; 0x01
    2422:	36 fe       	sbrs	r3, 6
    2424:	03 c0       	rjmp	.+6      	; 0x242c <vfprintf+0x166>
    2426:	69 2d       	mov	r22, r9
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <vfprintf+0x16a>
    242c:	6f ef       	ldi	r22, 0xFF	; 255
    242e:	7f ef       	ldi	r23, 0xFF	; 255
    2430:	c5 01       	movw	r24, r10
    2432:	8d d2       	rcall	.+1306   	; 0x294e <strnlen>
    2434:	4c 01       	movw	r8, r24
    2436:	82 01       	movw	r16, r4
    2438:	f3 2d       	mov	r31, r3
    243a:	ff 77       	andi	r31, 0x7F	; 127
    243c:	3f 2e       	mov	r3, r31
    243e:	15 c0       	rjmp	.+42     	; 0x246a <vfprintf+0x1a4>
    2440:	28 01       	movw	r4, r16
    2442:	22 e0       	ldi	r18, 0x02	; 2
    2444:	42 0e       	add	r4, r18
    2446:	51 1c       	adc	r5, r1
    2448:	f8 01       	movw	r30, r16
    244a:	a0 80       	ld	r10, Z
    244c:	b1 80       	ldd	r11, Z+1	; 0x01
    244e:	36 fe       	sbrs	r3, 6
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <vfprintf+0x192>
    2452:	69 2d       	mov	r22, r9
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	02 c0       	rjmp	.+4      	; 0x245c <vfprintf+0x196>
    2458:	6f ef       	ldi	r22, 0xFF	; 255
    245a:	7f ef       	ldi	r23, 0xFF	; 255
    245c:	c5 01       	movw	r24, r10
    245e:	65 d2       	rcall	.+1226   	; 0x292a <strnlen_P>
    2460:	4c 01       	movw	r8, r24
    2462:	f3 2d       	mov	r31, r3
    2464:	f0 68       	ori	r31, 0x80	; 128
    2466:	3f 2e       	mov	r3, r31
    2468:	82 01       	movw	r16, r4
    246a:	33 fc       	sbrc	r3, 3
    246c:	19 c0       	rjmp	.+50     	; 0x24a0 <vfprintf+0x1da>
    246e:	82 2d       	mov	r24, r2
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	88 16       	cp	r8, r24
    2474:	99 06       	cpc	r9, r25
    2476:	a0 f4       	brcc	.+40     	; 0x24a0 <vfprintf+0x1da>
    2478:	b6 01       	movw	r22, r12
    247a:	80 e2       	ldi	r24, 0x20	; 32
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	72 d2       	rcall	.+1252   	; 0x2964 <fputc>
    2480:	2a 94       	dec	r2
    2482:	f5 cf       	rjmp	.-22     	; 0x246e <vfprintf+0x1a8>
    2484:	f5 01       	movw	r30, r10
    2486:	37 fc       	sbrc	r3, 7
    2488:	85 91       	lpm	r24, Z+
    248a:	37 fe       	sbrs	r3, 7
    248c:	81 91       	ld	r24, Z+
    248e:	5f 01       	movw	r10, r30
    2490:	b6 01       	movw	r22, r12
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	67 d2       	rcall	.+1230   	; 0x2964 <fputc>
    2496:	21 10       	cpse	r2, r1
    2498:	2a 94       	dec	r2
    249a:	21 e0       	ldi	r18, 0x01	; 1
    249c:	82 1a       	sub	r8, r18
    249e:	91 08       	sbc	r9, r1
    24a0:	81 14       	cp	r8, r1
    24a2:	91 04       	cpc	r9, r1
    24a4:	79 f7       	brne	.-34     	; 0x2484 <vfprintf+0x1be>
    24a6:	e1 c0       	rjmp	.+450    	; 0x266a <vfprintf+0x3a4>
    24a8:	84 36       	cpi	r24, 0x64	; 100
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <vfprintf+0x1ea>
    24ac:	89 36       	cpi	r24, 0x69	; 105
    24ae:	39 f5       	brne	.+78     	; 0x24fe <vfprintf+0x238>
    24b0:	f8 01       	movw	r30, r16
    24b2:	37 fe       	sbrs	r3, 7
    24b4:	07 c0       	rjmp	.+14     	; 0x24c4 <vfprintf+0x1fe>
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	0c 5f       	subi	r16, 0xFC	; 252
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <vfprintf+0x20e>
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	07 2e       	mov	r0, r23
    24ca:	00 0c       	add	r0, r0
    24cc:	88 0b       	sbc	r24, r24
    24ce:	99 0b       	sbc	r25, r25
    24d0:	0e 5f       	subi	r16, 0xFE	; 254
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	f3 2d       	mov	r31, r3
    24d6:	ff 76       	andi	r31, 0x6F	; 111
    24d8:	3f 2e       	mov	r3, r31
    24da:	97 ff       	sbrs	r25, 7
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <vfprintf+0x22a>
    24de:	90 95       	com	r25
    24e0:	80 95       	com	r24
    24e2:	70 95       	com	r23
    24e4:	61 95       	neg	r22
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	f0 68       	ori	r31, 0x80	; 128
    24ee:	3f 2e       	mov	r3, r31
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	a3 01       	movw	r20, r6
    24f6:	72 d2       	rcall	.+1252   	; 0x29dc <__ultoa_invert>
    24f8:	88 2e       	mov	r8, r24
    24fa:	86 18       	sub	r8, r6
    24fc:	44 c0       	rjmp	.+136    	; 0x2586 <vfprintf+0x2c0>
    24fe:	85 37       	cpi	r24, 0x75	; 117
    2500:	31 f4       	brne	.+12     	; 0x250e <vfprintf+0x248>
    2502:	23 2d       	mov	r18, r3
    2504:	2f 7e       	andi	r18, 0xEF	; 239
    2506:	b2 2e       	mov	r11, r18
    2508:	2a e0       	ldi	r18, 0x0A	; 10
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	25 c0       	rjmp	.+74     	; 0x2558 <vfprintf+0x292>
    250e:	93 2d       	mov	r25, r3
    2510:	99 7f       	andi	r25, 0xF9	; 249
    2512:	b9 2e       	mov	r11, r25
    2514:	8f 36       	cpi	r24, 0x6F	; 111
    2516:	c1 f0       	breq	.+48     	; 0x2548 <vfprintf+0x282>
    2518:	18 f4       	brcc	.+6      	; 0x2520 <vfprintf+0x25a>
    251a:	88 35       	cpi	r24, 0x58	; 88
    251c:	79 f0       	breq	.+30     	; 0x253c <vfprintf+0x276>
    251e:	ae c0       	rjmp	.+348    	; 0x267c <vfprintf+0x3b6>
    2520:	80 37       	cpi	r24, 0x70	; 112
    2522:	19 f0       	breq	.+6      	; 0x252a <vfprintf+0x264>
    2524:	88 37       	cpi	r24, 0x78	; 120
    2526:	21 f0       	breq	.+8      	; 0x2530 <vfprintf+0x26a>
    2528:	a9 c0       	rjmp	.+338    	; 0x267c <vfprintf+0x3b6>
    252a:	e9 2f       	mov	r30, r25
    252c:	e0 61       	ori	r30, 0x10	; 16
    252e:	be 2e       	mov	r11, r30
    2530:	b4 fe       	sbrs	r11, 4
    2532:	0d c0       	rjmp	.+26     	; 0x254e <vfprintf+0x288>
    2534:	fb 2d       	mov	r31, r11
    2536:	f4 60       	ori	r31, 0x04	; 4
    2538:	bf 2e       	mov	r11, r31
    253a:	09 c0       	rjmp	.+18     	; 0x254e <vfprintf+0x288>
    253c:	34 fe       	sbrs	r3, 4
    253e:	0a c0       	rjmp	.+20     	; 0x2554 <vfprintf+0x28e>
    2540:	29 2f       	mov	r18, r25
    2542:	26 60       	ori	r18, 0x06	; 6
    2544:	b2 2e       	mov	r11, r18
    2546:	06 c0       	rjmp	.+12     	; 0x2554 <vfprintf+0x28e>
    2548:	28 e0       	ldi	r18, 0x08	; 8
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <vfprintf+0x292>
    254e:	20 e1       	ldi	r18, 0x10	; 16
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <vfprintf+0x292>
    2554:	20 e1       	ldi	r18, 0x10	; 16
    2556:	32 e0       	ldi	r19, 0x02	; 2
    2558:	f8 01       	movw	r30, r16
    255a:	b7 fe       	sbrs	r11, 7
    255c:	07 c0       	rjmp	.+14     	; 0x256c <vfprintf+0x2a6>
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0c 5f       	subi	r16, 0xFC	; 252
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <vfprintf+0x2b2>
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 5f       	subi	r16, 0xFE	; 254
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	a3 01       	movw	r20, r6
    257a:	30 d2       	rcall	.+1120   	; 0x29dc <__ultoa_invert>
    257c:	88 2e       	mov	r8, r24
    257e:	86 18       	sub	r8, r6
    2580:	fb 2d       	mov	r31, r11
    2582:	ff 77       	andi	r31, 0x7F	; 127
    2584:	3f 2e       	mov	r3, r31
    2586:	36 fe       	sbrs	r3, 6
    2588:	0d c0       	rjmp	.+26     	; 0x25a4 <vfprintf+0x2de>
    258a:	23 2d       	mov	r18, r3
    258c:	2e 7f       	andi	r18, 0xFE	; 254
    258e:	a2 2e       	mov	r10, r18
    2590:	89 14       	cp	r8, r9
    2592:	58 f4       	brcc	.+22     	; 0x25aa <vfprintf+0x2e4>
    2594:	34 fe       	sbrs	r3, 4
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <vfprintf+0x2e8>
    2598:	32 fc       	sbrc	r3, 2
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <vfprintf+0x2e8>
    259c:	83 2d       	mov	r24, r3
    259e:	8e 7e       	andi	r24, 0xEE	; 238
    25a0:	a8 2e       	mov	r10, r24
    25a2:	05 c0       	rjmp	.+10     	; 0x25ae <vfprintf+0x2e8>
    25a4:	b8 2c       	mov	r11, r8
    25a6:	a3 2c       	mov	r10, r3
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <vfprintf+0x2ea>
    25aa:	b8 2c       	mov	r11, r8
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <vfprintf+0x2ea>
    25ae:	b9 2c       	mov	r11, r9
    25b0:	a4 fe       	sbrs	r10, 4
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <vfprintf+0x30c>
    25b4:	fe 01       	movw	r30, r28
    25b6:	e8 0d       	add	r30, r8
    25b8:	f1 1d       	adc	r31, r1
    25ba:	80 81       	ld	r24, Z
    25bc:	80 33       	cpi	r24, 0x30	; 48
    25be:	21 f4       	brne	.+8      	; 0x25c8 <vfprintf+0x302>
    25c0:	9a 2d       	mov	r25, r10
    25c2:	99 7e       	andi	r25, 0xE9	; 233
    25c4:	a9 2e       	mov	r10, r25
    25c6:	09 c0       	rjmp	.+18     	; 0x25da <vfprintf+0x314>
    25c8:	a2 fe       	sbrs	r10, 2
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <vfprintf+0x312>
    25cc:	b3 94       	inc	r11
    25ce:	b3 94       	inc	r11
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <vfprintf+0x314>
    25d2:	8a 2d       	mov	r24, r10
    25d4:	86 78       	andi	r24, 0x86	; 134
    25d6:	09 f0       	breq	.+2      	; 0x25da <vfprintf+0x314>
    25d8:	b3 94       	inc	r11
    25da:	a3 fc       	sbrc	r10, 3
    25dc:	10 c0       	rjmp	.+32     	; 0x25fe <vfprintf+0x338>
    25de:	a0 fe       	sbrs	r10, 0
    25e0:	06 c0       	rjmp	.+12     	; 0x25ee <vfprintf+0x328>
    25e2:	b2 14       	cp	r11, r2
    25e4:	80 f4       	brcc	.+32     	; 0x2606 <vfprintf+0x340>
    25e6:	28 0c       	add	r2, r8
    25e8:	92 2c       	mov	r9, r2
    25ea:	9b 18       	sub	r9, r11
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <vfprintf+0x342>
    25ee:	b2 14       	cp	r11, r2
    25f0:	58 f4       	brcc	.+22     	; 0x2608 <vfprintf+0x342>
    25f2:	b6 01       	movw	r22, r12
    25f4:	80 e2       	ldi	r24, 0x20	; 32
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	b5 d1       	rcall	.+874    	; 0x2964 <fputc>
    25fa:	b3 94       	inc	r11
    25fc:	f8 cf       	rjmp	.-16     	; 0x25ee <vfprintf+0x328>
    25fe:	b2 14       	cp	r11, r2
    2600:	18 f4       	brcc	.+6      	; 0x2608 <vfprintf+0x342>
    2602:	2b 18       	sub	r2, r11
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x344>
    2606:	98 2c       	mov	r9, r8
    2608:	21 2c       	mov	r2, r1
    260a:	a4 fe       	sbrs	r10, 4
    260c:	0f c0       	rjmp	.+30     	; 0x262c <vfprintf+0x366>
    260e:	b6 01       	movw	r22, r12
    2610:	80 e3       	ldi	r24, 0x30	; 48
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a7 d1       	rcall	.+846    	; 0x2964 <fputc>
    2616:	a2 fe       	sbrs	r10, 2
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <vfprintf+0x380>
    261a:	a1 fc       	sbrc	r10, 1
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <vfprintf+0x35e>
    261e:	88 e7       	ldi	r24, 0x78	; 120
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <vfprintf+0x362>
    2624:	88 e5       	ldi	r24, 0x58	; 88
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	b6 01       	movw	r22, r12
    262a:	0c c0       	rjmp	.+24     	; 0x2644 <vfprintf+0x37e>
    262c:	8a 2d       	mov	r24, r10
    262e:	86 78       	andi	r24, 0x86	; 134
    2630:	51 f0       	breq	.+20     	; 0x2646 <vfprintf+0x380>
    2632:	a1 fe       	sbrs	r10, 1
    2634:	02 c0       	rjmp	.+4      	; 0x263a <vfprintf+0x374>
    2636:	8b e2       	ldi	r24, 0x2B	; 43
    2638:	01 c0       	rjmp	.+2      	; 0x263c <vfprintf+0x376>
    263a:	80 e2       	ldi	r24, 0x20	; 32
    263c:	a7 fc       	sbrc	r10, 7
    263e:	8d e2       	ldi	r24, 0x2D	; 45
    2640:	b6 01       	movw	r22, r12
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	8f d1       	rcall	.+798    	; 0x2964 <fputc>
    2646:	89 14       	cp	r8, r9
    2648:	30 f4       	brcc	.+12     	; 0x2656 <vfprintf+0x390>
    264a:	b6 01       	movw	r22, r12
    264c:	80 e3       	ldi	r24, 0x30	; 48
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	89 d1       	rcall	.+786    	; 0x2964 <fputc>
    2652:	9a 94       	dec	r9
    2654:	f8 cf       	rjmp	.-16     	; 0x2646 <vfprintf+0x380>
    2656:	8a 94       	dec	r8
    2658:	f3 01       	movw	r30, r6
    265a:	e8 0d       	add	r30, r8
    265c:	f1 1d       	adc	r31, r1
    265e:	80 81       	ld	r24, Z
    2660:	b6 01       	movw	r22, r12
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	7f d1       	rcall	.+766    	; 0x2964 <fputc>
    2666:	81 10       	cpse	r8, r1
    2668:	f6 cf       	rjmp	.-20     	; 0x2656 <vfprintf+0x390>
    266a:	22 20       	and	r2, r2
    266c:	09 f4       	brne	.+2      	; 0x2670 <vfprintf+0x3aa>
    266e:	4e ce       	rjmp	.-868    	; 0x230c <vfprintf+0x46>
    2670:	b6 01       	movw	r22, r12
    2672:	80 e2       	ldi	r24, 0x20	; 32
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	76 d1       	rcall	.+748    	; 0x2964 <fputc>
    2678:	2a 94       	dec	r2
    267a:	f7 cf       	rjmp	.-18     	; 0x266a <vfprintf+0x3a4>
    267c:	f6 01       	movw	r30, r12
    267e:	86 81       	ldd	r24, Z+6	; 0x06
    2680:	97 81       	ldd	r25, Z+7	; 0x07
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <vfprintf+0x3c2>
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	9f ef       	ldi	r25, 0xFF	; 255
    2688:	2b 96       	adiw	r28, 0x0b	; 11
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	ff 90       	pop	r15
    2698:	ef 90       	pop	r14
    269a:	df 90       	pop	r13
    269c:	cf 90       	pop	r12
    269e:	bf 90       	pop	r11
    26a0:	af 90       	pop	r10
    26a2:	9f 90       	pop	r9
    26a4:	8f 90       	pop	r8
    26a6:	7f 90       	pop	r7
    26a8:	6f 90       	pop	r6
    26aa:	5f 90       	pop	r5
    26ac:	4f 90       	pop	r4
    26ae:	3f 90       	pop	r3
    26b0:	2f 90       	pop	r2
    26b2:	08 95       	ret

000026b4 <calloc>:
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	86 9f       	mul	r24, r22
    26be:	80 01       	movw	r16, r0
    26c0:	87 9f       	mul	r24, r23
    26c2:	10 0d       	add	r17, r0
    26c4:	96 9f       	mul	r25, r22
    26c6:	10 0d       	add	r17, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	c8 01       	movw	r24, r16
    26cc:	0d d0       	rcall	.+26     	; 0x26e8 <malloc>
    26ce:	ec 01       	movw	r28, r24
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	21 f0       	breq	.+8      	; 0x26dc <calloc+0x28>
    26d4:	a8 01       	movw	r20, r16
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	32 d1       	rcall	.+612    	; 0x2940 <memset>
    26dc:	ce 01       	movw	r24, r28
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	08 95       	ret

000026e8 <malloc>:
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	91 05       	cpc	r25, r1
    26f4:	10 f4       	brcc	.+4      	; 0x26fa <malloc+0x12>
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <__flp>
    26fe:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <__flp+0x1>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	a0 e0       	ldi	r26, 0x00	; 0
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	30 97       	sbiw	r30, 0x00	; 0
    270c:	19 f1       	breq	.+70     	; 0x2754 <malloc+0x6c>
    270e:	40 81       	ld	r20, Z
    2710:	51 81       	ldd	r21, Z+1	; 0x01
    2712:	02 81       	ldd	r16, Z+2	; 0x02
    2714:	13 81       	ldd	r17, Z+3	; 0x03
    2716:	48 17       	cp	r20, r24
    2718:	59 07       	cpc	r21, r25
    271a:	c8 f0       	brcs	.+50     	; 0x274e <malloc+0x66>
    271c:	84 17       	cp	r24, r20
    271e:	95 07       	cpc	r25, r21
    2720:	69 f4       	brne	.+26     	; 0x273c <malloc+0x54>
    2722:	10 97       	sbiw	r26, 0x00	; 0
    2724:	31 f0       	breq	.+12     	; 0x2732 <malloc+0x4a>
    2726:	12 96       	adiw	r26, 0x02	; 2
    2728:	0c 93       	st	X, r16
    272a:	12 97       	sbiw	r26, 0x02	; 2
    272c:	13 96       	adiw	r26, 0x03	; 3
    272e:	1c 93       	st	X, r17
    2730:	27 c0       	rjmp	.+78     	; 0x2780 <malloc+0x98>
    2732:	00 93 da 20 	sts	0x20DA, r16	; 0x8020da <__flp>
    2736:	10 93 db 20 	sts	0x20DB, r17	; 0x8020db <__flp+0x1>
    273a:	22 c0       	rjmp	.+68     	; 0x2780 <malloc+0x98>
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	19 f0       	breq	.+6      	; 0x2748 <malloc+0x60>
    2742:	42 17       	cp	r20, r18
    2744:	53 07       	cpc	r21, r19
    2746:	18 f4       	brcc	.+6      	; 0x274e <malloc+0x66>
    2748:	9a 01       	movw	r18, r20
    274a:	bd 01       	movw	r22, r26
    274c:	ef 01       	movw	r28, r30
    274e:	df 01       	movw	r26, r30
    2750:	f8 01       	movw	r30, r16
    2752:	db cf       	rjmp	.-74     	; 0x270a <malloc+0x22>
    2754:	21 15       	cp	r18, r1
    2756:	31 05       	cpc	r19, r1
    2758:	f9 f0       	breq	.+62     	; 0x2798 <malloc+0xb0>
    275a:	28 1b       	sub	r18, r24
    275c:	39 0b       	sbc	r19, r25
    275e:	24 30       	cpi	r18, 0x04	; 4
    2760:	31 05       	cpc	r19, r1
    2762:	80 f4       	brcc	.+32     	; 0x2784 <malloc+0x9c>
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	61 15       	cp	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	21 f0       	breq	.+8      	; 0x2776 <malloc+0x8e>
    276e:	fb 01       	movw	r30, r22
    2770:	82 83       	std	Z+2, r24	; 0x02
    2772:	93 83       	std	Z+3, r25	; 0x03
    2774:	04 c0       	rjmp	.+8      	; 0x277e <malloc+0x96>
    2776:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <__flp>
    277a:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <__flp+0x1>
    277e:	fe 01       	movw	r30, r28
    2780:	32 96       	adiw	r30, 0x02	; 2
    2782:	44 c0       	rjmp	.+136    	; 0x280c <malloc+0x124>
    2784:	fe 01       	movw	r30, r28
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	81 93       	st	Z+, r24
    278c:	91 93       	st	Z+, r25
    278e:	22 50       	subi	r18, 0x02	; 2
    2790:	31 09       	sbc	r19, r1
    2792:	28 83       	st	Y, r18
    2794:	39 83       	std	Y+1, r19	; 0x01
    2796:	3a c0       	rjmp	.+116    	; 0x280c <malloc+0x124>
    2798:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <__brkval>
    279c:	30 91 d9 20 	lds	r19, 0x20D9	; 0x8020d9 <__brkval+0x1>
    27a0:	23 2b       	or	r18, r19
    27a2:	41 f4       	brne	.+16     	; 0x27b4 <malloc+0xcc>
    27a4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    27a8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    27ac:	20 93 d8 20 	sts	0x20D8, r18	; 0x8020d8 <__brkval>
    27b0:	30 93 d9 20 	sts	0x20D9, r19	; 0x8020d9 <__brkval+0x1>
    27b4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    27b8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    27bc:	21 15       	cp	r18, r1
    27be:	31 05       	cpc	r19, r1
    27c0:	41 f4       	brne	.+16     	; 0x27d2 <malloc+0xea>
    27c2:	2d b7       	in	r18, 0x3d	; 61
    27c4:	3e b7       	in	r19, 0x3e	; 62
    27c6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    27ca:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    27ce:	24 1b       	sub	r18, r20
    27d0:	35 0b       	sbc	r19, r21
    27d2:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <__brkval>
    27d6:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <__brkval+0x1>
    27da:	e2 17       	cp	r30, r18
    27dc:	f3 07       	cpc	r31, r19
    27de:	a0 f4       	brcc	.+40     	; 0x2808 <malloc+0x120>
    27e0:	2e 1b       	sub	r18, r30
    27e2:	3f 0b       	sbc	r19, r31
    27e4:	28 17       	cp	r18, r24
    27e6:	39 07       	cpc	r19, r25
    27e8:	78 f0       	brcs	.+30     	; 0x2808 <malloc+0x120>
    27ea:	ac 01       	movw	r20, r24
    27ec:	4e 5f       	subi	r20, 0xFE	; 254
    27ee:	5f 4f       	sbci	r21, 0xFF	; 255
    27f0:	24 17       	cp	r18, r20
    27f2:	35 07       	cpc	r19, r21
    27f4:	48 f0       	brcs	.+18     	; 0x2808 <malloc+0x120>
    27f6:	4e 0f       	add	r20, r30
    27f8:	5f 1f       	adc	r21, r31
    27fa:	40 93 d8 20 	sts	0x20D8, r20	; 0x8020d8 <__brkval>
    27fe:	50 93 d9 20 	sts	0x20D9, r21	; 0x8020d9 <__brkval+0x1>
    2802:	81 93       	st	Z+, r24
    2804:	91 93       	st	Z+, r25
    2806:	02 c0       	rjmp	.+4      	; 0x280c <malloc+0x124>
    2808:	e0 e0       	ldi	r30, 0x00	; 0
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	cf 01       	movw	r24, r30
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <free>:
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	09 f4       	brne	.+2      	; 0x2822 <free+0xa>
    2820:	81 c0       	rjmp	.+258    	; 0x2924 <free+0x10c>
    2822:	fc 01       	movw	r30, r24
    2824:	32 97       	sbiw	r30, 0x02	; 2
    2826:	12 82       	std	Z+2, r1	; 0x02
    2828:	13 82       	std	Z+3, r1	; 0x03
    282a:	a0 91 da 20 	lds	r26, 0x20DA	; 0x8020da <__flp>
    282e:	b0 91 db 20 	lds	r27, 0x20DB	; 0x8020db <__flp+0x1>
    2832:	10 97       	sbiw	r26, 0x00	; 0
    2834:	81 f4       	brne	.+32     	; 0x2856 <free+0x3e>
    2836:	20 81       	ld	r18, Z
    2838:	31 81       	ldd	r19, Z+1	; 0x01
    283a:	82 0f       	add	r24, r18
    283c:	93 1f       	adc	r25, r19
    283e:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <__brkval>
    2842:	30 91 d9 20 	lds	r19, 0x20D9	; 0x8020d9 <__brkval+0x1>
    2846:	28 17       	cp	r18, r24
    2848:	39 07       	cpc	r19, r25
    284a:	51 f5       	brne	.+84     	; 0x28a0 <free+0x88>
    284c:	e0 93 d8 20 	sts	0x20D8, r30	; 0x8020d8 <__brkval>
    2850:	f0 93 d9 20 	sts	0x20D9, r31	; 0x8020d9 <__brkval+0x1>
    2854:	67 c0       	rjmp	.+206    	; 0x2924 <free+0x10c>
    2856:	ed 01       	movw	r28, r26
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	ce 17       	cp	r28, r30
    285e:	df 07       	cpc	r29, r31
    2860:	40 f4       	brcc	.+16     	; 0x2872 <free+0x5a>
    2862:	4a 81       	ldd	r20, Y+2	; 0x02
    2864:	5b 81       	ldd	r21, Y+3	; 0x03
    2866:	9e 01       	movw	r18, r28
    2868:	41 15       	cp	r20, r1
    286a:	51 05       	cpc	r21, r1
    286c:	f1 f0       	breq	.+60     	; 0x28aa <free+0x92>
    286e:	ea 01       	movw	r28, r20
    2870:	f5 cf       	rjmp	.-22     	; 0x285c <free+0x44>
    2872:	c2 83       	std	Z+2, r28	; 0x02
    2874:	d3 83       	std	Z+3, r29	; 0x03
    2876:	40 81       	ld	r20, Z
    2878:	51 81       	ldd	r21, Z+1	; 0x01
    287a:	84 0f       	add	r24, r20
    287c:	95 1f       	adc	r25, r21
    287e:	c8 17       	cp	r28, r24
    2880:	d9 07       	cpc	r29, r25
    2882:	59 f4       	brne	.+22     	; 0x289a <free+0x82>
    2884:	88 81       	ld	r24, Y
    2886:	99 81       	ldd	r25, Y+1	; 0x01
    2888:	84 0f       	add	r24, r20
    288a:	95 1f       	adc	r25, r21
    288c:	02 96       	adiw	r24, 0x02	; 2
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	82 83       	std	Z+2, r24	; 0x02
    2898:	93 83       	std	Z+3, r25	; 0x03
    289a:	21 15       	cp	r18, r1
    289c:	31 05       	cpc	r19, r1
    289e:	29 f4       	brne	.+10     	; 0x28aa <free+0x92>
    28a0:	e0 93 da 20 	sts	0x20DA, r30	; 0x8020da <__flp>
    28a4:	f0 93 db 20 	sts	0x20DB, r31	; 0x8020db <__flp+0x1>
    28a8:	3d c0       	rjmp	.+122    	; 0x2924 <free+0x10c>
    28aa:	e9 01       	movw	r28, r18
    28ac:	ea 83       	std	Y+2, r30	; 0x02
    28ae:	fb 83       	std	Y+3, r31	; 0x03
    28b0:	49 91       	ld	r20, Y+
    28b2:	59 91       	ld	r21, Y+
    28b4:	c4 0f       	add	r28, r20
    28b6:	d5 1f       	adc	r29, r21
    28b8:	ec 17       	cp	r30, r28
    28ba:	fd 07       	cpc	r31, r29
    28bc:	61 f4       	brne	.+24     	; 0x28d6 <free+0xbe>
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	84 0f       	add	r24, r20
    28c4:	95 1f       	adc	r25, r21
    28c6:	02 96       	adiw	r24, 0x02	; 2
    28c8:	e9 01       	movw	r28, r18
    28ca:	88 83       	st	Y, r24
    28cc:	99 83       	std	Y+1, r25	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	8a 83       	std	Y+2, r24	; 0x02
    28d4:	9b 83       	std	Y+3, r25	; 0x03
    28d6:	e0 e0       	ldi	r30, 0x00	; 0
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	12 96       	adiw	r26, 0x02	; 2
    28dc:	8d 91       	ld	r24, X+
    28de:	9c 91       	ld	r25, X
    28e0:	13 97       	sbiw	r26, 0x03	; 3
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	19 f0       	breq	.+6      	; 0x28ec <free+0xd4>
    28e6:	fd 01       	movw	r30, r26
    28e8:	dc 01       	movw	r26, r24
    28ea:	f7 cf       	rjmp	.-18     	; 0x28da <free+0xc2>
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	11 97       	sbiw	r26, 0x01	; 1
    28f2:	9d 01       	movw	r18, r26
    28f4:	2e 5f       	subi	r18, 0xFE	; 254
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	82 0f       	add	r24, r18
    28fa:	93 1f       	adc	r25, r19
    28fc:	20 91 d8 20 	lds	r18, 0x20D8	; 0x8020d8 <__brkval>
    2900:	30 91 d9 20 	lds	r19, 0x20D9	; 0x8020d9 <__brkval+0x1>
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	69 f4       	brne	.+26     	; 0x2924 <free+0x10c>
    290a:	30 97       	sbiw	r30, 0x00	; 0
    290c:	29 f4       	brne	.+10     	; 0x2918 <free+0x100>
    290e:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <__flp>
    2912:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <__flp+0x1>
    2916:	02 c0       	rjmp	.+4      	; 0x291c <free+0x104>
    2918:	12 82       	std	Z+2, r1	; 0x02
    291a:	13 82       	std	Z+3, r1	; 0x03
    291c:	a0 93 d8 20 	sts	0x20D8, r26	; 0x8020d8 <__brkval>
    2920:	b0 93 d9 20 	sts	0x20D9, r27	; 0x8020d9 <__brkval+0x1>
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <strnlen_P>:
    292a:	fc 01       	movw	r30, r24
    292c:	05 90       	lpm	r0, Z+
    292e:	61 50       	subi	r22, 0x01	; 1
    2930:	70 40       	sbci	r23, 0x00	; 0
    2932:	01 10       	cpse	r0, r1
    2934:	d8 f7       	brcc	.-10     	; 0x292c <strnlen_P+0x2>
    2936:	80 95       	com	r24
    2938:	90 95       	com	r25
    293a:	8e 0f       	add	r24, r30
    293c:	9f 1f       	adc	r25, r31
    293e:	08 95       	ret

00002940 <memset>:
    2940:	dc 01       	movw	r26, r24
    2942:	01 c0       	rjmp	.+2      	; 0x2946 <memset+0x6>
    2944:	6d 93       	st	X+, r22
    2946:	41 50       	subi	r20, 0x01	; 1
    2948:	50 40       	sbci	r21, 0x00	; 0
    294a:	e0 f7       	brcc	.-8      	; 0x2944 <memset+0x4>
    294c:	08 95       	ret

0000294e <strnlen>:
    294e:	fc 01       	movw	r30, r24
    2950:	61 50       	subi	r22, 0x01	; 1
    2952:	70 40       	sbci	r23, 0x00	; 0
    2954:	01 90       	ld	r0, Z+
    2956:	01 10       	cpse	r0, r1
    2958:	d8 f7       	brcc	.-10     	; 0x2950 <strnlen+0x2>
    295a:	80 95       	com	r24
    295c:	90 95       	com	r25
    295e:	8e 0f       	add	r24, r30
    2960:	9f 1f       	adc	r25, r31
    2962:	08 95       	ret

00002964 <fputc>:
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	fb 01       	movw	r30, r22
    296e:	23 81       	ldd	r18, Z+3	; 0x03
    2970:	21 fd       	sbrc	r18, 1
    2972:	03 c0       	rjmp	.+6      	; 0x297a <fputc+0x16>
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	9f ef       	ldi	r25, 0xFF	; 255
    2978:	2c c0       	rjmp	.+88     	; 0x29d2 <fputc+0x6e>
    297a:	22 ff       	sbrs	r18, 2
    297c:	16 c0       	rjmp	.+44     	; 0x29aa <fputc+0x46>
    297e:	46 81       	ldd	r20, Z+6	; 0x06
    2980:	57 81       	ldd	r21, Z+7	; 0x07
    2982:	24 81       	ldd	r18, Z+4	; 0x04
    2984:	35 81       	ldd	r19, Z+5	; 0x05
    2986:	42 17       	cp	r20, r18
    2988:	53 07       	cpc	r21, r19
    298a:	44 f4       	brge	.+16     	; 0x299c <fputc+0x38>
    298c:	a0 81       	ld	r26, Z
    298e:	b1 81       	ldd	r27, Z+1	; 0x01
    2990:	9d 01       	movw	r18, r26
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	20 83       	st	Z, r18
    2998:	31 83       	std	Z+1, r19	; 0x01
    299a:	8c 93       	st	X, r24
    299c:	26 81       	ldd	r18, Z+6	; 0x06
    299e:	37 81       	ldd	r19, Z+7	; 0x07
    29a0:	2f 5f       	subi	r18, 0xFF	; 255
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	26 83       	std	Z+6, r18	; 0x06
    29a6:	37 83       	std	Z+7, r19	; 0x07
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <fputc+0x6e>
    29aa:	8b 01       	movw	r16, r22
    29ac:	ec 01       	movw	r28, r24
    29ae:	fb 01       	movw	r30, r22
    29b0:	00 84       	ldd	r0, Z+8	; 0x08
    29b2:	f1 85       	ldd	r31, Z+9	; 0x09
    29b4:	e0 2d       	mov	r30, r0
    29b6:	19 95       	eicall
    29b8:	89 2b       	or	r24, r25
    29ba:	e1 f6       	brne	.-72     	; 0x2974 <fputc+0x10>
    29bc:	d8 01       	movw	r26, r16
    29be:	16 96       	adiw	r26, 0x06	; 6
    29c0:	8d 91       	ld	r24, X+
    29c2:	9c 91       	ld	r25, X
    29c4:	17 97       	sbiw	r26, 0x07	; 7
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	16 96       	adiw	r26, 0x06	; 6
    29ca:	8d 93       	st	X+, r24
    29cc:	9c 93       	st	X, r25
    29ce:	17 97       	sbiw	r26, 0x07	; 7
    29d0:	ce 01       	movw	r24, r28
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	08 95       	ret

000029dc <__ultoa_invert>:
    29dc:	fa 01       	movw	r30, r20
    29de:	aa 27       	eor	r26, r26
    29e0:	28 30       	cpi	r18, 0x08	; 8
    29e2:	51 f1       	breq	.+84     	; 0x2a38 <__ultoa_invert+0x5c>
    29e4:	20 31       	cpi	r18, 0x10	; 16
    29e6:	81 f1       	breq	.+96     	; 0x2a48 <__ultoa_invert+0x6c>
    29e8:	e8 94       	clt
    29ea:	6f 93       	push	r22
    29ec:	6e 7f       	andi	r22, 0xFE	; 254
    29ee:	6e 5f       	subi	r22, 0xFE	; 254
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	8f 4f       	sbci	r24, 0xFF	; 255
    29f4:	9f 4f       	sbci	r25, 0xFF	; 255
    29f6:	af 4f       	sbci	r26, 0xFF	; 255
    29f8:	b1 e0       	ldi	r27, 0x01	; 1
    29fa:	3e d0       	rcall	.+124    	; 0x2a78 <__ultoa_invert+0x9c>
    29fc:	b4 e0       	ldi	r27, 0x04	; 4
    29fe:	3c d0       	rcall	.+120    	; 0x2a78 <__ultoa_invert+0x9c>
    2a00:	67 0f       	add	r22, r23
    2a02:	78 1f       	adc	r23, r24
    2a04:	89 1f       	adc	r24, r25
    2a06:	9a 1f       	adc	r25, r26
    2a08:	a1 1d       	adc	r26, r1
    2a0a:	68 0f       	add	r22, r24
    2a0c:	79 1f       	adc	r23, r25
    2a0e:	8a 1f       	adc	r24, r26
    2a10:	91 1d       	adc	r25, r1
    2a12:	a1 1d       	adc	r26, r1
    2a14:	6a 0f       	add	r22, r26
    2a16:	71 1d       	adc	r23, r1
    2a18:	81 1d       	adc	r24, r1
    2a1a:	91 1d       	adc	r25, r1
    2a1c:	a1 1d       	adc	r26, r1
    2a1e:	20 d0       	rcall	.+64     	; 0x2a60 <__ultoa_invert+0x84>
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <__ultoa_invert+0x48>
    2a22:	68 94       	set
    2a24:	3f 91       	pop	r19
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	26 9f       	mul	r18, r22
    2a2a:	11 24       	eor	r1, r1
    2a2c:	30 19       	sub	r19, r0
    2a2e:	30 5d       	subi	r19, 0xD0	; 208
    2a30:	31 93       	st	Z+, r19
    2a32:	de f6       	brtc	.-74     	; 0x29ea <__ultoa_invert+0xe>
    2a34:	cf 01       	movw	r24, r30
    2a36:	08 95       	ret
    2a38:	46 2f       	mov	r20, r22
    2a3a:	47 70       	andi	r20, 0x07	; 7
    2a3c:	40 5d       	subi	r20, 0xD0	; 208
    2a3e:	41 93       	st	Z+, r20
    2a40:	b3 e0       	ldi	r27, 0x03	; 3
    2a42:	0f d0       	rcall	.+30     	; 0x2a62 <__ultoa_invert+0x86>
    2a44:	c9 f7       	brne	.-14     	; 0x2a38 <__ultoa_invert+0x5c>
    2a46:	f6 cf       	rjmp	.-20     	; 0x2a34 <__ultoa_invert+0x58>
    2a48:	46 2f       	mov	r20, r22
    2a4a:	4f 70       	andi	r20, 0x0F	; 15
    2a4c:	40 5d       	subi	r20, 0xD0	; 208
    2a4e:	4a 33       	cpi	r20, 0x3A	; 58
    2a50:	18 f0       	brcs	.+6      	; 0x2a58 <__ultoa_invert+0x7c>
    2a52:	49 5d       	subi	r20, 0xD9	; 217
    2a54:	31 fd       	sbrc	r19, 1
    2a56:	40 52       	subi	r20, 0x20	; 32
    2a58:	41 93       	st	Z+, r20
    2a5a:	02 d0       	rcall	.+4      	; 0x2a60 <__ultoa_invert+0x84>
    2a5c:	a9 f7       	brne	.-22     	; 0x2a48 <__ultoa_invert+0x6c>
    2a5e:	ea cf       	rjmp	.-44     	; 0x2a34 <__ultoa_invert+0x58>
    2a60:	b4 e0       	ldi	r27, 0x04	; 4
    2a62:	a6 95       	lsr	r26
    2a64:	97 95       	ror	r25
    2a66:	87 95       	ror	r24
    2a68:	77 95       	ror	r23
    2a6a:	67 95       	ror	r22
    2a6c:	ba 95       	dec	r27
    2a6e:	c9 f7       	brne	.-14     	; 0x2a62 <__ultoa_invert+0x86>
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	61 05       	cpc	r22, r1
    2a74:	71 05       	cpc	r23, r1
    2a76:	08 95       	ret
    2a78:	9b 01       	movw	r18, r22
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	0a 2e       	mov	r0, r26
    2a7e:	06 94       	lsr	r0
    2a80:	57 95       	ror	r21
    2a82:	47 95       	ror	r20
    2a84:	37 95       	ror	r19
    2a86:	27 95       	ror	r18
    2a88:	ba 95       	dec	r27
    2a8a:	c9 f7       	brne	.-14     	; 0x2a7e <__ultoa_invert+0xa2>
    2a8c:	62 0f       	add	r22, r18
    2a8e:	73 1f       	adc	r23, r19
    2a90:	84 1f       	adc	r24, r20
    2a92:	95 1f       	adc	r25, r21
    2a94:	a0 1d       	adc	r26, r0
    2a96:	08 95       	ret

00002a98 <_exit>:
    2a98:	f8 94       	cli

00002a9a <__stop_program>:
    2a9a:	ff cf       	rjmp	.-2      	; 0x2a9a <__stop_program>
