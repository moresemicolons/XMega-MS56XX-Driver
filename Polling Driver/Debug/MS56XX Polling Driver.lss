
MS56XX Polling Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00802000  00002eee  00002f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802032  00802032  00002fb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00003050  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c6fb  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e0d  00000000  00000000  0000f963  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a03  00000000  00000000  00013770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00018174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000295ea  00000000  00000000  00018630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002566  00000000  00000000  00041c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00044180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009b54  00000000  00000000  00044360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c1       	rjmp	.+744    	; 0x2ea <__ctors_end>
       2:	00 00       	nop
       4:	93 c1       	rjmp	.+806    	; 0x32c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c1       	rjmp	.+802    	; 0x32c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c1       	rjmp	.+798    	; 0x32c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c1       	rjmp	.+794    	; 0x32c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c1       	rjmp	.+790    	; 0x32c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c1       	rjmp	.+786    	; 0x32c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c1       	rjmp	.+782    	; 0x32c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c1       	rjmp	.+778    	; 0x32c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c1       	rjmp	.+774    	; 0x32c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c1       	rjmp	.+770    	; 0x32c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c1       	rjmp	.+766    	; 0x32c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c1       	rjmp	.+762    	; 0x32c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c1       	rjmp	.+758    	; 0x32c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c1       	rjmp	.+754    	; 0x32c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c1       	rjmp	.+750    	; 0x32c <__bad_interrupt>
      3e:	00 00       	nop
      40:	75 c1       	rjmp	.+746    	; 0x32c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c1       	rjmp	.+742    	; 0x32c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c1       	rjmp	.+738    	; 0x32c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c1       	rjmp	.+734    	; 0x32c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c1       	rjmp	.+730    	; 0x32c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c1       	rjmp	.+726    	; 0x32c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c1       	rjmp	.+722    	; 0x32c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c1       	rjmp	.+718    	; 0x32c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c1       	rjmp	.+714    	; 0x32c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c1       	rjmp	.+710    	; 0x32c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c1       	rjmp	.+706    	; 0x32c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c1       	rjmp	.+702    	; 0x32c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c1       	rjmp	.+698    	; 0x32c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c1       	rjmp	.+694    	; 0x32c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c1       	rjmp	.+690    	; 0x32c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c1       	rjmp	.+686    	; 0x32c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c1       	rjmp	.+682    	; 0x32c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c1       	rjmp	.+678    	; 0x32c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c1       	rjmp	.+674    	; 0x32c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c1       	rjmp	.+670    	; 0x32c <__bad_interrupt>
      8e:	00 00       	nop
      90:	4d c1       	rjmp	.+666    	; 0x32c <__bad_interrupt>
      92:	00 00       	nop
      94:	4b c1       	rjmp	.+662    	; 0x32c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c1       	rjmp	.+658    	; 0x32c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c1       	rjmp	.+654    	; 0x32c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c1       	rjmp	.+650    	; 0x32c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c1       	rjmp	.+646    	; 0x32c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	41 c1       	rjmp	.+642    	; 0x32c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3f c1       	rjmp	.+638    	; 0x32c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c1       	rjmp	.+634    	; 0x32c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c1       	rjmp	.+630    	; 0x32c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c1       	rjmp	.+626    	; 0x32c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c1       	rjmp	.+622    	; 0x32c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c1       	rjmp	.+618    	; 0x32c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c1       	rjmp	.+614    	; 0x32c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c1       	rjmp	.+610    	; 0x32c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2f c1       	rjmp	.+606    	; 0x32c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2d c1       	rjmp	.+602    	; 0x32c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c1       	rjmp	.+598    	; 0x32c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	29 c1       	rjmp	.+594    	; 0x32c <__bad_interrupt>
      da:	00 00       	nop
      dc:	27 c1       	rjmp	.+590    	; 0x32c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c1       	rjmp	.+586    	; 0x32c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	23 c1       	rjmp	.+582    	; 0x32c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	21 c1       	rjmp	.+578    	; 0x32c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	1f c1       	rjmp	.+574    	; 0x32c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	1d c1       	rjmp	.+570    	; 0x32c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1b c1       	rjmp	.+566    	; 0x32c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	19 c1       	rjmp	.+562    	; 0x32c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	17 c1       	rjmp	.+558    	; 0x32c <__bad_interrupt>
      fe:	00 00       	nop
     100:	15 c1       	rjmp	.+554    	; 0x32c <__bad_interrupt>
     102:	00 00       	nop
     104:	13 c1       	rjmp	.+550    	; 0x32c <__bad_interrupt>
     106:	00 00       	nop
     108:	11 c1       	rjmp	.+546    	; 0x32c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	0f c1       	rjmp	.+542    	; 0x32c <__bad_interrupt>
     10e:	00 00       	nop
     110:	0d c1       	rjmp	.+538    	; 0x32c <__bad_interrupt>
     112:	00 00       	nop
     114:	0b c1       	rjmp	.+534    	; 0x32c <__bad_interrupt>
     116:	00 00       	nop
     118:	09 c1       	rjmp	.+530    	; 0x32c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	07 c1       	rjmp	.+526    	; 0x32c <__bad_interrupt>
     11e:	00 00       	nop
     120:	05 c1       	rjmp	.+522    	; 0x32c <__bad_interrupt>
     122:	00 00       	nop
     124:	03 c1       	rjmp	.+518    	; 0x32c <__bad_interrupt>
     126:	00 00       	nop
     128:	01 c1       	rjmp	.+514    	; 0x32c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ff c0       	rjmp	.+510    	; 0x32c <__bad_interrupt>
     12e:	00 00       	nop
     130:	fd c0       	rjmp	.+506    	; 0x32c <__bad_interrupt>
     132:	00 00       	nop
     134:	fb c0       	rjmp	.+502    	; 0x32c <__bad_interrupt>
     136:	00 00       	nop
     138:	f9 c0       	rjmp	.+498    	; 0x32c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	f7 c0       	rjmp	.+494    	; 0x32c <__bad_interrupt>
     13e:	00 00       	nop
     140:	f5 c0       	rjmp	.+490    	; 0x32c <__bad_interrupt>
     142:	00 00       	nop
     144:	f3 c0       	rjmp	.+486    	; 0x32c <__bad_interrupt>
     146:	00 00       	nop
     148:	f1 c0       	rjmp	.+482    	; 0x32c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ef c0       	rjmp	.+478    	; 0x32c <__bad_interrupt>
     14e:	00 00       	nop
     150:	ed c0       	rjmp	.+474    	; 0x32c <__bad_interrupt>
     152:	00 00       	nop
     154:	eb c0       	rjmp	.+470    	; 0x32c <__bad_interrupt>
     156:	00 00       	nop
     158:	e9 c0       	rjmp	.+466    	; 0x32c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	e7 c0       	rjmp	.+462    	; 0x32c <__bad_interrupt>
     15e:	00 00       	nop
     160:	e5 c0       	rjmp	.+458    	; 0x32c <__bad_interrupt>
     162:	00 00       	nop
     164:	e3 c0       	rjmp	.+454    	; 0x32c <__bad_interrupt>
     166:	00 00       	nop
     168:	e1 c0       	rjmp	.+450    	; 0x32c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	df c0       	rjmp	.+446    	; 0x32c <__bad_interrupt>
     16e:	00 00       	nop
     170:	dd c0       	rjmp	.+442    	; 0x32c <__bad_interrupt>
     172:	00 00       	nop
     174:	db c0       	rjmp	.+438    	; 0x32c <__bad_interrupt>
     176:	00 00       	nop
     178:	d9 c0       	rjmp	.+434    	; 0x32c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	d7 c0       	rjmp	.+430    	; 0x32c <__bad_interrupt>
     17e:	00 00       	nop
     180:	d5 c0       	rjmp	.+426    	; 0x32c <__bad_interrupt>
     182:	00 00       	nop
     184:	d3 c0       	rjmp	.+422    	; 0x32c <__bad_interrupt>
     186:	00 00       	nop
     188:	d1 c0       	rjmp	.+418    	; 0x32c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	cf c0       	rjmp	.+414    	; 0x32c <__bad_interrupt>
     18e:	00 00       	nop
     190:	cd c0       	rjmp	.+410    	; 0x32c <__bad_interrupt>
     192:	00 00       	nop
     194:	cb c0       	rjmp	.+406    	; 0x32c <__bad_interrupt>
     196:	00 00       	nop
     198:	c9 c0       	rjmp	.+402    	; 0x32c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	c7 c0       	rjmp	.+398    	; 0x32c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c5 c0       	rjmp	.+394    	; 0x32c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c3 c0       	rjmp	.+390    	; 0x32c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c1 c0       	rjmp	.+386    	; 0x32c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	bf c0       	rjmp	.+382    	; 0x32c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	bd c0       	rjmp	.+378    	; 0x32c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bb c0       	rjmp	.+374    	; 0x32c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	b9 c0       	rjmp	.+370    	; 0x32c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	b7 c0       	rjmp	.+366    	; 0x32c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b5 c0       	rjmp	.+362    	; 0x32c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b3 c0       	rjmp	.+358    	; 0x32c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b1 c0       	rjmp	.+354    	; 0x32c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	af c0       	rjmp	.+350    	; 0x32c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	ad c0       	rjmp	.+346    	; 0x32c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ab c0       	rjmp	.+342    	; 0x32c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	a9 c0       	rjmp	.+338    	; 0x32c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	a7 c0       	rjmp	.+334    	; 0x32c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a5 c0       	rjmp	.+330    	; 0x32c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a3 c0       	rjmp	.+326    	; 0x32c <__bad_interrupt>
	...

000001e8 <__trampolines_end>:
     1e8:	6e 61       	ori	r22, 0x1E	; 30
     1ea:	6e 00       	.word	0x006e	; ????

000001ec <__c.2240>:
     1ec:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1fc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     20c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     21c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     22c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     23c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     24c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     25c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     26c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     27c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     28c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     29c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ac:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2bc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2cc:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2dc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df e5       	ldi	r29, 0x5F	; 95
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	10 e2       	ldi	r17, 0x20	; 32
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b0 e2       	ldi	r27, 0x20	; 32
     300:	ee ee       	ldi	r30, 0xEE	; 238
     302:	fe e2       	ldi	r31, 0x2E	; 46
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a2 33       	cpi	r26, 0x32	; 50
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	20 e2       	ldi	r18, 0x20	; 32
     316:	a2 e3       	ldi	r26, 0x32	; 50
     318:	b0 e2       	ldi	r27, 0x20	; 32
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	a2 34       	cpi	r26, 0x42	; 66
     320:	b2 07       	cpc	r27, r18
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>
     324:	0e 94 65 0d 	call	0x1aca	; 0x1aca <main>
     328:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <_exit>

0000032c <__bad_interrupt>:
     32c:	69 ce       	rjmp	.-814    	; 0x0 <__vectors>

0000032e <sysclk_init>:
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     334:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     338:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     33c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     340:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     344:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     348:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     34c:	9f b7       	in	r25, 0x3f	; 63
     34e:	f8 94       	cli
     350:	e0 e5       	ldi	r30, 0x50	; 80
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	82 60       	ori	r24, 0x02	; 2
     358:	80 83       	st	Z, r24
     35a:	9f bf       	out	0x3f, r25	; 63
     35c:	81 81       	ldd	r24, Z+1	; 0x01
     35e:	81 ff       	sbrs	r24, 1
     360:	fd cf       	rjmp	.-6      	; 0x35c <sysclk_init+0x2e>
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e4       	ldi	r24, 0x40	; 64
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	68 d0       	rcall	.+208    	; 0x43a <ccp_write_io>
     36a:	9f b7       	in	r25, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	e0 e5       	ldi	r30, 0x50	; 80
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8e 7f       	andi	r24, 0xFE	; 254
     376:	80 83       	st	Z, r24
     378:	9f bf       	out	0x3f, r25	; 63
     37a:	08 95       	ret

0000037c <sysclk_enable_module>:
     37c:	9f b7       	in	r25, 0x3f	; 63
     37e:	f8 94       	cli
     380:	e8 2f       	mov	r30, r24
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	e0 59       	subi	r30, 0x90	; 144
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	60 95       	com	r22
     38a:	80 81       	ld	r24, Z
     38c:	68 23       	and	r22, r24
     38e:	60 83       	st	Z, r22
     390:	9f bf       	out	0x3f, r25	; 63
     392:	08 95       	ret

00000394 <ioport_configure_port_pin>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	fc 01       	movw	r30, r24
     39a:	70 96       	adiw	r30, 0x10	; 16
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	c6 2f       	mov	r28, r22
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	de 01       	movw	r26, r28
     3a6:	02 2e       	mov	r0, r18
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <ioport_configure_port_pin+0x1a>
     3aa:	b5 95       	asr	r27
     3ac:	a7 95       	ror	r26
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <ioport_configure_port_pin+0x16>
     3b2:	a0 fd       	sbrc	r26, 0
     3b4:	50 83       	st	Z, r21
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	31 96       	adiw	r30, 0x01	; 1
     3bc:	28 30       	cpi	r18, 0x08	; 8
     3be:	31 05       	cpc	r19, r1
     3c0:	89 f7       	brne	.-30     	; 0x3a4 <ioport_configure_port_pin+0x10>
     3c2:	40 ff       	sbrs	r20, 0
     3c4:	0a c0       	rjmp	.+20     	; 0x3da <ioport_configure_port_pin+0x46>
     3c6:	41 ff       	sbrs	r20, 1
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <ioport_configure_port_pin+0x3c>
     3ca:	fc 01       	movw	r30, r24
     3cc:	65 83       	std	Z+5, r22	; 0x05
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <ioport_configure_port_pin+0x40>
     3d0:	fc 01       	movw	r30, r24
     3d2:	66 83       	std	Z+6, r22	; 0x06
     3d4:	fc 01       	movw	r30, r24
     3d6:	61 83       	std	Z+1, r22	; 0x01
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <ioport_configure_port_pin+0x4a>
     3da:	fc 01       	movw	r30, r24
     3dc:	62 83       	std	Z+2, r22	; 0x02
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <_read>:
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	1f 92       	push	r1
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <stdio_base>
     3f2:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <stdio_base+0x1>
     3f6:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <__data_end>
     3fa:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <__data_end+0x1>
     3fe:	be 01       	movw	r22, r28
     400:	6f 5f       	subi	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	19 95       	eicall
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	08 2e       	mov	r0, r24
     40a:	00 0c       	add	r0, r0
     40c:	99 0b       	sbc	r25, r25
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <_write>:
     416:	68 2f       	mov	r22, r24
     418:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <stdio_base>
     41c:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <stdio_base+0x1>
     420:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <ptr_put>
     424:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <ptr_put+0x1>
     428:	19 95       	eicall
     42a:	99 23       	and	r25, r25
     42c:	1c f0       	brlt	.+6      	; 0x434 <_write+0x1e>
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	08 95       	ret
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	08 95       	ret

0000043a <ccp_write_io>:
     43a:	1b be       	out	0x3b, r1	; 59
     43c:	fc 01       	movw	r30, r24
     43e:	28 ed       	ldi	r18, 0xD8	; 216
     440:	24 bf       	out	0x34, r18	; 52
     442:	60 83       	st	Z, r22
     444:	08 95       	ret

00000446 <usart_putchar>:
     446:	fc 01       	movw	r30, r24
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	95 ff       	sbrs	r25, 5
     44c:	fd cf       	rjmp	.-6      	; 0x448 <usart_putchar+0x2>
     44e:	60 83       	st	Z, r22
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret

00000456 <usart_getchar>:
     456:	fc 01       	movw	r30, r24
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	99 23       	and	r25, r25
     45c:	ec f7       	brge	.-6      	; 0x458 <usart_getchar+0x2>
     45e:	80 81       	ld	r24, Z
     460:	08 95       	ret

00000462 <usart_set_baudrate>:
     462:	2f 92       	push	r2
     464:	3f 92       	push	r3
     466:	4f 92       	push	r4
     468:	5f 92       	push	r5
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	1c 01       	movw	r2, r24
     486:	2a 01       	movw	r4, r20
     488:	3b 01       	movw	r6, r22
     48a:	48 01       	movw	r8, r16
     48c:	59 01       	movw	r10, r18
     48e:	d9 01       	movw	r26, r18
     490:	c8 01       	movw	r24, r16
     492:	68 94       	set
     494:	12 f8       	bld	r1, 2
     496:	b6 95       	lsr	r27
     498:	a7 95       	ror	r26
     49a:	97 95       	ror	r25
     49c:	87 95       	ror	r24
     49e:	16 94       	lsr	r1
     4a0:	d1 f7       	brne	.-12     	; 0x496 <usart_set_baudrate+0x34>
     4a2:	b9 01       	movw	r22, r18
     4a4:	a8 01       	movw	r20, r16
     4a6:	03 2e       	mov	r0, r19
     4a8:	36 e1       	ldi	r19, 0x16	; 22
     4aa:	76 95       	lsr	r23
     4ac:	67 95       	ror	r22
     4ae:	57 95       	ror	r21
     4b0:	47 95       	ror	r20
     4b2:	3a 95       	dec	r19
     4b4:	d1 f7       	brne	.-12     	; 0x4aa <usart_set_baudrate+0x48>
     4b6:	30 2d       	mov	r19, r0
     4b8:	f1 01       	movw	r30, r2
     4ba:	24 81       	ldd	r18, Z+4	; 0x04
     4bc:	22 fd       	sbrc	r18, 2
     4be:	08 c0       	rjmp	.+16     	; 0x4d0 <usart_set_baudrate+0x6e>
     4c0:	b6 95       	lsr	r27
     4c2:	a7 95       	ror	r26
     4c4:	97 95       	ror	r25
     4c6:	87 95       	ror	r24
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	57 95       	ror	r21
     4ce:	47 95       	ror	r20
     4d0:	84 15       	cp	r24, r4
     4d2:	95 05       	cpc	r25, r5
     4d4:	a6 05       	cpc	r26, r6
     4d6:	b7 05       	cpc	r27, r7
     4d8:	08 f4       	brcc	.+2      	; 0x4dc <usart_set_baudrate+0x7a>
     4da:	ae c0       	rjmp	.+348    	; 0x638 <usart_set_baudrate+0x1d6>
     4dc:	44 16       	cp	r4, r20
     4de:	55 06       	cpc	r5, r21
     4e0:	66 06       	cpc	r6, r22
     4e2:	77 06       	cpc	r7, r23
     4e4:	08 f4       	brcc	.+2      	; 0x4e8 <usart_set_baudrate+0x86>
     4e6:	aa c0       	rjmp	.+340    	; 0x63c <usart_set_baudrate+0x1da>
     4e8:	f1 01       	movw	r30, r2
     4ea:	84 81       	ldd	r24, Z+4	; 0x04
     4ec:	82 fd       	sbrc	r24, 2
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <usart_set_baudrate+0x96>
     4f0:	44 0c       	add	r4, r4
     4f2:	55 1c       	adc	r5, r5
     4f4:	66 1c       	adc	r6, r6
     4f6:	77 1c       	adc	r7, r7
     4f8:	c5 01       	movw	r24, r10
     4fa:	b4 01       	movw	r22, r8
     4fc:	a3 01       	movw	r20, r6
     4fe:	92 01       	movw	r18, r4
     500:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
     504:	2f 3f       	cpi	r18, 0xFF	; 255
     506:	31 05       	cpc	r19, r1
     508:	41 05       	cpc	r20, r1
     50a:	51 05       	cpc	r21, r1
     50c:	08 f4       	brcc	.+2      	; 0x510 <usart_set_baudrate+0xae>
     50e:	98 c0       	rjmp	.+304    	; 0x640 <usart_set_baudrate+0x1de>
     510:	c1 2c       	mov	r12, r1
     512:	d1 2c       	mov	r13, r1
     514:	76 01       	movw	r14, r12
     516:	ca 94       	dec	r12
     518:	c9 ef       	ldi	r28, 0xF9	; 249
     51a:	05 c0       	rjmp	.+10     	; 0x526 <usart_set_baudrate+0xc4>
     51c:	2c 15       	cp	r18, r12
     51e:	3d 05       	cpc	r19, r13
     520:	4e 05       	cpc	r20, r14
     522:	5f 05       	cpc	r21, r15
     524:	68 f0       	brcs	.+26     	; 0x540 <usart_set_baudrate+0xde>
     526:	cc 0c       	add	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	ee 1c       	adc	r14, r14
     52c:	ff 1c       	adc	r15, r15
     52e:	cd 3f       	cpi	r28, 0xFD	; 253
     530:	14 f4       	brge	.+4      	; 0x536 <usart_set_baudrate+0xd4>
     532:	68 94       	set
     534:	c0 f8       	bld	r12, 0
     536:	cf 5f       	subi	r28, 0xFF	; 255
     538:	c7 30       	cpi	r28, 0x07	; 7
     53a:	81 f7       	brne	.-32     	; 0x51c <usart_set_baudrate+0xba>
     53c:	8c 2f       	mov	r24, r28
     53e:	56 c0       	rjmp	.+172    	; 0x5ec <usart_set_baudrate+0x18a>
     540:	8c 2f       	mov	r24, r28
     542:	cc 23       	and	r28, r28
     544:	0c f0       	brlt	.+2      	; 0x548 <usart_set_baudrate+0xe6>
     546:	52 c0       	rjmp	.+164    	; 0x5ec <usart_set_baudrate+0x18a>
     548:	d3 01       	movw	r26, r6
     54a:	c2 01       	movw	r24, r4
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	aa 1f       	adc	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	aa 1f       	adc	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	aa 1f       	adc	r26, r26
     562:	bb 1f       	adc	r27, r27
     564:	85 01       	movw	r16, r10
     566:	74 01       	movw	r14, r8
     568:	e8 1a       	sub	r14, r24
     56a:	f9 0a       	sbc	r15, r25
     56c:	0a 0b       	sbc	r16, r26
     56e:	1b 0b       	sbc	r17, r27
     570:	d8 01       	movw	r26, r16
     572:	c7 01       	movw	r24, r14
     574:	ce 3f       	cpi	r28, 0xFE	; 254
     576:	f4 f4       	brge	.+60     	; 0x5b4 <usart_set_baudrate+0x152>
     578:	2d ef       	ldi	r18, 0xFD	; 253
     57a:	3f ef       	ldi	r19, 0xFF	; 255
     57c:	2c 1b       	sub	r18, r28
     57e:	31 09       	sbc	r19, r1
     580:	c7 fd       	sbrc	r28, 7
     582:	33 95       	inc	r19
     584:	04 c0       	rjmp	.+8      	; 0x58e <usart_set_baudrate+0x12c>
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	aa 1f       	adc	r26, r26
     58c:	bb 1f       	adc	r27, r27
     58e:	2a 95       	dec	r18
     590:	d2 f7       	brpl	.-12     	; 0x586 <usart_set_baudrate+0x124>
     592:	73 01       	movw	r14, r6
     594:	62 01       	movw	r12, r4
     596:	f6 94       	lsr	r15
     598:	e7 94       	ror	r14
     59a:	d7 94       	ror	r13
     59c:	c7 94       	ror	r12
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	6c 0d       	add	r22, r12
     5a4:	7d 1d       	adc	r23, r13
     5a6:	8e 1d       	adc	r24, r14
     5a8:	9f 1d       	adc	r25, r15
     5aa:	a3 01       	movw	r20, r6
     5ac:	92 01       	movw	r18, r4
     5ae:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
     5b2:	38 c0       	rjmp	.+112    	; 0x624 <usart_set_baudrate+0x1c2>
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	2c 0f       	add	r18, r28
     5b8:	83 01       	movw	r16, r6
     5ba:	72 01       	movw	r14, r4
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <usart_set_baudrate+0x164>
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	2a 95       	dec	r18
     5c8:	d2 f7       	brpl	.-12     	; 0x5be <usart_set_baudrate+0x15c>
     5ca:	a8 01       	movw	r20, r16
     5cc:	97 01       	movw	r18, r14
     5ce:	67 01       	movw	r12, r14
     5d0:	78 01       	movw	r14, r16
     5d2:	f6 94       	lsr	r15
     5d4:	e7 94       	ror	r14
     5d6:	d7 94       	ror	r13
     5d8:	c7 94       	ror	r12
     5da:	bc 01       	movw	r22, r24
     5dc:	cd 01       	movw	r24, r26
     5de:	6c 0d       	add	r22, r12
     5e0:	7d 1d       	adc	r23, r13
     5e2:	8e 1d       	adc	r24, r14
     5e4:	9f 1d       	adc	r25, r15
     5e6:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
     5ea:	1c c0       	rjmp	.+56     	; 0x624 <usart_set_baudrate+0x1c2>
     5ec:	8d 5f       	subi	r24, 0xFD	; 253
     5ee:	a3 01       	movw	r20, r6
     5f0:	92 01       	movw	r18, r4
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <usart_set_baudrate+0x19a>
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	44 1f       	adc	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	8a 95       	dec	r24
     5fe:	d2 f7       	brpl	.-12     	; 0x5f4 <usart_set_baudrate+0x192>
     600:	da 01       	movw	r26, r20
     602:	c9 01       	movw	r24, r18
     604:	b6 95       	lsr	r27
     606:	a7 95       	ror	r26
     608:	97 95       	ror	r25
     60a:	87 95       	ror	r24
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	68 0d       	add	r22, r8
     612:	79 1d       	adc	r23, r9
     614:	8a 1d       	adc	r24, r10
     616:	9b 1d       	adc	r25, r11
     618:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	31 09       	sbc	r19, r1
     620:	41 09       	sbc	r20, r1
     622:	51 09       	sbc	r21, r1
     624:	83 2f       	mov	r24, r19
     626:	8f 70       	andi	r24, 0x0F	; 15
     628:	c2 95       	swap	r28
     62a:	c0 7f       	andi	r28, 0xF0	; 240
     62c:	c8 2b       	or	r28, r24
     62e:	f1 01       	movw	r30, r2
     630:	c7 83       	std	Z+7, r28	; 0x07
     632:	26 83       	std	Z+6, r18	; 0x06
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	1c c0       	rjmp	.+56     	; 0x670 <usart_set_baudrate+0x20e>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	1a c0       	rjmp	.+52     	; 0x670 <usart_set_baudrate+0x20e>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	18 c0       	rjmp	.+48     	; 0x670 <usart_set_baudrate+0x20e>
     640:	d3 01       	movw	r26, r6
     642:	c2 01       	movw	r24, r4
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	aa 1f       	adc	r26, r26
     64a:	bb 1f       	adc	r27, r27
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	aa 1f       	adc	r26, r26
     652:	bb 1f       	adc	r27, r27
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	aa 1f       	adc	r26, r26
     65a:	bb 1f       	adc	r27, r27
     65c:	85 01       	movw	r16, r10
     65e:	74 01       	movw	r14, r8
     660:	e8 1a       	sub	r14, r24
     662:	f9 0a       	sbc	r15, r25
     664:	0a 0b       	sbc	r16, r26
     666:	1b 0b       	sbc	r17, r27
     668:	d8 01       	movw	r26, r16
     66a:	c7 01       	movw	r24, r14
     66c:	c9 ef       	ldi	r28, 0xF9	; 249
     66e:	84 cf       	rjmp	.-248    	; 0x578 <usart_set_baudrate+0x116>
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	5f 90       	pop	r5
     68c:	4f 90       	pop	r4
     68e:	3f 90       	pop	r3
     690:	2f 90       	pop	r2
     692:	08 95       	ret

00000694 <usart_init_rs232>:
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	8b 01       	movw	r16, r22
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <usart_init_rs232+0x12>
     6a4:	0e c1       	rjmp	.+540    	; 0x8c2 <usart_init_rs232+0x22e>
     6a6:	80 3c       	cpi	r24, 0xC0	; 192
     6a8:	91 05       	cpc	r25, r1
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <usart_init_rs232+0x20>
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	65 de       	rcall	.-822    	; 0x37c <sysclk_enable_module>
     6b2:	07 c1       	rjmp	.+526    	; 0x8c2 <usart_init_rs232+0x22e>
     6b4:	c1 15       	cp	r28, r1
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	d8 07       	cpc	r29, r24
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <usart_init_rs232+0x30>
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	5d de       	rcall	.-838    	; 0x37c <sysclk_enable_module>
     6c2:	ff c0       	rjmp	.+510    	; 0x8c2 <usart_init_rs232+0x22e>
     6c4:	c0 38       	cpi	r28, 0x80	; 128
     6c6:	e1 e0       	ldi	r30, 0x01	; 1
     6c8:	de 07       	cpc	r29, r30
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <usart_init_rs232+0x40>
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	55 de       	rcall	.-854    	; 0x37c <sysclk_enable_module>
     6d2:	f7 c0       	rjmp	.+494    	; 0x8c2 <usart_init_rs232+0x22e>
     6d4:	c1 15       	cp	r28, r1
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	df 07       	cpc	r29, r31
     6da:	21 f4       	brne	.+8      	; 0x6e4 <usart_init_rs232+0x50>
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	4d de       	rcall	.-870    	; 0x37c <sysclk_enable_module>
     6e2:	ef c0       	rjmp	.+478    	; 0x8c2 <usart_init_rs232+0x22e>
     6e4:	c0 38       	cpi	r28, 0x80	; 128
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	d8 07       	cpc	r29, r24
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <usart_init_rs232+0x60>
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	45 de       	rcall	.-886    	; 0x37c <sysclk_enable_module>
     6f2:	e7 c0       	rjmp	.+462    	; 0x8c2 <usart_init_rs232+0x22e>
     6f4:	c0 39       	cpi	r28, 0x90	; 144
     6f6:	e3 e0       	ldi	r30, 0x03	; 3
     6f8:	de 07       	cpc	r29, r30
     6fa:	21 f4       	brne	.+8      	; 0x704 <usart_init_rs232+0x70>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	3d de       	rcall	.-902    	; 0x37c <sysclk_enable_module>
     702:	df c0       	rjmp	.+446    	; 0x8c2 <usart_init_rs232+0x22e>
     704:	c1 15       	cp	r28, r1
     706:	f2 e0       	ldi	r31, 0x02	; 2
     708:	df 07       	cpc	r29, r31
     70a:	21 f4       	brne	.+8      	; 0x714 <usart_init_rs232+0x80>
     70c:	62 e0       	ldi	r22, 0x02	; 2
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	35 de       	rcall	.-918    	; 0x37c <sysclk_enable_module>
     712:	d7 c0       	rjmp	.+430    	; 0x8c2 <usart_init_rs232+0x22e>
     714:	c0 34       	cpi	r28, 0x40	; 64
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	d8 07       	cpc	r29, r24
     71a:	21 f4       	brne	.+8      	; 0x724 <usart_init_rs232+0x90>
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	2d de       	rcall	.-934    	; 0x37c <sysclk_enable_module>
     722:	cf c0       	rjmp	.+414    	; 0x8c2 <usart_init_rs232+0x22e>
     724:	c0 32       	cpi	r28, 0x20	; 32
     726:	e3 e0       	ldi	r30, 0x03	; 3
     728:	de 07       	cpc	r29, r30
     72a:	21 f4       	brne	.+8      	; 0x734 <usart_init_rs232+0xa0>
     72c:	64 e0       	ldi	r22, 0x04	; 4
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	25 de       	rcall	.-950    	; 0x37c <sysclk_enable_module>
     732:	c7 c0       	rjmp	.+398    	; 0x8c2 <usart_init_rs232+0x22e>
     734:	c1 15       	cp	r28, r1
     736:	f8 e0       	ldi	r31, 0x08	; 8
     738:	df 07       	cpc	r29, r31
     73a:	21 f4       	brne	.+8      	; 0x744 <usart_init_rs232+0xb0>
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	1d de       	rcall	.-966    	; 0x37c <sysclk_enable_module>
     742:	bf c0       	rjmp	.+382    	; 0x8c2 <usart_init_rs232+0x22e>
     744:	c1 15       	cp	r28, r1
     746:	89 e0       	ldi	r24, 0x09	; 9
     748:	d8 07       	cpc	r29, r24
     74a:	21 f4       	brne	.+8      	; 0x754 <usart_init_rs232+0xc0>
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	15 de       	rcall	.-982    	; 0x37c <sysclk_enable_module>
     752:	b7 c0       	rjmp	.+366    	; 0x8c2 <usart_init_rs232+0x22e>
     754:	c1 15       	cp	r28, r1
     756:	ea e0       	ldi	r30, 0x0A	; 10
     758:	de 07       	cpc	r29, r30
     75a:	21 f4       	brne	.+8      	; 0x764 <usart_init_rs232+0xd0>
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	85 e0       	ldi	r24, 0x05	; 5
     760:	0d de       	rcall	.-998    	; 0x37c <sysclk_enable_module>
     762:	af c0       	rjmp	.+350    	; 0x8c2 <usart_init_rs232+0x22e>
     764:	c1 15       	cp	r28, r1
     766:	fb e0       	ldi	r31, 0x0B	; 11
     768:	df 07       	cpc	r29, r31
     76a:	21 f4       	brne	.+8      	; 0x774 <usart_init_rs232+0xe0>
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	86 e0       	ldi	r24, 0x06	; 6
     770:	05 de       	rcall	.-1014   	; 0x37c <sysclk_enable_module>
     772:	a7 c0       	rjmp	.+334    	; 0x8c2 <usart_init_rs232+0x22e>
     774:	c0 34       	cpi	r28, 0x40	; 64
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	d8 07       	cpc	r29, r24
     77a:	21 f4       	brne	.+8      	; 0x784 <usart_init_rs232+0xf0>
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	fd dd       	rcall	.-1030   	; 0x37c <sysclk_enable_module>
     782:	9f c0       	rjmp	.+318    	; 0x8c2 <usart_init_rs232+0x22e>
     784:	c0 34       	cpi	r28, 0x40	; 64
     786:	e9 e0       	ldi	r30, 0x09	; 9
     788:	de 07       	cpc	r29, r30
     78a:	21 f4       	brne	.+8      	; 0x794 <usart_init_rs232+0x100>
     78c:	62 e0       	ldi	r22, 0x02	; 2
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	f5 dd       	rcall	.-1046   	; 0x37c <sysclk_enable_module>
     792:	97 c0       	rjmp	.+302    	; 0x8c2 <usart_init_rs232+0x22e>
     794:	c0 34       	cpi	r28, 0x40	; 64
     796:	fa e0       	ldi	r31, 0x0A	; 10
     798:	df 07       	cpc	r29, r31
     79a:	21 f4       	brne	.+8      	; 0x7a4 <usart_init_rs232+0x110>
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	85 e0       	ldi	r24, 0x05	; 5
     7a0:	ed dd       	rcall	.-1062   	; 0x37c <sysclk_enable_module>
     7a2:	8f c0       	rjmp	.+286    	; 0x8c2 <usart_init_rs232+0x22e>
     7a4:	c0 39       	cpi	r28, 0x90	; 144
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	d8 07       	cpc	r29, r24
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <usart_init_rs232+0x120>
     7ac:	64 e0       	ldi	r22, 0x04	; 4
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	e5 dd       	rcall	.-1078   	; 0x37c <sysclk_enable_module>
     7b2:	87 c0       	rjmp	.+270    	; 0x8c2 <usart_init_rs232+0x22e>
     7b4:	c0 39       	cpi	r28, 0x90	; 144
     7b6:	e9 e0       	ldi	r30, 0x09	; 9
     7b8:	de 07       	cpc	r29, r30
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <usart_init_rs232+0x130>
     7bc:	64 e0       	ldi	r22, 0x04	; 4
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	dd dd       	rcall	.-1094   	; 0x37c <sysclk_enable_module>
     7c2:	7f c0       	rjmp	.+254    	; 0x8c2 <usart_init_rs232+0x22e>
     7c4:	c0 39       	cpi	r28, 0x90	; 144
     7c6:	fa e0       	ldi	r31, 0x0A	; 10
     7c8:	df 07       	cpc	r29, r31
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <usart_init_rs232+0x140>
     7cc:	64 e0       	ldi	r22, 0x04	; 4
     7ce:	85 e0       	ldi	r24, 0x05	; 5
     7d0:	d5 dd       	rcall	.-1110   	; 0x37c <sysclk_enable_module>
     7d2:	77 c0       	rjmp	.+238    	; 0x8c2 <usart_init_rs232+0x22e>
     7d4:	c0 39       	cpi	r28, 0x90	; 144
     7d6:	8b e0       	ldi	r24, 0x0B	; 11
     7d8:	d8 07       	cpc	r29, r24
     7da:	21 f4       	brne	.+8      	; 0x7e4 <usart_init_rs232+0x150>
     7dc:	64 e0       	ldi	r22, 0x04	; 4
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	cd dd       	rcall	.-1126   	; 0x37c <sysclk_enable_module>
     7e2:	6f c0       	rjmp	.+222    	; 0x8c2 <usart_init_rs232+0x22e>
     7e4:	c0 3c       	cpi	r28, 0xC0	; 192
     7e6:	e8 e0       	ldi	r30, 0x08	; 8
     7e8:	de 07       	cpc	r29, r30
     7ea:	21 f4       	brne	.+8      	; 0x7f4 <usart_init_rs232+0x160>
     7ec:	68 e0       	ldi	r22, 0x08	; 8
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	c5 dd       	rcall	.-1142   	; 0x37c <sysclk_enable_module>
     7f2:	67 c0       	rjmp	.+206    	; 0x8c2 <usart_init_rs232+0x22e>
     7f4:	c0 3c       	cpi	r28, 0xC0	; 192
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	df 07       	cpc	r29, r31
     7fa:	21 f4       	brne	.+8      	; 0x804 <usart_init_rs232+0x170>
     7fc:	68 e0       	ldi	r22, 0x08	; 8
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	bd dd       	rcall	.-1158   	; 0x37c <sysclk_enable_module>
     802:	5f c0       	rjmp	.+190    	; 0x8c2 <usart_init_rs232+0x22e>
     804:	c0 3c       	cpi	r28, 0xC0	; 192
     806:	8a e0       	ldi	r24, 0x0A	; 10
     808:	d8 07       	cpc	r29, r24
     80a:	21 f4       	brne	.+8      	; 0x814 <usart_init_rs232+0x180>
     80c:	68 e0       	ldi	r22, 0x08	; 8
     80e:	85 e0       	ldi	r24, 0x05	; 5
     810:	b5 dd       	rcall	.-1174   	; 0x37c <sysclk_enable_module>
     812:	57 c0       	rjmp	.+174    	; 0x8c2 <usart_init_rs232+0x22e>
     814:	c0 3c       	cpi	r28, 0xC0	; 192
     816:	eb e0       	ldi	r30, 0x0B	; 11
     818:	de 07       	cpc	r29, r30
     81a:	21 f4       	brne	.+8      	; 0x824 <usart_init_rs232+0x190>
     81c:	68 e0       	ldi	r22, 0x08	; 8
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	ad dd       	rcall	.-1190   	; 0x37c <sysclk_enable_module>
     822:	4f c0       	rjmp	.+158    	; 0x8c2 <usart_init_rs232+0x22e>
     824:	c0 3a       	cpi	r28, 0xA0	; 160
     826:	f8 e0       	ldi	r31, 0x08	; 8
     828:	df 07       	cpc	r29, r31
     82a:	21 f4       	brne	.+8      	; 0x834 <usart_init_rs232+0x1a0>
     82c:	60 e1       	ldi	r22, 0x10	; 16
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	a5 dd       	rcall	.-1206   	; 0x37c <sysclk_enable_module>
     832:	47 c0       	rjmp	.+142    	; 0x8c2 <usart_init_rs232+0x22e>
     834:	c0 3a       	cpi	r28, 0xA0	; 160
     836:	89 e0       	ldi	r24, 0x09	; 9
     838:	d8 07       	cpc	r29, r24
     83a:	21 f4       	brne	.+8      	; 0x844 <usart_init_rs232+0x1b0>
     83c:	60 e1       	ldi	r22, 0x10	; 16
     83e:	84 e0       	ldi	r24, 0x04	; 4
     840:	9d dd       	rcall	.-1222   	; 0x37c <sysclk_enable_module>
     842:	3f c0       	rjmp	.+126    	; 0x8c2 <usart_init_rs232+0x22e>
     844:	c0 3a       	cpi	r28, 0xA0	; 160
     846:	ea e0       	ldi	r30, 0x0A	; 10
     848:	de 07       	cpc	r29, r30
     84a:	21 f4       	brne	.+8      	; 0x854 <usart_init_rs232+0x1c0>
     84c:	60 e1       	ldi	r22, 0x10	; 16
     84e:	85 e0       	ldi	r24, 0x05	; 5
     850:	95 dd       	rcall	.-1238   	; 0x37c <sysclk_enable_module>
     852:	37 c0       	rjmp	.+110    	; 0x8c2 <usart_init_rs232+0x22e>
     854:	c0 3a       	cpi	r28, 0xA0	; 160
     856:	fb e0       	ldi	r31, 0x0B	; 11
     858:	df 07       	cpc	r29, r31
     85a:	21 f4       	brne	.+8      	; 0x864 <usart_init_rs232+0x1d0>
     85c:	60 e1       	ldi	r22, 0x10	; 16
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	8d dd       	rcall	.-1254   	; 0x37c <sysclk_enable_module>
     862:	2f c0       	rjmp	.+94     	; 0x8c2 <usart_init_rs232+0x22e>
     864:	c0 3b       	cpi	r28, 0xB0	; 176
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	d8 07       	cpc	r29, r24
     86a:	21 f4       	brne	.+8      	; 0x874 <usart_init_rs232+0x1e0>
     86c:	60 e2       	ldi	r22, 0x20	; 32
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	85 dd       	rcall	.-1270   	; 0x37c <sysclk_enable_module>
     872:	27 c0       	rjmp	.+78     	; 0x8c2 <usart_init_rs232+0x22e>
     874:	c0 3b       	cpi	r28, 0xB0	; 176
     876:	e9 e0       	ldi	r30, 0x09	; 9
     878:	de 07       	cpc	r29, r30
     87a:	21 f4       	brne	.+8      	; 0x884 <usart_init_rs232+0x1f0>
     87c:	60 e2       	ldi	r22, 0x20	; 32
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	7d dd       	rcall	.-1286   	; 0x37c <sysclk_enable_module>
     882:	1f c0       	rjmp	.+62     	; 0x8c2 <usart_init_rs232+0x22e>
     884:	c0 3b       	cpi	r28, 0xB0	; 176
     886:	fa e0       	ldi	r31, 0x0A	; 10
     888:	df 07       	cpc	r29, r31
     88a:	21 f4       	brne	.+8      	; 0x894 <usart_init_rs232+0x200>
     88c:	60 e2       	ldi	r22, 0x20	; 32
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	75 dd       	rcall	.-1302   	; 0x37c <sysclk_enable_module>
     892:	17 c0       	rjmp	.+46     	; 0x8c2 <usart_init_rs232+0x22e>
     894:	c0 3b       	cpi	r28, 0xB0	; 176
     896:	8b e0       	ldi	r24, 0x0B	; 11
     898:	d8 07       	cpc	r29, r24
     89a:	21 f4       	brne	.+8      	; 0x8a4 <usart_init_rs232+0x210>
     89c:	60 e2       	ldi	r22, 0x20	; 32
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	6d dd       	rcall	.-1318   	; 0x37c <sysclk_enable_module>
     8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <usart_init_rs232+0x22e>
     8a4:	c0 38       	cpi	r28, 0x80	; 128
     8a6:	e4 e0       	ldi	r30, 0x04	; 4
     8a8:	de 07       	cpc	r29, r30
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <usart_init_rs232+0x220>
     8ac:	60 e4       	ldi	r22, 0x40	; 64
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	65 dd       	rcall	.-1334   	; 0x37c <sysclk_enable_module>
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <usart_init_rs232+0x22e>
     8b4:	c0 3a       	cpi	r28, 0xA0	; 160
     8b6:	f4 e0       	ldi	r31, 0x04	; 4
     8b8:	df 07       	cpc	r29, r31
     8ba:	19 f4       	brne	.+6      	; 0x8c2 <usart_init_rs232+0x22e>
     8bc:	60 e4       	ldi	r22, 0x40	; 64
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	5d dd       	rcall	.-1350   	; 0x37c <sysclk_enable_module>
     8c2:	8d 81       	ldd	r24, Y+5	; 0x05
     8c4:	8f 73       	andi	r24, 0x3F	; 63
     8c6:	8d 83       	std	Y+5, r24	; 0x05
     8c8:	f8 01       	movw	r30, r16
     8ca:	94 81       	ldd	r25, Z+4	; 0x04
     8cc:	85 81       	ldd	r24, Z+5	; 0x05
     8ce:	89 2b       	or	r24, r25
     8d0:	96 81       	ldd	r25, Z+6	; 0x06
     8d2:	91 11       	cpse	r25, r1
     8d4:	98 e0       	ldi	r25, 0x08	; 8
     8d6:	89 2b       	or	r24, r25
     8d8:	8d 83       	std	Y+5, r24	; 0x05
     8da:	f8 01       	movw	r30, r16
     8dc:	40 81       	ld	r20, Z
     8de:	51 81       	ldd	r21, Z+1	; 0x01
     8e0:	62 81       	ldd	r22, Z+2	; 0x02
     8e2:	73 81       	ldd	r23, Z+3	; 0x03
     8e4:	00 e0       	ldi	r16, 0x00	; 0
     8e6:	18 e4       	ldi	r17, 0x48	; 72
     8e8:	28 ee       	ldi	r18, 0xE8	; 232
     8ea:	31 e0       	ldi	r19, 0x01	; 1
     8ec:	ce 01       	movw	r24, r28
     8ee:	b9 dd       	rcall	.-1166   	; 0x462 <usart_set_baudrate>
     8f0:	9c 81       	ldd	r25, Y+4	; 0x04
     8f2:	98 60       	ori	r25, 0x08	; 8
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	90 61       	ori	r25, 0x10	; 16
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <read16>:
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
}
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	8c 01       	movw	r16, r24
     910:	f7 d4       	rcall	.+2542   	; 0x1300 <spiread>
     912:	c8 2f       	mov	r28, r24
     914:	d0 e0       	ldi	r29, 0x00	; 0
     916:	dc 2f       	mov	r29, r28
     918:	cc 27       	eor	r28, r28
     91a:	c8 01       	movw	r24, r16
     91c:	f1 d4       	rcall	.+2530   	; 0x1300 <spiread>
     91e:	9e 01       	movw	r18, r28
     920:	28 2b       	or	r18, r24
     922:	c9 01       	movw	r24, r18
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <read24>:
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	e1 d4       	rcall	.+2498   	; 0x1300 <spiread>
     93e:	c8 2e       	mov	r12, r24
     940:	d1 2c       	mov	r13, r1
     942:	e1 2c       	mov	r14, r1
     944:	f1 2c       	mov	r15, r1
     946:	76 01       	movw	r14, r12
     948:	dd 24       	eor	r13, r13
     94a:	cc 24       	eor	r12, r12
     94c:	ce 01       	movw	r24, r28
     94e:	d8 d4       	rcall	.+2480   	; 0x1300 <spiread>
     950:	d8 2a       	or	r13, r24
     952:	ce 01       	movw	r24, r28
     954:	d5 d4       	rcall	.+2474   	; 0x1300 <spiread>
     956:	a7 01       	movw	r20, r14
     958:	96 01       	movw	r18, r12
     95a:	28 2b       	or	r18, r24
     95c:	ca 01       	movw	r24, r20
     95e:	b9 01       	movw	r22, r18
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	08 95       	ret

0000096e <define_new_MS56XX_default_OSR>:
	MS56XX_t pressure_sensor;
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
     972:	41 83       	std	Z+1, r20	; 0x01
     974:	52 83       	std	Z+2, r21	; 0x02
     976:	63 83       	std	Z+3, r22	; 0x03
     978:	15 86       	std	Z+13, r1	; 0x0d
}

MS56XX_t define_new_MS56XX_default_OSR(SENSOR_TYPE model, SPI_t* spi, ioport_pin_t select_pin)
{
	return define_new_MS56XX(model, spi, select_pin, OSR_4096); //Default to highest oversampling rate if not provided
}
     97a:	08 95       	ret

0000097c <pressureSensorReset>:

void pressureSensorReset(MS56XX_t* sensor)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
	spiselect(sensor->select_pin);
     982:	88 81       	ld	r24, Y
     984:	cb d4       	rcall	.+2454   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b00011110);
     986:	6e e1       	ldi	r22, 0x1E	; 30
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	c1 d4       	rcall	.+2434   	; 0x1310 <spiwrite>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	2a 32       	cpi	r18, 0x2A	; 42
     998:	88 e6       	ldi	r24, 0x68	; 104
     99a:	38 07       	cpc	r19, r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <pressureSensorReset+0x16>
	delay_ms(5);
	spideselect(sensor->select_pin);
     99e:	88 81       	ld	r24, Y
     9a0:	d1 d4       	rcall	.+2466   	; 0x1344 <spideselect>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	85 3d       	cpi	r24, 0xD5	; 213
     9aa:	24 e1       	ldi	r18, 0x14	; 20
     9ac:	92 07       	cpc	r25, r18
     9ae:	d9 f7       	brne	.-10     	; 0x9a6 <pressureSensorReset+0x2a>
	delay_ms(1);
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <calibratePressureSensor>:

void calibratePressureSensor(MS56XX_t* sensor)
//Set up the appropriate SPI before calling this
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
	pressureSensorReset(sensor);
     9bc:	df df       	rcall	.-66     	; 0x97c <pressureSensorReset>
	
	//Get all the lovely little calibration constants
	spiselect(sensor->select_pin);
     9be:	88 81       	ld	r24, Y
     9c0:	ad d4       	rcall	.+2394   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10100010); //Bits 1 - 3 are 001, for C1
     9c2:	62 ea       	ldi	r22, 0xA2	; 162
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	a3 d4       	rcall	.+2374   	; 0x1310 <spiwrite>
	sensor->SENSt1 = read16(sensor->spi);
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	9b df       	rcall	.-202    	; 0x906 <read16>
     9d0:	8e 87       	std	Y+14, r24	; 0x0e
     9d2:	9f 87       	std	Y+15, r25	; 0x0f
	spideselect(sensor->select_pin);
     9d4:	88 81       	ld	r24, Y
     9d6:	b6 d4       	rcall	.+2412   	; 0x1344 <spideselect>

	spiselect(sensor->select_pin);
     9d8:	88 81       	ld	r24, Y
     9da:	a0 d4       	rcall	.+2368   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10100100); //010 = 2, for C2
     9dc:	64 ea       	ldi	r22, 0xA4	; 164
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	96 d4       	rcall	.+2348   	; 0x1310 <spiwrite>
	sensor->OFFt1 = read16(sensor->spi);
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	8e df       	rcall	.-228    	; 0x906 <read16>
     9ea:	88 8b       	std	Y+16, r24	; 0x10
     9ec:	99 8b       	std	Y+17, r25	; 0x11
	spideselect(sensor->select_pin);
     9ee:	88 81       	ld	r24, Y
     9f0:	a9 d4       	rcall	.+2386   	; 0x1344 <spideselect>

	spiselect(sensor->select_pin);
     9f2:	88 81       	ld	r24, Y
     9f4:	93 d4       	rcall	.+2342   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10100110); // 011 = 3, for C3
     9f6:	66 ea       	ldi	r22, 0xA6	; 166
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	89 d4       	rcall	.+2322   	; 0x1310 <spiwrite>
	sensor->TCS = read16(sensor->spi);
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	81 df       	rcall	.-254    	; 0x906 <read16>
     a04:	8a 8b       	std	Y+18, r24	; 0x12
     a06:	9b 8b       	std	Y+19, r25	; 0x13
	spideselect(sensor->select_pin);
     a08:	88 81       	ld	r24, Y
     a0a:	9c d4       	rcall	.+2360   	; 0x1344 <spideselect>

	spiselect(sensor->select_pin);
     a0c:	88 81       	ld	r24, Y
     a0e:	86 d4       	rcall	.+2316   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10101000); // 100 = 4
     a10:	68 ea       	ldi	r22, 0xA8	; 168
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	7c d4       	rcall	.+2296   	; 0x1310 <spiwrite>
	sensor->TCO = read16(sensor->spi);
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	74 df       	rcall	.-280    	; 0x906 <read16>
     a1e:	8c 8b       	std	Y+20, r24	; 0x14
     a20:	9d 8b       	std	Y+21, r25	; 0x15
	spideselect(sensor->select_pin);
     a22:	88 81       	ld	r24, Y
     a24:	8f d4       	rcall	.+2334   	; 0x1344 <spideselect>

	spiselect(sensor->select_pin);
     a26:	88 81       	ld	r24, Y
     a28:	79 d4       	rcall	.+2290   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10101010); // 101 = 5
     a2a:	6a ea       	ldi	r22, 0xAA	; 170
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	6f d4       	rcall	.+2270   	; 0x1310 <spiwrite>
	sensor->Tref = read16(sensor->spi);
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	67 df       	rcall	.-306    	; 0x906 <read16>
     a38:	8e 8b       	std	Y+22, r24	; 0x16
     a3a:	9f 8b       	std	Y+23, r25	; 0x17
	spideselect(sensor->select_pin);
     a3c:	88 81       	ld	r24, Y
     a3e:	82 d4       	rcall	.+2308   	; 0x1344 <spideselect>


	spiselect(sensor->select_pin);
     a40:	88 81       	ld	r24, Y
     a42:	6c d4       	rcall	.+2264   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0b10101100); // 110 = 6
     a44:	6c ea       	ldi	r22, 0xAC	; 172
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	62 d4       	rcall	.+2244   	; 0x1310 <spiwrite>
	sensor->TEMPSENS = read16(sensor->spi);
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	5a df       	rcall	.-332    	; 0x906 <read16>
     a52:	88 8f       	std	Y+24, r24	; 0x18
     a54:	99 8f       	std	Y+25, r25	; 0x19
	spideselect(sensor->select_pin);
     a56:	88 81       	ld	r24, Y
     a58:	75 d4       	rcall	.+2282   	; 0x1344 <spideselect>
			sensor->OFFt1, 
			sensor->TCS, 
			sensor->TCO, 
			sensor->Tref, 
			sensor->TEMPSENS);*/
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <get_read_info>:
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
 }
 
 uint8_t get_read_info(OSR_Settings osr, uint8_t* D1_read_cmd, uint8_t* D2_read_cmd, uint16_t* delay_time_us)
 {
	 switch (osr)
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	29 f1       	breq	.+74     	; 0xaae <get_read_info+0x4e>
     a64:	28 f4       	brcc	.+10     	; 0xa70 <get_read_info+0x10>
     a66:	88 23       	and	r24, r24
     a68:	41 f0       	breq	.+16     	; 0xa7a <get_read_info+0x1a>
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	99 f0       	breq	.+38     	; 0xa94 <get_read_info+0x34>
     a6e:	46 c0       	rjmp	.+140    	; 0xafc <get_read_info+0x9c>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	51 f1       	breq	.+84     	; 0xac8 <get_read_info+0x68>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	a9 f1       	breq	.+106    	; 0xae2 <get_read_info+0x82>
     a78:	41 c0       	rjmp	.+130    	; 0xafc <get_read_info+0x9c>
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
     a7a:	88 e4       	ldi	r24, 0x48	; 72
     a7c:	fb 01       	movw	r30, r22
     a7e:	80 83       	st	Z, r24
			*D2_read_cmd = 0x58;
     a80:	88 e5       	ldi	r24, 0x58	; 88
     a82:	fa 01       	movw	r30, r20
     a84:	80 83       	st	Z, r24
			*delay_time_us = 9040;
     a86:	80 e5       	ldi	r24, 0x50	; 80
     a88:	93 e2       	ldi	r25, 0x23	; 35
     a8a:	f9 01       	movw	r30, r18
     a8c:	80 83       	st	Z, r24
     a8e:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     a90:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
			*D2_read_cmd = 0x58;
			*delay_time_us = 9040;
			break;
     a92:	08 95       	ret
		case OSR_2048:
			*D1_read_cmd = 0x46;
     a94:	86 e4       	ldi	r24, 0x46	; 70
     a96:	fb 01       	movw	r30, r22
     a98:	80 83       	st	Z, r24
			*D2_read_cmd = 0x56;
     a9a:	86 e5       	ldi	r24, 0x56	; 86
     a9c:	fa 01       	movw	r30, r20
     a9e:	80 83       	st	Z, r24
			*delay_time_us = 4540;
     aa0:	8c eb       	ldi	r24, 0xBC	; 188
     aa2:	91 e1       	ldi	r25, 0x11	; 17
     aa4:	f9 01       	movw	r30, r18
     aa6:	80 83       	st	Z, r24
     aa8:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     aaa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_2048:
			*D1_read_cmd = 0x46;
			*D2_read_cmd = 0x56;
			*delay_time_us = 4540;
			break;
     aac:	08 95       	ret
		case OSR_1024:
			*D1_read_cmd = 0x44;
     aae:	84 e4       	ldi	r24, 0x44	; 68
     ab0:	fb 01       	movw	r30, r22
     ab2:	80 83       	st	Z, r24
			*D2_read_cmd = 0x54;
     ab4:	84 e5       	ldi	r24, 0x54	; 84
     ab6:	fa 01       	movw	r30, r20
     ab8:	80 83       	st	Z, r24
			*delay_time_us = 2280;
     aba:	88 ee       	ldi	r24, 0xE8	; 232
     abc:	98 e0       	ldi	r25, 0x08	; 8
     abe:	f9 01       	movw	r30, r18
     ac0:	80 83       	st	Z, r24
     ac2:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     ac4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_1024:
			*D1_read_cmd = 0x44;
			*D2_read_cmd = 0x54;
			*delay_time_us = 2280;
			break;
     ac6:	08 95       	ret
		case OSR_512:
			*D1_read_cmd = 0x42;
     ac8:	82 e4       	ldi	r24, 0x42	; 66
     aca:	fb 01       	movw	r30, r22
     acc:	80 83       	st	Z, r24
			*D2_read_cmd = 0x52;
     ace:	82 e5       	ldi	r24, 0x52	; 82
     ad0:	fa 01       	movw	r30, r20
     ad2:	80 83       	st	Z, r24
			*delay_time_us = 1170;
     ad4:	82 e9       	ldi	r24, 0x92	; 146
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	f9 01       	movw	r30, r18
     ada:	80 83       	st	Z, r24
     adc:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     ade:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_512:
			*D1_read_cmd = 0x42;
			*D2_read_cmd = 0x52;
			*delay_time_us = 1170;
			break;
     ae0:	08 95       	ret
		case OSR_256:
			*D1_read_cmd = 0x40;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	fb 01       	movw	r30, r22
     ae6:	80 83       	st	Z, r24
			*D2_read_cmd = 0x50;
     ae8:	80 e5       	ldi	r24, 0x50	; 80
     aea:	fa 01       	movw	r30, r20
     aec:	80 83       	st	Z, r24
			*delay_time_us = 600;
     aee:	88 e5       	ldi	r24, 0x58	; 88
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	f9 01       	movw	r30, r18
     af4:	80 83       	st	Z, r24
     af6:	91 83       	std	Z+1, r25	; 0x01
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     af8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_256:
			*D1_read_cmd = 0x40;
			*D2_read_cmd = 0x50;
			*delay_time_us = 600;
			break;
     afa:	08 95       	ret
		default:
			return 1; //Error
     afc:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 return 0; //Success
 }
     afe:	08 95       	ret

00000b00 <readMS56XX>:
			sensor->TEMPSENS);*/
}


void readMS56XX(MS56XX_t* sensor)
 {
     b00:	2f 92       	push	r2
     b02:	3f 92       	push	r3
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	6f 92       	push	r6
     b0a:	7f 92       	push	r7
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	ee 97       	sbiw	r28, 0x3e	; 62
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	1c 01       	movw	r2, r24
	uint32_t rawPressure = 0; //D1
	uint32_t rawTemp = 0; //D2
	
	//Assume data is valid unless any of the cases checked for are met
	sensor->data.valid = 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	d1 01       	movw	r26, r2
     b34:	1c 96       	adiw	r26, 0x0c	; 12
     b36:	8c 93       	st	X, r24
     b38:	1c 97       	sbiw	r26, 0x0c	; 12
	
	uint16_t delay_time;
	uint8_t D1_cmd, D2_cmd;
	if (get_read_info(sensor->osr, &D1_cmd, &D2_cmd, &delay_time)) //Return flag of 1 = OSR not supported
     b3a:	9e 01       	movw	r18, r28
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	ae 01       	movw	r20, r28
     b42:	4c 5f       	subi	r20, 0xFC	; 252
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	be 01       	movw	r22, r28
     b48:	6d 5f       	subi	r22, 0xFD	; 253
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	1d 96       	adiw	r26, 0x0d	; 13
     b4e:	8c 91       	ld	r24, X
     b50:	87 df       	rcall	.-242    	; 0xa60 <get_read_info>
     b52:	88 23       	and	r24, r24
     b54:	19 f0       	breq	.+6      	; 0xb5c <readMS56XX+0x5c>
	{
		//Mark data as invalid and exit function
		sensor->data.valid = 0;
     b56:	f1 01       	movw	r30, r2
     b58:	14 86       	std	Z+12, r1	; 0x0c
     b5a:	bc c3       	rjmp	.+1912   	; 0x12d4 <readMS56XX+0x7d4>
		return;
	}
	//If get_read_info succeeded, D1_cmd, D2_cmd, and delay_time will now have the appropriate values for the selected OSR

	//Ask for raw pressure, 4096 OSR
	spiselect(sensor->select_pin);
     b5c:	d1 01       	movw	r26, r2
     b5e:	8c 91       	ld	r24, X
     b60:	dd d3       	rcall	.+1978   	; 0x131c <spiselect>
	spiwrite(sensor->spi, D1_cmd);
     b62:	6b 81       	ldd	r22, Y+3	; 0x03
     b64:	f1 01       	movw	r30, r2
     b66:	81 81       	ldd	r24, Z+1	; 0x01
     b68:	92 81       	ldd	r25, Z+2	; 0x02
     b6a:	d2 d3       	rcall	.+1956   	; 0x1310 <spiwrite>
	spideselect(sensor->select_pin);
     b6c:	d1 01       	movw	r26, r2
     b6e:	8c 91       	ld	r24, X
     b70:	e9 d3       	rcall	.+2002   	; 0x1344 <spideselect>

	delay_us(delay_time);
     b72:	49 81       	ldd	r20, Y+1	; 0x01
     b74:	5a 81       	ldd	r21, Y+2	; 0x02
     b76:	a1 2c       	mov	r10, r1
     b78:	0f 2e       	mov	r0, r31
     b7a:	f8 e4       	ldi	r31, 0x48	; 72
     b7c:	bf 2e       	mov	r11, r31
     b7e:	f0 2d       	mov	r31, r0
     b80:	0f 2e       	mov	r0, r31
     b82:	f8 ee       	ldi	r31, 0xE8	; 232
     b84:	cf 2e       	mov	r12, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	dd 24       	eor	r13, r13
     b8a:	d3 94       	inc	r13
     b8c:	e1 2c       	mov	r14, r1
     b8e:	f1 2c       	mov	r15, r1
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	24 2f       	mov	r18, r20
     b96:	35 2f       	mov	r19, r21
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     ba8:	21 5c       	subi	r18, 0xC1	; 193
     baa:	3d 4b       	sbci	r19, 0xBD	; 189
     bac:	40 4f       	sbci	r20, 0xF0	; 240
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	6f 4f       	sbci	r22, 0xFF	; 255
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	8f 4f       	sbci	r24, 0xFF	; 255
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__floatundisf>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	3b e1       	ldi	r19, 0x1B	; 27
     bc0:	47 eb       	ldi	r20, 0xB7	; 183
     bc2:	5a e4       	ldi	r21, 0x4A	; 74
     bc4:	f3 d7       	rcall	.+4070   	; 0x1bac <__divsf3>
     bc6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixunssfdi>
     bca:	f2 2f       	mov	r31, r18
     bcc:	e3 2f       	mov	r30, r19
     bce:	8f 2f       	mov	r24, r31
     bd0:	9e 2f       	mov	r25, r30
     bd2:	a4 2f       	mov	r26, r20
     bd4:	b5 2f       	mov	r27, r21
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	a1 09       	sbc	r26, r1
     bda:	b1 09       	sbc	r27, r1
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <readMS56XX+0xd6>

	//Read off raw pressure (D1)
	spiselect(sensor->select_pin);
     bde:	f1 01       	movw	r30, r2
     be0:	80 81       	ld	r24, Z
     be2:	9c d3       	rcall	.+1848   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0x0);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	d1 01       	movw	r26, r2
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	8d 91       	ld	r24, X+
     bec:	9c 91       	ld	r25, X
     bee:	12 97       	sbiw	r26, 0x02	; 2
     bf0:	8f d3       	rcall	.+1822   	; 0x1310 <spiwrite>
	rawPressure = read24(sensor->spi);
     bf2:	f1 01       	movw	r30, r2
     bf4:	81 81       	ldd	r24, Z+1	; 0x01
     bf6:	92 81       	ldd	r25, Z+2	; 0x02
     bf8:	9a de       	rcall	.-716    	; 0x92e <read24>
     bfa:	6b ab       	std	Y+51, r22	; 0x33
     bfc:	7c ab       	std	Y+52, r23	; 0x34
     bfe:	8d ab       	std	Y+53, r24	; 0x35
     c00:	9e ab       	std	Y+54, r25	; 0x36
	spideselect(sensor->select_pin);
     c02:	d1 01       	movw	r26, r2
     c04:	8c 91       	ld	r24, X
     c06:	9e d3       	rcall	.+1852   	; 0x1344 <spideselect>
	

	//Ask for raw temperature, 4096 OSR
	spiselect(sensor->select_pin);
     c08:	f1 01       	movw	r30, r2
     c0a:	80 81       	ld	r24, Z
     c0c:	87 d3       	rcall	.+1806   	; 0x131c <spiselect>
	spiwrite(sensor->spi, D2_cmd); //OSR = 4096
     c0e:	6c 81       	ldd	r22, Y+4	; 0x04
     c10:	d1 01       	movw	r26, r2
     c12:	11 96       	adiw	r26, 0x01	; 1
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	7a d3       	rcall	.+1780   	; 0x1310 <spiwrite>
	spideselect(sensor->select_pin);
     c1c:	f1 01       	movw	r30, r2
     c1e:	80 81       	ld	r24, Z
     c20:	91 d3       	rcall	.+1826   	; 0x1344 <spideselect>
	
	delay_us(delay_time);
     c22:	49 81       	ldd	r20, Y+1	; 0x01
     c24:	5a 81       	ldd	r21, Y+2	; 0x02
     c26:	a1 2c       	mov	r10, r1
     c28:	0f 2e       	mov	r0, r31
     c2a:	f8 e4       	ldi	r31, 0x48	; 72
     c2c:	bf 2e       	mov	r11, r31
     c2e:	f0 2d       	mov	r31, r0
     c30:	0f 2e       	mov	r0, r31
     c32:	f8 ee       	ldi	r31, 0xE8	; 232
     c34:	cf 2e       	mov	r12, r31
     c36:	f0 2d       	mov	r31, r0
     c38:	dd 24       	eor	r13, r13
     c3a:	d3 94       	inc	r13
     c3c:	e1 2c       	mov	r14, r1
     c3e:	f1 2c       	mov	r15, r1
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	24 2f       	mov	r18, r20
     c46:	35 2f       	mov	r19, r21
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     c58:	21 5c       	subi	r18, 0xC1	; 193
     c5a:	3d 4b       	sbci	r19, 0xBD	; 189
     c5c:	40 4f       	sbci	r20, 0xF0	; 240
     c5e:	5f 4f       	sbci	r21, 0xFF	; 255
     c60:	6f 4f       	sbci	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	8f 4f       	sbci	r24, 0xFF	; 255
     c66:	9f 4f       	sbci	r25, 0xFF	; 255
     c68:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__floatundisf>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	3b e1       	ldi	r19, 0x1B	; 27
     c70:	47 eb       	ldi	r20, 0xB7	; 183
     c72:	5a e4       	ldi	r21, 0x4A	; 74
     c74:	9b d7       	rcall	.+3894   	; 0x1bac <__divsf3>
     c76:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixunssfdi>
     c7a:	f2 2f       	mov	r31, r18
     c7c:	e3 2f       	mov	r30, r19
     c7e:	8f 2f       	mov	r24, r31
     c80:	9e 2f       	mov	r25, r30
     c82:	a4 2f       	mov	r26, r20
     c84:	b5 2f       	mov	r27, r21
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	a1 09       	sbc	r26, r1
     c8a:	b1 09       	sbc	r27, r1
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <readMS56XX+0x186>

	//Read off raw temperature (D2)
	spiselect(sensor->select_pin);
     c8e:	d1 01       	movw	r26, r2
     c90:	8c 91       	ld	r24, X
     c92:	44 d3       	rcall	.+1672   	; 0x131c <spiselect>
	spiwrite(sensor->spi, 0x0);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	f1 01       	movw	r30, r2
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	92 81       	ldd	r25, Z+2	; 0x02
     c9c:	39 d3       	rcall	.+1650   	; 0x1310 <spiwrite>
	rawTemp = read24(sensor->spi);
     c9e:	d1 01       	movw	r26, r2
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	8d 91       	ld	r24, X+
     ca4:	9c 91       	ld	r25, X
     ca6:	12 97       	sbiw	r26, 0x02	; 2
     ca8:	42 de       	rcall	.-892    	; 0x92e <read24>
     caa:	6b 01       	movw	r12, r22
     cac:	7c 01       	movw	r14, r24
	spideselect(sensor->select_pin);
     cae:	f1 01       	movw	r30, r2
     cb0:	80 81       	ld	r24, Z
     cb2:	48 d3       	rcall	.+1680   	; 0x1344 <spideselect>
	
	
	int32_t dT = rawTemp - (int32_t)(((int64_t)sensor->Tref) * ((int64_t)256));
     cb4:	d1 01       	movw	r26, r2
     cb6:	56 96       	adiw	r26, 0x16	; 22
     cb8:	8d 91       	ld	r24, X+
     cba:	9c 91       	ld	r25, X
     cbc:	57 97       	sbiw	r26, 0x17	; 23
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ba 2f       	mov	r27, r26
     cc4:	a9 2f       	mov	r26, r25
     cc6:	98 2f       	mov	r25, r24
     cc8:	88 27       	eor	r24, r24
     cca:	97 01       	movw	r18, r14
     ccc:	86 01       	movw	r16, r12
     cce:	08 1b       	sub	r16, r24
     cd0:	19 0b       	sbc	r17, r25
     cd2:	2a 0b       	sbc	r18, r26
     cd4:	3b 0b       	sbc	r19, r27
     cd6:	0d 83       	std	Y+5, r16	; 0x05
     cd8:	1e 83       	std	Y+6, r17	; 0x06
     cda:	2f 83       	std	Y+7, r18	; 0x07
     cdc:	38 87       	std	Y+8, r19	; 0x08
	int32_t TEMP = (int32_t)(((int32_t)2000) + ((int32_t)(((int64_t)dT) * ((int64_t)sensor->TEMPSENS) / ((int64_t)8388608))));
     cde:	33 0f       	add	r19, r19
     ce0:	00 0b       	sbc	r16, r16
     ce2:	10 2f       	mov	r17, r16
     ce4:	98 01       	movw	r18, r16
     ce6:	0d 87       	std	Y+13, r16	; 0x0d
     ce8:	1e 87       	std	Y+14, r17	; 0x0e
     cea:	2f 87       	std	Y+15, r18	; 0x0f
     cec:	38 8b       	std	Y+16, r19	; 0x10
     cee:	d1 01       	movw	r26, r2
     cf0:	58 96       	adiw	r26, 0x18	; 24
     cf2:	0d 91       	ld	r16, X+
     cf4:	1c 91       	ld	r17, X
     cf6:	59 97       	sbiw	r26, 0x19	; 25
     cf8:	a0 2e       	mov	r10, r16
     cfa:	b1 2e       	mov	r11, r17
     cfc:	c1 2c       	mov	r12, r1
     cfe:	d1 2c       	mov	r13, r1
     d00:	e1 2c       	mov	r14, r1
     d02:	f1 2c       	mov	r15, r1
     d04:	00 e0       	ldi	r16, 0x00	; 0
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	2d 81       	ldd	r18, Y+5	; 0x05
     d0a:	3e 81       	ldd	r19, Y+6	; 0x06
     d0c:	4f 81       	ldd	r20, Y+7	; 0x07
     d0e:	58 85       	ldd	r21, Y+8	; 0x08
     d10:	6d 85       	ldd	r22, Y+13	; 0x0d
     d12:	76 2f       	mov	r23, r22
     d14:	86 2f       	mov	r24, r22
     d16:	96 2f       	mov	r25, r22
     d18:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     d1c:	f2 2e       	mov	r15, r18
     d1e:	03 2f       	mov	r16, r19
     d20:	14 2f       	mov	r17, r20
     d22:	b5 2f       	mov	r27, r21
     d24:	f6 2f       	mov	r31, r22
     d26:	e7 2f       	mov	r30, r23
     d28:	58 2e       	mov	r5, r24
     d2a:	69 2e       	mov	r6, r25
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
     d32:	84 f4       	brge	.+32     	; 0xd54 <readMS56XX+0x254>
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	31 09       	sbc	r19, r1
     d38:	40 48       	sbci	r20, 0x80	; 128
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	6f 4f       	sbci	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	f2 2e       	mov	r15, r18
     d46:	03 2f       	mov	r16, r19
     d48:	14 2f       	mov	r17, r20
     d4a:	b5 2f       	mov	r27, r21
     d4c:	f6 2f       	mov	r31, r22
     d4e:	e7 2f       	mov	r30, r23
     d50:	58 2e       	mov	r5, r24
     d52:	69 2e       	mov	r6, r25
     d54:	2f 2d       	mov	r18, r15
     d56:	30 2f       	mov	r19, r16
     d58:	41 2f       	mov	r20, r17
     d5a:	5b 2f       	mov	r21, r27
     d5c:	6f 2f       	mov	r22, r31
     d5e:	7e 2f       	mov	r23, r30
     d60:	85 2d       	mov	r24, r5
     d62:	96 2d       	mov	r25, r6
     d64:	07 e1       	ldi	r16, 0x17	; 23
     d66:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
     d6a:	42 2e       	mov	r4, r18
     d6c:	53 2e       	mov	r5, r19
     d6e:	64 2e       	mov	r6, r20
     d70:	75 2e       	mov	r7, r21
     d72:	93 01       	movw	r18, r6
     d74:	82 01       	movw	r16, r4
     d76:	00 53       	subi	r16, 0x30	; 48
     d78:	18 4f       	sbci	r17, 0xF8	; 248
     d7a:	2f 4f       	sbci	r18, 0xFF	; 255
     d7c:	3f 4f       	sbci	r19, 0xFF	; 255
     d7e:	0d 8b       	std	Y+21, r16	; 0x15
     d80:	1e 8b       	std	Y+22, r17	; 0x16
     d82:	2f 8b       	std	Y+23, r18	; 0x17
     d84:	38 8f       	std	Y+24, r19	; 0x18
	
	int32_t T2 = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	if (TEMP < 2000)
     d86:	00 3d       	cpi	r16, 0xD0	; 208
     d88:	17 40       	sbci	r17, 0x07	; 7
     d8a:	21 05       	cpc	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	0c f0       	brlt	.+2      	; 0xd92 <readMS56XX+0x292>
     d90:	97 c0       	rjmp	.+302    	; 0xec0 <readMS56XX+0x3c0>
	{
		T2 = ((int64_t)dT) * ((int64_t)dT) / ((int64_t)2147483648);
     d92:	ad 80       	ldd	r10, Y+5	; 0x05
     d94:	be 80       	ldd	r11, Y+6	; 0x06
     d96:	cf 80       	ldd	r12, Y+7	; 0x07
     d98:	d8 84       	ldd	r13, Y+8	; 0x08
     d9a:	ed 84       	ldd	r14, Y+13	; 0x0d
     d9c:	fe 2c       	mov	r15, r14
     d9e:	0e 2d       	mov	r16, r14
     da0:	1e 2d       	mov	r17, r14
     da2:	2a 2d       	mov	r18, r10
     da4:	3b 2d       	mov	r19, r11
     da6:	4c 2d       	mov	r20, r12
     da8:	5d 2d       	mov	r21, r13
     daa:	60 2f       	mov	r22, r16
     dac:	70 2f       	mov	r23, r16
     dae:	80 2f       	mov	r24, r16
     db0:	9e 2d       	mov	r25, r14
     db2:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     db6:	a1 2c       	mov	r10, r1
     db8:	b1 2c       	mov	r11, r1
     dba:	c1 2c       	mov	r12, r1
     dbc:	68 94       	set
     dbe:	dd 24       	eor	r13, r13
     dc0:	d7 f8       	bld	r13, 7
     dc2:	e1 2c       	mov	r14, r1
     dc4:	f1 2c       	mov	r15, r1
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	0e 94 0e 13 	call	0x261c	; 0x261c <__divdi3>
     dce:	28 a3       	std	Y+32, r18	; 0x20
     dd0:	39 a3       	std	Y+33, r19	; 0x21
     dd2:	4a a3       	std	Y+34, r20	; 0x22
     dd4:	5b a3       	std	Y+35, r21	; 0x23
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
     dd6:	d3 01       	movw	r26, r6
     dd8:	c2 01       	movw	r24, r4
     dda:	bb 0f       	add	r27, r27
     ddc:	88 0b       	sbc	r24, r24
     dde:	98 2f       	mov	r25, r24
     de0:	dc 01       	movw	r26, r24
     de2:	89 8b       	std	Y+17, r24	; 0x11
     de4:	9a 8b       	std	Y+18, r25	; 0x12
     de6:	ab 8b       	std	Y+19, r26	; 0x13
     de8:	bc 8b       	std	Y+20, r27	; 0x14
     dea:	a4 2c       	mov	r10, r4
     dec:	b5 2c       	mov	r11, r5
     dee:	c6 2c       	mov	r12, r6
     df0:	d7 2c       	mov	r13, r7
     df2:	e9 88       	ldd	r14, Y+17	; 0x11
     df4:	fe 2c       	mov	r15, r14
     df6:	0e 2d       	mov	r16, r14
     df8:	1e 2d       	mov	r17, r14
     dfa:	24 2d       	mov	r18, r4
     dfc:	35 2d       	mov	r19, r5
     dfe:	46 2d       	mov	r20, r6
     e00:	57 2d       	mov	r21, r7
     e02:	60 2f       	mov	r22, r16
     e04:	70 2f       	mov	r23, r16
     e06:	80 2f       	mov	r24, r16
     e08:	9e 2d       	mov	r25, r14
     e0a:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     e0e:	b2 2f       	mov	r27, r18
     e10:	f3 2f       	mov	r31, r19
     e12:	e4 2f       	mov	r30, r20
     e14:	55 2e       	mov	r5, r21
     e16:	66 2e       	mov	r6, r22
     e18:	77 2e       	mov	r7, r23
     e1a:	88 2e       	mov	r8, r24
     e1c:	99 2e       	mov	r9, r25
     e1e:	05 e0       	ldi	r16, 0x05	; 5
     e20:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     e24:	ab 2e       	mov	r10, r27
     e26:	bf 2e       	mov	r11, r31
     e28:	ce 2e       	mov	r12, r30
     e2a:	d5 2c       	mov	r13, r5
     e2c:	e6 2c       	mov	r14, r6
     e2e:	f7 2c       	mov	r15, r7
     e30:	08 2d       	mov	r16, r8
     e32:	19 2d       	mov	r17, r9
     e34:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
     e38:	01 e0       	ldi	r16, 0x01	; 1
     e3a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     e3e:	08 2d       	mov	r16, r8
     e40:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
     e44:	42 2e       	mov	r4, r18
     e46:	39 8b       	std	Y+17, r19	; 0x11
     e48:	4a 8f       	std	Y+26, r20	; 0x1a
     e4a:	5b 8f       	std	Y+27, r21	; 0x1b
     e4c:	6c 8f       	std	Y+28, r22	; 0x1c
     e4e:	7d 8f       	std	Y+29, r23	; 0x1d
     e50:	8e 8f       	std	Y+30, r24	; 0x1e
     e52:	9f 8f       	std	Y+31, r25	; 0x1f
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
     e5a:	5c f4       	brge	.+22     	; 0xe72 <readMS56XX+0x372>
     e5c:	af e0       	ldi	r26, 0x0F	; 15
     e5e:	0e 94 16 14 	call	0x282c	; 0x282c <__adddi3_s8>
     e62:	42 2e       	mov	r4, r18
     e64:	39 8b       	std	Y+17, r19	; 0x11
     e66:	4a 8f       	std	Y+26, r20	; 0x1a
     e68:	5b 8f       	std	Y+27, r21	; 0x1b
     e6a:	6c 8f       	std	Y+28, r22	; 0x1c
     e6c:	7d 8f       	std	Y+29, r23	; 0x1d
     e6e:	8e 8f       	std	Y+30, r24	; 0x1e
     e70:	9f 8f       	std	Y+31, r25	; 0x1f
     e72:	24 2d       	mov	r18, r4
     e74:	39 89       	ldd	r19, Y+17	; 0x11
     e76:	4a 8d       	ldd	r20, Y+26	; 0x1a
     e78:	5b 8d       	ldd	r21, Y+27	; 0x1b
     e7a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e7c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     e7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e80:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e82:	04 e0       	ldi	r16, 0x04	; 4
     e84:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
     e88:	29 8b       	std	Y+17, r18	; 0x11
     e8a:	3a 8f       	std	Y+26, r19	; 0x1a
     e8c:	4b 8f       	std	Y+27, r20	; 0x1b
     e8e:	5c 8f       	std	Y+28, r21	; 0x1c
     e90:	6d 8f       	std	Y+29, r22	; 0x1d
     e92:	7e 8f       	std	Y+30, r23	; 0x1e
     e94:	8f 8f       	std	Y+31, r24	; 0x1f
     e96:	9a a7       	std	Y+42, r25	; 0x2a
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
     e98:	2b 2f       	mov	r18, r27
     e9a:	3f 2f       	mov	r19, r31
     e9c:	4e 2f       	mov	r20, r30
     e9e:	55 2d       	mov	r21, r5
     ea0:	66 2d       	mov	r22, r6
     ea2:	77 2d       	mov	r23, r7
     ea4:	88 2d       	mov	r24, r8
     ea6:	99 2d       	mov	r25, r9
     ea8:	01 e0       	ldi	r16, 0x01	; 1
     eaa:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     eae:	2b a7       	std	Y+43, r18	; 0x2b
     eb0:	3c a7       	std	Y+44, r19	; 0x2c
     eb2:	4d a7       	std	Y+45, r20	; 0x2d
     eb4:	5e a7       	std	Y+46, r21	; 0x2e
     eb6:	6f a7       	std	Y+47, r22	; 0x2f
     eb8:	78 ab       	std	Y+48, r23	; 0x30
     eba:	89 ab       	std	Y+49, r24	; 0x31
     ebc:	9a ab       	std	Y+50, r25	; 0x32
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <readMS56XX+0x3e8>
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
		SENS2 = 0;	
     ec0:	1b a6       	std	Y+43, r1	; 0x2b
     ec2:	1c a6       	std	Y+44, r1	; 0x2c
     ec4:	1d a6       	std	Y+45, r1	; 0x2d
     ec6:	1e a6       	std	Y+46, r1	; 0x2e
     ec8:	1f a6       	std	Y+47, r1	; 0x2f
     eca:	18 aa       	std	Y+48, r1	; 0x30
     ecc:	19 aa       	std	Y+49, r1	; 0x31
     ece:	1a aa       	std	Y+50, r1	; 0x32
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
     ed0:	19 8a       	std	Y+17, r1	; 0x11
     ed2:	1a 8e       	std	Y+26, r1	; 0x1a
     ed4:	1b 8e       	std	Y+27, r1	; 0x1b
     ed6:	1c 8e       	std	Y+28, r1	; 0x1c
     ed8:	1d 8e       	std	Y+29, r1	; 0x1d
     eda:	1e 8e       	std	Y+30, r1	; 0x1e
     edc:	1f 8e       	std	Y+31, r1	; 0x1f
     ede:	1a a6       	std	Y+42, r1	; 0x2a
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
     ee0:	18 a2       	std	Y+32, r1	; 0x20
     ee2:	19 a2       	std	Y+33, r1	; 0x21
     ee4:	1a a2       	std	Y+34, r1	; 0x22
     ee6:	1b a2       	std	Y+35, r1	; 0x23
		OFF2 = 0;
		SENS2 = 0;	
	} 
	
	if (TEMP<-1500)
     ee8:	ad 88       	ldd	r10, Y+21	; 0x15
     eea:	be 88       	ldd	r11, Y+22	; 0x16
     eec:	cf 88       	ldd	r12, Y+23	; 0x17
     eee:	d8 8c       	ldd	r13, Y+24	; 0x18
     ef0:	04 e2       	ldi	r16, 0x24	; 36
     ef2:	a0 16       	cp	r10, r16
     ef4:	0a ef       	ldi	r16, 0xFA	; 250
     ef6:	b0 06       	cpc	r11, r16
     ef8:	0f ef       	ldi	r16, 0xFF	; 255
     efa:	c0 06       	cpc	r12, r16
     efc:	d0 06       	cpc	r13, r16
     efe:	0c f0       	brlt	.+2      	; 0xf02 <readMS56XX+0x402>
     f00:	5d c0       	rjmp	.+186    	; 0xfbc <readMS56XX+0x4bc>
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
     f02:	2d 89       	ldd	r18, Y+21	; 0x15
     f04:	3e 89       	ldd	r19, Y+22	; 0x16
     f06:	4f 89       	ldd	r20, Y+23	; 0x17
     f08:	58 8d       	ldd	r21, Y+24	; 0x18
     f0a:	76 01       	movw	r14, r12
     f0c:	65 01       	movw	r12, r10
     f0e:	ff 0c       	add	r15, r15
     f10:	cc 08       	sbc	r12, r12
     f12:	dc 2c       	mov	r13, r12
     f14:	76 01       	movw	r14, r12
     f16:	6c 2d       	mov	r22, r12
     f18:	7c 2d       	mov	r23, r12
     f1a:	8c 2d       	mov	r24, r12
     f1c:	9c 2d       	mov	r25, r12
     f1e:	24 52       	subi	r18, 0x24	; 36
     f20:	3a 4f       	sbci	r19, 0xFA	; 250
     f22:	4f 4f       	sbci	r20, 0xFF	; 255
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	6f 4f       	sbci	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	52 2e       	mov	r5, r18
     f30:	63 2e       	mov	r6, r19
     f32:	74 2e       	mov	r7, r20
     f34:	85 2e       	mov	r8, r21
     f36:	96 2e       	mov	r9, r22
     f38:	b7 2f       	mov	r27, r23
     f3a:	a8 2f       	mov	r26, r24
     f3c:	f9 2f       	mov	r31, r25
     f3e:	04 e0       	ldi	r16, 0x04	; 4
     f40:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     f44:	a5 2c       	mov	r10, r5
     f46:	b6 2c       	mov	r11, r6
     f48:	c7 2c       	mov	r12, r7
     f4a:	d8 2c       	mov	r13, r8
     f4c:	e9 2c       	mov	r14, r9
     f4e:	fb 2e       	mov	r15, r27
     f50:	0a 2f       	mov	r16, r26
     f52:	1f 2f       	mov	r17, r31
     f54:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
     f58:	e2 e0       	ldi	r30, 0x02	; 2
     f5a:	2e 27       	eor	r18, r30
     f5c:	a9 88       	ldd	r10, Y+17	; 0x11
     f5e:	ba 8c       	ldd	r11, Y+26	; 0x1a
     f60:	cb 8c       	ldd	r12, Y+27	; 0x1b
     f62:	dc 8c       	ldd	r13, Y+28	; 0x1c
     f64:	ed 8c       	ldd	r14, Y+29	; 0x1d
     f66:	fe 8c       	ldd	r15, Y+30	; 0x1e
     f68:	0f 8d       	ldd	r16, Y+31	; 0x1f
     f6a:	1a a5       	ldd	r17, Y+42	; 0x2a
     f6c:	0e 94 0d 14 	call	0x281a	; 0x281a <__adddi3>
     f70:	29 8b       	std	Y+17, r18	; 0x11
     f72:	3a 8f       	std	Y+26, r19	; 0x1a
     f74:	4b 8f       	std	Y+27, r20	; 0x1b
     f76:	5c 8f       	std	Y+28, r21	; 0x1c
     f78:	6d 8f       	std	Y+29, r22	; 0x1d
     f7a:	7e 8f       	std	Y+30, r23	; 0x1e
     f7c:	8f 8f       	std	Y+31, r24	; 0x1f
     f7e:	9a a7       	std	Y+42, r25	; 0x2a
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
     f80:	25 2d       	mov	r18, r5
     f82:	36 2d       	mov	r19, r6
     f84:	47 2d       	mov	r20, r7
     f86:	58 2d       	mov	r21, r8
     f88:	69 2d       	mov	r22, r9
     f8a:	7b 2f       	mov	r23, r27
     f8c:	8a 2f       	mov	r24, r26
     f8e:	9f 2f       	mov	r25, r31
     f90:	03 e0       	ldi	r16, 0x03	; 3
     f92:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     f96:	2e 27       	eor	r18, r30
     f98:	ab a4       	ldd	r10, Y+43	; 0x2b
     f9a:	bc a4       	ldd	r11, Y+44	; 0x2c
     f9c:	cd a4       	ldd	r12, Y+45	; 0x2d
     f9e:	de a4       	ldd	r13, Y+46	; 0x2e
     fa0:	ef a4       	ldd	r14, Y+47	; 0x2f
     fa2:	f8 a8       	ldd	r15, Y+48	; 0x30
     fa4:	09 a9       	ldd	r16, Y+49	; 0x31
     fa6:	1a a9       	ldd	r17, Y+50	; 0x32
     fa8:	0e 94 0d 14 	call	0x281a	; 0x281a <__adddi3>
     fac:	2b a7       	std	Y+43, r18	; 0x2b
     fae:	3c a7       	std	Y+44, r19	; 0x2c
     fb0:	4d a7       	std	Y+45, r20	; 0x2d
     fb2:	5e a7       	std	Y+46, r21	; 0x2e
     fb4:	6f a7       	std	Y+47, r22	; 0x2f
     fb6:	78 ab       	std	Y+48, r23	; 0x30
     fb8:	89 ab       	std	Y+49, r24	; 0x31
     fba:	9a ab       	std	Y+50, r25	; 0x32
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
     fbc:	d1 01       	movw	r26, r2
     fbe:	50 96       	adiw	r26, 0x10	; 16
     fc0:	8d 90       	ld	r8, X+
     fc2:	9c 90       	ld	r9, X
     fc4:	51 97       	sbiw	r26, 0x11	; 17
     fc6:	28 2d       	mov	r18, r8
     fc8:	39 2d       	mov	r19, r9
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	01 e1       	ldi	r16, 0x11	; 17
     fd8:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
     fdc:	72 2e       	mov	r7, r18
     fde:	39 8f       	std	Y+25, r19	; 0x19
     fe0:	4c a3       	std	Y+36, r20	; 0x24
     fe2:	5d a3       	std	Y+37, r21	; 0x25
     fe4:	6e a3       	std	Y+38, r22	; 0x26
     fe6:	7f a3       	std	Y+39, r23	; 0x27
     fe8:	88 a7       	std	Y+40, r24	; 0x28
     fea:	99 a7       	std	Y+41, r25	; 0x29
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
     fec:	54 96       	adiw	r26, 0x14	; 20
     fee:	0d 91       	ld	r16, X+
     ff0:	1c 91       	ld	r17, X
     ff2:	55 97       	sbiw	r26, 0x15	; 21
     ff4:	a0 2e       	mov	r10, r16
     ff6:	b1 2e       	mov	r11, r17
     ff8:	c1 2c       	mov	r12, r1
     ffa:	d1 2c       	mov	r13, r1
     ffc:	e1 2c       	mov	r14, r1
     ffe:	f1 2c       	mov	r15, r1
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	2d 81       	ldd	r18, Y+5	; 0x05
    1006:	3e 81       	ldd	r19, Y+6	; 0x06
    1008:	4f 81       	ldd	r20, Y+7	; 0x07
    100a:	58 85       	ldd	r21, Y+8	; 0x08
    100c:	6d 85       	ldd	r22, Y+13	; 0x0d
    100e:	76 2f       	mov	r23, r22
    1010:	86 2f       	mov	r24, r22
    1012:	96 2f       	mov	r25, r22
    1014:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
    1018:	f2 2e       	mov	r15, r18
    101a:	03 2f       	mov	r16, r19
    101c:	14 2f       	mov	r17, r20
    101e:	b5 2f       	mov	r27, r21
    1020:	f6 2f       	mov	r31, r22
    1022:	e7 2f       	mov	r30, r23
    1024:	88 2e       	mov	r8, r24
    1026:	99 2e       	mov	r9, r25
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
    102e:	5c f4       	brge	.+22     	; 0x1046 <readMS56XX+0x546>
    1030:	af e3       	ldi	r26, 0x3F	; 63
    1032:	0e 94 16 14 	call	0x282c	; 0x282c <__adddi3_s8>
    1036:	f2 2e       	mov	r15, r18
    1038:	03 2f       	mov	r16, r19
    103a:	14 2f       	mov	r17, r20
    103c:	b5 2f       	mov	r27, r21
    103e:	f6 2f       	mov	r31, r22
    1040:	e7 2f       	mov	r30, r23
    1042:	88 2e       	mov	r8, r24
    1044:	99 2e       	mov	r9, r25
    1046:	2f 2d       	mov	r18, r15
    1048:	30 2f       	mov	r19, r16
    104a:	41 2f       	mov	r20, r17
    104c:	5b 2f       	mov	r21, r27
    104e:	6f 2f       	mov	r22, r31
    1050:	7e 2f       	mov	r23, r30
    1052:	88 2d       	mov	r24, r8
    1054:	99 2d       	mov	r25, r9
    1056:	06 e0       	ldi	r16, 0x06	; 6
    1058:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
    105c:	a2 2e       	mov	r10, r18
    105e:	b3 2e       	mov	r11, r19
    1060:	c4 2e       	mov	r12, r20
    1062:	d5 2e       	mov	r13, r21
    1064:	e6 2e       	mov	r14, r22
    1066:	f7 2e       	mov	r15, r23
    1068:	08 2f       	mov	r16, r24
    106a:	19 2f       	mov	r17, r25
	if (TEMP<-1500)
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
    106c:	27 2d       	mov	r18, r7
    106e:	39 8d       	ldd	r19, Y+25	; 0x19
    1070:	4c a1       	ldd	r20, Y+36	; 0x24
    1072:	5d a1       	ldd	r21, Y+37	; 0x25
    1074:	6e a1       	ldd	r22, Y+38	; 0x26
    1076:	7f a1       	ldd	r23, Y+39	; 0x27
    1078:	88 a5       	ldd	r24, Y+40	; 0x28
    107a:	99 a5       	ldd	r25, Y+41	; 0x29
    107c:	0e 94 0d 14 	call	0x281a	; 0x281a <__adddi3>
    1080:	29 8f       	std	Y+25, r18	; 0x19
    1082:	3c a3       	std	Y+36, r19	; 0x24
    1084:	4d a3       	std	Y+37, r20	; 0x25
    1086:	5e a3       	std	Y+38, r21	; 0x26
    1088:	6f a3       	std	Y+39, r22	; 0x27
    108a:	78 a7       	std	Y+40, r23	; 0x28
    108c:	89 a7       	std	Y+41, r24	; 0x29
    108e:	9f ab       	std	Y+55, r25	; 0x37
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
	
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
    1090:	f1 01       	movw	r30, r2
    1092:	86 84       	ldd	r8, Z+14	; 0x0e
    1094:	97 84       	ldd	r9, Z+15	; 0x0f
    1096:	28 2d       	mov	r18, r8
    1098:	39 2d       	mov	r19, r9
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	00 e1       	ldi	r16, 0x10	; 16
    10a8:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__ashldi3>
    10ac:	72 2e       	mov	r7, r18
    10ae:	38 af       	std	Y+56, r19	; 0x38
    10b0:	49 af       	std	Y+57, r20	; 0x39
    10b2:	5a af       	std	Y+58, r21	; 0x3a
    10b4:	6b af       	std	Y+59, r22	; 0x3b
    10b6:	7c af       	std	Y+60, r23	; 0x3c
    10b8:	8d af       	std	Y+61, r24	; 0x3d
    10ba:	9e af       	std	Y+62, r25	; 0x3e
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
    10bc:	02 89       	ldd	r16, Z+18	; 0x12
    10be:	13 89       	ldd	r17, Z+19	; 0x13
    10c0:	a0 2e       	mov	r10, r16
    10c2:	b1 2e       	mov	r11, r17
    10c4:	c1 2c       	mov	r12, r1
    10c6:	d1 2c       	mov	r13, r1
    10c8:	e1 2c       	mov	r14, r1
    10ca:	f1 2c       	mov	r15, r1
    10cc:	00 e0       	ldi	r16, 0x00	; 0
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	2d 81       	ldd	r18, Y+5	; 0x05
    10d2:	3e 81       	ldd	r19, Y+6	; 0x06
    10d4:	4f 81       	ldd	r20, Y+7	; 0x07
    10d6:	58 85       	ldd	r21, Y+8	; 0x08
    10d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    10da:	76 2f       	mov	r23, r22
    10dc:	86 2f       	mov	r24, r22
    10de:	96 2f       	mov	r25, r22
    10e0:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
		) / ((int64_t)128);
    10e4:	f2 2e       	mov	r15, r18
    10e6:	03 2f       	mov	r16, r19
    10e8:	14 2f       	mov	r17, r20
    10ea:	b5 2f       	mov	r27, r21
    10ec:	f6 2f       	mov	r31, r22
    10ee:	e7 2f       	mov	r30, r23
    10f0:	88 2e       	mov	r8, r24
    10f2:	99 2e       	mov	r9, r25
    10f4:	a0 e0       	ldi	r26, 0x00	; 0
    10f6:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
    10fa:	5c f4       	brge	.+22     	; 0x1112 <readMS56XX+0x612>
    10fc:	af e7       	ldi	r26, 0x7F	; 127
    10fe:	0e 94 16 14 	call	0x282c	; 0x282c <__adddi3_s8>
    1102:	f2 2e       	mov	r15, r18
    1104:	03 2f       	mov	r16, r19
    1106:	14 2f       	mov	r17, r20
    1108:	b5 2f       	mov	r27, r21
    110a:	f6 2f       	mov	r31, r22
    110c:	e7 2f       	mov	r30, r23
    110e:	88 2e       	mov	r8, r24
    1110:	99 2e       	mov	r9, r25
    1112:	2f 2d       	mov	r18, r15
    1114:	30 2f       	mov	r19, r16
    1116:	41 2f       	mov	r20, r17
    1118:	5b 2f       	mov	r21, r27
    111a:	6f 2f       	mov	r22, r31
    111c:	7e 2f       	mov	r23, r30
    111e:	88 2d       	mov	r24, r8
    1120:	99 2d       	mov	r25, r9
    1122:	07 e0       	ldi	r16, 0x07	; 7
    1124:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
    1128:	a2 2e       	mov	r10, r18
    112a:	b3 2e       	mov	r11, r19
    112c:	c4 2e       	mov	r12, r20
    112e:	d5 2e       	mov	r13, r21
    1130:	e6 2e       	mov	r14, r22
    1132:	f7 2e       	mov	r15, r23
    1134:	08 2f       	mov	r16, r24
    1136:	19 2f       	mov	r17, r25
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
	
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
    1138:	27 2d       	mov	r18, r7
    113a:	38 ad       	ldd	r19, Y+56	; 0x38
    113c:	49 ad       	ldd	r20, Y+57	; 0x39
    113e:	5a ad       	ldd	r21, Y+58	; 0x3a
    1140:	6b ad       	ldd	r22, Y+59	; 0x3b
    1142:	7c ad       	ldd	r23, Y+60	; 0x3c
    1144:	8d ad       	ldd	r24, Y+61	; 0x3d
    1146:	9e ad       	ldd	r25, Y+62	; 0x3e
    1148:	0e 94 0d 14 	call	0x281a	; 0x281a <__adddi3>
		
	TEMP -= T2;
	OFF -= OFF2;
	SENS -= SENS2;
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
    114c:	cb a8       	ldd	r12, Y+51	; 0x33
    114e:	dc a8       	ldd	r13, Y+52	; 0x34
    1150:	ed a8       	ldd	r14, Y+53	; 0x35
    1152:	fe a8       	ldd	r15, Y+54	; 0x36
    1154:	56 01       	movw	r10, r12
    1156:	67 01       	movw	r12, r14
    1158:	e1 2c       	mov	r14, r1
    115a:	f1 2c       	mov	r15, r1
    115c:	87 01       	movw	r16, r14
    115e:	ad 82       	std	Y+5, r10	; 0x05
    1160:	be 82       	std	Y+6, r11	; 0x06
    1162:	cf 82       	std	Y+7, r12	; 0x07
    1164:	d8 86       	std	Y+8, r13	; 0x08
    1166:	e9 86       	std	Y+9, r14	; 0x09
    1168:	fa 86       	std	Y+10, r15	; 0x0a
    116a:	0b 87       	std	Y+11, r16	; 0x0b
    116c:	1c 87       	std	Y+12, r17	; 0x0c
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
	OFF -= OFF2;
	SENS -= SENS2;
    116e:	ab a4       	ldd	r10, Y+43	; 0x2b
    1170:	bc a4       	ldd	r11, Y+44	; 0x2c
    1172:	cd a4       	ldd	r12, Y+45	; 0x2d
    1174:	de a4       	ldd	r13, Y+46	; 0x2e
    1176:	ef a4       	ldd	r14, Y+47	; 0x2f
    1178:	f8 a8       	ldd	r15, Y+48	; 0x30
    117a:	09 a9       	ldd	r16, Y+49	; 0x31
    117c:	1a a9       	ldd	r17, Y+50	; 0x32
    117e:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
    1182:	a2 2e       	mov	r10, r18
    1184:	b3 2e       	mov	r11, r19
    1186:	c4 2e       	mov	r12, r20
    1188:	d5 2e       	mov	r13, r21
    118a:	e6 2e       	mov	r14, r22
    118c:	f7 2e       	mov	r15, r23
    118e:	08 2f       	mov	r16, r24
    1190:	19 2f       	mov	r17, r25
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	4f 81       	ldd	r20, Y+7	; 0x07
    1198:	58 85       	ldd	r21, Y+8	; 0x08
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
    11a6:	f2 2e       	mov	r15, r18
    11a8:	03 2f       	mov	r16, r19
    11aa:	14 2f       	mov	r17, r20
    11ac:	b5 2f       	mov	r27, r21
    11ae:	f6 2f       	mov	r31, r22
    11b0:	e7 2f       	mov	r30, r23
    11b2:	58 2e       	mov	r5, r24
    11b4:	69 2e       	mov	r6, r25
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
    11bc:	84 f4       	brge	.+32     	; 0x11de <readMS56XX+0x6de>
    11be:	21 50       	subi	r18, 0x01	; 1
    11c0:	31 09       	sbc	r19, r1
    11c2:	40 4e       	sbci	r20, 0xE0	; 224
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	6f 4f       	sbci	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	f2 2e       	mov	r15, r18
    11d0:	03 2f       	mov	r16, r19
    11d2:	14 2f       	mov	r17, r20
    11d4:	b5 2f       	mov	r27, r21
    11d6:	f6 2f       	mov	r31, r22
    11d8:	e7 2f       	mov	r30, r23
    11da:	58 2e       	mov	r5, r24
    11dc:	69 2e       	mov	r6, r25
    11de:	2f 2d       	mov	r18, r15
    11e0:	30 2f       	mov	r19, r16
    11e2:	41 2f       	mov	r20, r17
    11e4:	5b 2f       	mov	r21, r27
    11e6:	6f 2f       	mov	r22, r31
    11e8:	7e 2f       	mov	r23, r30
    11ea:	85 2d       	mov	r24, r5
    11ec:	96 2d       	mov	r25, r6
    11ee:	05 e1       	ldi	r16, 0x15	; 21
    11f0:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
    11f4:	62 2e       	mov	r6, r18
    11f6:	73 2e       	mov	r7, r19
    11f8:	84 2e       	mov	r8, r20
    11fa:	95 2e       	mov	r9, r21
    11fc:	b6 2f       	mov	r27, r22
    11fe:	a7 2f       	mov	r26, r23
    1200:	f8 2f       	mov	r31, r24
    1202:	e9 2f       	mov	r30, r25
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
	OFF -= OFF2;
    1204:	29 8d       	ldd	r18, Y+25	; 0x19
    1206:	3c a1       	ldd	r19, Y+36	; 0x24
    1208:	4d a1       	ldd	r20, Y+37	; 0x25
    120a:	5e a1       	ldd	r21, Y+38	; 0x26
    120c:	6f a1       	ldd	r22, Y+39	; 0x27
    120e:	78 a5       	ldd	r23, Y+40	; 0x28
    1210:	89 a5       	ldd	r24, Y+41	; 0x29
    1212:	9f a9       	ldd	r25, Y+55	; 0x37
    1214:	a9 88       	ldd	r10, Y+17	; 0x11
    1216:	ba 8c       	ldd	r11, Y+26	; 0x1a
    1218:	cb 8c       	ldd	r12, Y+27	; 0x1b
    121a:	dc 8c       	ldd	r13, Y+28	; 0x1c
    121c:	ed 8c       	ldd	r14, Y+29	; 0x1d
    121e:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1220:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1222:	1a a5       	ldd	r17, Y+42	; 0x2a
    1224:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
    1228:	a2 2e       	mov	r10, r18
    122a:	b3 2e       	mov	r11, r19
    122c:	c4 2e       	mov	r12, r20
    122e:	d5 2e       	mov	r13, r21
    1230:	e6 2e       	mov	r14, r22
    1232:	f7 2e       	mov	r15, r23
    1234:	08 2f       	mov	r16, r24
    1236:	19 2f       	mov	r17, r25
	SENS -= SENS2;
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
    1238:	26 2d       	mov	r18, r6
    123a:	37 2d       	mov	r19, r7
    123c:	48 2d       	mov	r20, r8
    123e:	59 2d       	mov	r21, r9
    1240:	6b 2f       	mov	r22, r27
    1242:	7a 2f       	mov	r23, r26
    1244:	8f 2f       	mov	r24, r31
    1246:	9e 2f       	mov	r25, r30
    1248:	0e 94 22 14 	call	0x2844	; 0x2844 <__subdi3>
    124c:	f2 2e       	mov	r15, r18
    124e:	03 2f       	mov	r16, r19
    1250:	14 2f       	mov	r17, r20
    1252:	b5 2f       	mov	r27, r21
    1254:	f6 2f       	mov	r31, r22
    1256:	e7 2f       	mov	r30, r23
    1258:	58 2e       	mov	r5, r24
    125a:	69 2e       	mov	r6, r25
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	0e 94 2b 14 	call	0x2856	; 0x2856 <__cmpdi2_s8>
    1262:	84 f4       	brge	.+32     	; 0x1284 <readMS56XX+0x784>
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	30 48       	sbci	r19, 0x80	; 128
    1268:	4f 4f       	sbci	r20, 0xFF	; 255
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	6f 4f       	sbci	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	f2 2e       	mov	r15, r18
    1276:	03 2f       	mov	r16, r19
    1278:	14 2f       	mov	r17, r20
    127a:	b5 2f       	mov	r27, r21
    127c:	f6 2f       	mov	r31, r22
    127e:	e7 2f       	mov	r30, r23
    1280:	58 2e       	mov	r5, r24
    1282:	69 2e       	mov	r6, r25
    1284:	2f 2d       	mov	r18, r15
    1286:	30 2f       	mov	r19, r16
    1288:	41 2f       	mov	r20, r17
    128a:	5b 2f       	mov	r21, r27
    128c:	6f 2f       	mov	r22, r31
    128e:	7e 2f       	mov	r23, r30
    1290:	85 2d       	mov	r24, r5
    1292:	96 2d       	mov	r25, r6
    1294:	0f e0       	ldi	r16, 0x0F	; 15
    1296:	0e 94 ef 13 	call	0x27de	; 0x27de <__ashrdi3>
	pressureSensorCalibration.TEMPSENS);*/
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
    129a:	d1 01       	movw	r26, r2
    129c:	14 96       	adiw	r26, 0x04	; 4
    129e:	2c 93       	st	X, r18
    12a0:	14 97       	sbiw	r26, 0x04	; 4
    12a2:	15 96       	adiw	r26, 0x05	; 5
    12a4:	3c 93       	st	X, r19
    12a6:	15 97       	sbiw	r26, 0x05	; 5
    12a8:	16 96       	adiw	r26, 0x06	; 6
    12aa:	4c 93       	st	X, r20
    12ac:	16 97       	sbiw	r26, 0x06	; 6
    12ae:	17 96       	adiw	r26, 0x07	; 7
    12b0:	5c 93       	st	X, r21
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
    12b2:	8d 89       	ldd	r24, Y+21	; 0x15
    12b4:	9e 89       	ldd	r25, Y+22	; 0x16
    12b6:	af 89       	ldd	r26, Y+23	; 0x17
    12b8:	b8 8d       	ldd	r27, Y+24	; 0x18
    12ba:	a8 a0       	ldd	r10, Y+32	; 0x20
    12bc:	b9 a0       	ldd	r11, Y+33	; 0x21
    12be:	ca a0       	ldd	r12, Y+34	; 0x22
    12c0:	db a0       	ldd	r13, Y+35	; 0x23
    12c2:	8a 19       	sub	r24, r10
    12c4:	9b 09       	sbc	r25, r11
    12c6:	ac 09       	sbc	r26, r12
    12c8:	bd 09       	sbc	r27, r13
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
    12ca:	f1 01       	movw	r30, r2
    12cc:	80 87       	std	Z+8, r24	; 0x08
    12ce:	91 87       	std	Z+9, r25	; 0x09
    12d0:	a2 87       	std	Z+10, r26	; 0x0a
    12d2:	b3 87       	std	Z+11, r27	; 0x0b
 }
    12d4:	ee 96       	adiw	r28, 0x3e	; 62
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	5f 90       	pop	r5
    12f8:	4f 90       	pop	r4
    12fa:	3f 90       	pop	r3
    12fc:	2f 90       	pop	r2
    12fe:	08 95       	ret

00001300 <spiread>:
 */

#include "SPI.h"

uint8_t spiread(SPI_t* targetspi)
{
    1300:	fc 01       	movw	r30, r24
	targetspi->DATA = 0xFE;
    1302:	8e ef       	ldi	r24, 0xFE	; 254
    1304:	83 83       	std	Z+3, r24	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait until data actually comes in
    1306:	92 81       	ldd	r25, Z+2	; 0x02
    1308:	99 23       	and	r25, r25
    130a:	ec f7       	brge	.-6      	; 0x1306 <spiread+0x6>
	return targetspi->DATA;
    130c:	83 81       	ldd	r24, Z+3	; 0x03

}
    130e:	08 95       	ret

00001310 <spiwrite>:

void spiwrite(SPI_t* targetspi, uint8_t data)
{
    1310:	fc 01       	movw	r30, r24
	targetspi->DATA = data;
    1312:	63 83       	std	Z+3, r22	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait for data to be sent
    1314:	92 81       	ldd	r25, Z+2	; 0x02
    1316:	99 23       	and	r25, r25
    1318:	ec f7       	brge	.-6      	; 0x1314 <spiwrite+0x4>
}
    131a:	08 95       	ret

0000131c <spiselect>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    131c:	e8 2f       	mov	r30, r24
    131e:	e6 95       	lsr	r30
    1320:	e6 95       	lsr	r30
    1322:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	e4 9f       	mul	r30, r20
    1328:	f0 01       	movw	r30, r0
    132a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    132c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    132e:	87 70       	andi	r24, 0x07	; 7
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <spiselect+0x20>
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <spiselect+0x1c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1340:	46 83       	std	Z+6, r20	; 0x06
    1342:	08 95       	ret

00001344 <spideselect>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1344:	e8 2f       	mov	r30, r24
    1346:	e6 95       	lsr	r30
    1348:	e6 95       	lsr	r30
    134a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	e4 9f       	mul	r30, r20
    1350:	f0 01       	movw	r30, r0
    1352:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1354:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1356:	87 70       	andi	r24, 0x07	; 7
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <spideselect+0x20>
    1360:	44 0f       	add	r20, r20
    1362:	55 1f       	adc	r21, r21
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <spideselect+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1368:	45 83       	std	Z+5, r20	; 0x05
    136a:	08 95       	ret

0000136c <enable_select_pin>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    136c:	e8 2f       	mov	r30, r24
    136e:	e6 95       	lsr	r30
    1370:	e6 95       	lsr	r30
    1372:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1374:	90 e2       	ldi	r25, 0x20	; 32
    1376:	e9 9f       	mul	r30, r25
    1378:	f0 01       	movw	r30, r0
    137a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    137c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    137e:	98 2f       	mov	r25, r24
    1380:	97 70       	andi	r25, 0x07	; 7
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <enable_select_pin+0x20>
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	9a 95       	dec	r25
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <enable_select_pin+0x1c>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1390:	21 83       	std	Z+1, r18	; 0x01
}

void enable_select_pin(ioport_pin_t pin)
{
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	spideselect(pin); //Ensure we default to the deselected state
    1392:	d8 cf       	rjmp	.-80     	; 0x1344 <spideselect>
    1394:	08 95       	ret

00001396 <initializespi>:
}

void initializespi(SPI_t* targetspi, PORT_t* port)
{
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <initializespi+0x12>
    13a6:	30 c1       	rjmp	.+608    	; 0x1608 <initializespi+0x272>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    13a8:	80 3c       	cpi	r24, 0xC0	; 192
    13aa:	91 05       	cpc	r25, r1
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <initializespi+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    13ae:	60 e1       	ldi	r22, 0x10	; 16
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13b6:	28 c1       	rjmp	.+592    	; 0x1608 <initializespi+0x272>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    13b8:	c1 15       	cp	r28, r1
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	d8 07       	cpc	r29, r24
    13be:	29 f4       	brne	.+10     	; 0x13ca <initializespi+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13c8:	1f c1       	rjmp	.+574    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    13ca:	c0 38       	cpi	r28, 0x80	; 128
    13cc:	e1 e0       	ldi	r30, 0x01	; 1
    13ce:	de 07       	cpc	r29, r30
    13d0:	29 f4       	brne	.+10     	; 0x13dc <initializespi+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13da:	16 c1       	rjmp	.+556    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    13dc:	c1 15       	cp	r28, r1
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	df 07       	cpc	r29, r31
    13e2:	29 f4       	brne	.+10     	; 0x13ee <initializespi+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13ec:	0d c1       	rjmp	.+538    	; 0x1608 <initializespi+0x272>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    13ee:	c0 38       	cpi	r28, 0x80	; 128
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	d8 07       	cpc	r29, r24
    13f4:	29 f4       	brne	.+10     	; 0x1400 <initializespi+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13fe:	04 c1       	rjmp	.+520    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1400:	c0 39       	cpi	r28, 0x90	; 144
    1402:	e3 e0       	ldi	r30, 0x03	; 3
    1404:	de 07       	cpc	r29, r30
    1406:	29 f4       	brne	.+10     	; 0x1412 <initializespi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1410:	fb c0       	rjmp	.+502    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1412:	c1 15       	cp	r28, r1
    1414:	f2 e0       	ldi	r31, 0x02	; 2
    1416:	df 07       	cpc	r29, r31
    1418:	29 f4       	brne	.+10     	; 0x1424 <initializespi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1422:	f2 c0       	rjmp	.+484    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1424:	c0 34       	cpi	r28, 0x40	; 64
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	d8 07       	cpc	r29, r24
    142a:	29 f4       	brne	.+10     	; 0x1436 <initializespi+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1434:	e9 c0       	rjmp	.+466    	; 0x1608 <initializespi+0x272>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1436:	c0 32       	cpi	r28, 0x20	; 32
    1438:	e3 e0       	ldi	r30, 0x03	; 3
    143a:	de 07       	cpc	r29, r30
    143c:	29 f4       	brne	.+10     	; 0x1448 <initializespi+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1446:	e0 c0       	rjmp	.+448    	; 0x1608 <initializespi+0x272>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1448:	c1 15       	cp	r28, r1
    144a:	f8 e0       	ldi	r31, 0x08	; 8
    144c:	df 07       	cpc	r29, r31
    144e:	29 f4       	brne	.+10     	; 0x145a <initializespi+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1458:	d7 c0       	rjmp	.+430    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    145a:	c1 15       	cp	r28, r1
    145c:	89 e0       	ldi	r24, 0x09	; 9
    145e:	d8 07       	cpc	r29, r24
    1460:	29 f4       	brne	.+10     	; 0x146c <initializespi+0xd6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    146a:	ce c0       	rjmp	.+412    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    146c:	c1 15       	cp	r28, r1
    146e:	ea e0       	ldi	r30, 0x0A	; 10
    1470:	de 07       	cpc	r29, r30
    1472:	29 f4       	brne	.+10     	; 0x147e <initializespi+0xe8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    147c:	c5 c0       	rjmp	.+394    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    147e:	c1 15       	cp	r28, r1
    1480:	fb e0       	ldi	r31, 0x0B	; 11
    1482:	df 07       	cpc	r29, r31
    1484:	29 f4       	brne	.+10     	; 0x1490 <initializespi+0xfa>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    148e:	bc c0       	rjmp	.+376    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1490:	c0 34       	cpi	r28, 0x40	; 64
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	d8 07       	cpc	r29, r24
    1496:	29 f4       	brne	.+10     	; 0x14a2 <initializespi+0x10c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14a0:	b3 c0       	rjmp	.+358    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    14a2:	c0 34       	cpi	r28, 0x40	; 64
    14a4:	e9 e0       	ldi	r30, 0x09	; 9
    14a6:	de 07       	cpc	r29, r30
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <initializespi+0x11e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14b2:	aa c0       	rjmp	.+340    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    14b4:	c0 34       	cpi	r28, 0x40	; 64
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	df 07       	cpc	r29, r31
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <initializespi+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    14bc:	62 e0       	ldi	r22, 0x02	; 2
    14be:	85 e0       	ldi	r24, 0x05	; 5
    14c0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14c4:	a1 c0       	rjmp	.+322    	; 0x1608 <initializespi+0x272>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    14c6:	c0 39       	cpi	r28, 0x90	; 144
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	d8 07       	cpc	r29, r24
    14cc:	29 f4       	brne	.+10     	; 0x14d8 <initializespi+0x142>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14d6:	98 c0       	rjmp	.+304    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    14d8:	c0 39       	cpi	r28, 0x90	; 144
    14da:	e9 e0       	ldi	r30, 0x09	; 9
    14dc:	de 07       	cpc	r29, r30
    14de:	29 f4       	brne	.+10     	; 0x14ea <initializespi+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    14e0:	64 e0       	ldi	r22, 0x04	; 4
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14e8:	8f c0       	rjmp	.+286    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    14ea:	c0 39       	cpi	r28, 0x90	; 144
    14ec:	fa e0       	ldi	r31, 0x0A	; 10
    14ee:	df 07       	cpc	r29, r31
    14f0:	29 f4       	brne	.+10     	; 0x14fc <initializespi+0x166>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    14f2:	64 e0       	ldi	r22, 0x04	; 4
    14f4:	85 e0       	ldi	r24, 0x05	; 5
    14f6:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14fa:	86 c0       	rjmp	.+268    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    14fc:	c0 39       	cpi	r28, 0x90	; 144
    14fe:	8b e0       	ldi	r24, 0x0B	; 11
    1500:	d8 07       	cpc	r29, r24
    1502:	29 f4       	brne	.+10     	; 0x150e <initializespi+0x178>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1504:	64 e0       	ldi	r22, 0x04	; 4
    1506:	86 e0       	ldi	r24, 0x06	; 6
    1508:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    150c:	7d c0       	rjmp	.+250    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    150e:	c0 3c       	cpi	r28, 0xC0	; 192
    1510:	e8 e0       	ldi	r30, 0x08	; 8
    1512:	de 07       	cpc	r29, r30
    1514:	29 f4       	brne	.+10     	; 0x1520 <initializespi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1516:	68 e0       	ldi	r22, 0x08	; 8
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    151e:	74 c0       	rjmp	.+232    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1520:	c0 3c       	cpi	r28, 0xC0	; 192
    1522:	f9 e0       	ldi	r31, 0x09	; 9
    1524:	df 07       	cpc	r29, r31
    1526:	29 f4       	brne	.+10     	; 0x1532 <initializespi+0x19c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1528:	68 e0       	ldi	r22, 0x08	; 8
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1530:	6b c0       	rjmp	.+214    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1532:	c0 3c       	cpi	r28, 0xC0	; 192
    1534:	8a e0       	ldi	r24, 0x0A	; 10
    1536:	d8 07       	cpc	r29, r24
    1538:	29 f4       	brne	.+10     	; 0x1544 <initializespi+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    153a:	68 e0       	ldi	r22, 0x08	; 8
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1542:	62 c0       	rjmp	.+196    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1544:	c0 3c       	cpi	r28, 0xC0	; 192
    1546:	eb e0       	ldi	r30, 0x0B	; 11
    1548:	de 07       	cpc	r29, r30
    154a:	29 f4       	brne	.+10     	; 0x1556 <initializespi+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    154c:	68 e0       	ldi	r22, 0x08	; 8
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1554:	59 c0       	rjmp	.+178    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1556:	c0 3a       	cpi	r28, 0xA0	; 160
    1558:	f8 e0       	ldi	r31, 0x08	; 8
    155a:	df 07       	cpc	r29, r31
    155c:	29 f4       	brne	.+10     	; 0x1568 <initializespi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    155e:	60 e1       	ldi	r22, 0x10	; 16
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1566:	50 c0       	rjmp	.+160    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1568:	c0 3a       	cpi	r28, 0xA0	; 160
    156a:	89 e0       	ldi	r24, 0x09	; 9
    156c:	d8 07       	cpc	r29, r24
    156e:	29 f4       	brne	.+10     	; 0x157a <initializespi+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1570:	60 e1       	ldi	r22, 0x10	; 16
    1572:	84 e0       	ldi	r24, 0x04	; 4
    1574:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1578:	47 c0       	rjmp	.+142    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    157a:	c0 3a       	cpi	r28, 0xA0	; 160
    157c:	ea e0       	ldi	r30, 0x0A	; 10
    157e:	de 07       	cpc	r29, r30
    1580:	29 f4       	brne	.+10     	; 0x158c <initializespi+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1582:	60 e1       	ldi	r22, 0x10	; 16
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    158a:	3e c0       	rjmp	.+124    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    158c:	c0 3a       	cpi	r28, 0xA0	; 160
    158e:	fb e0       	ldi	r31, 0x0B	; 11
    1590:	df 07       	cpc	r29, r31
    1592:	29 f4       	brne	.+10     	; 0x159e <initializespi+0x208>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1594:	60 e1       	ldi	r22, 0x10	; 16
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    159c:	35 c0       	rjmp	.+106    	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    159e:	c0 3b       	cpi	r28, 0xB0	; 176
    15a0:	88 e0       	ldi	r24, 0x08	; 8
    15a2:	d8 07       	cpc	r29, r24
    15a4:	29 f4       	brne	.+10     	; 0x15b0 <initializespi+0x21a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    15a6:	60 e2       	ldi	r22, 0x20	; 32
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15ae:	2c c0       	rjmp	.+88     	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    15b0:	c0 3b       	cpi	r28, 0xB0	; 176
    15b2:	e9 e0       	ldi	r30, 0x09	; 9
    15b4:	de 07       	cpc	r29, r30
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <initializespi+0x22c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    15b8:	60 e2       	ldi	r22, 0x20	; 32
    15ba:	84 e0       	ldi	r24, 0x04	; 4
    15bc:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15c0:	23 c0       	rjmp	.+70     	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    15c2:	c0 3b       	cpi	r28, 0xB0	; 176
    15c4:	fa e0       	ldi	r31, 0x0A	; 10
    15c6:	df 07       	cpc	r29, r31
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <initializespi+0x23e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    15ca:	60 e2       	ldi	r22, 0x20	; 32
    15cc:	85 e0       	ldi	r24, 0x05	; 5
    15ce:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15d2:	1a c0       	rjmp	.+52     	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    15d4:	c0 3b       	cpi	r28, 0xB0	; 176
    15d6:	8b e0       	ldi	r24, 0x0B	; 11
    15d8:	d8 07       	cpc	r29, r24
    15da:	29 f4       	brne	.+10     	; 0x15e6 <initializespi+0x250>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    15dc:	60 e2       	ldi	r22, 0x20	; 32
    15de:	86 e0       	ldi	r24, 0x06	; 6
    15e0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <initializespi+0x272>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    15e6:	c0 38       	cpi	r28, 0x80	; 128
    15e8:	e4 e0       	ldi	r30, 0x04	; 4
    15ea:	de 07       	cpc	r29, r30
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <initializespi+0x262>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    15ee:	60 e4       	ldi	r22, 0x40	; 64
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <initializespi+0x272>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    15f8:	c0 3a       	cpi	r28, 0xA0	; 160
    15fa:	f4 e0       	ldi	r31, 0x04	; 4
    15fc:	df 07       	cpc	r29, r31
    15fe:	21 f4       	brne	.+8      	; 0x1608 <initializespi+0x272>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1600:	60 e4       	ldi	r22, 0x40	; 64
    1602:	85 e0       	ldi	r24, 0x05	; 5
    1604:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
	*	Initialize pins
	*		MOSI direction to out (Master out, slave in) (pin 5)
	*		MISO direction to in (Master in, slave out) (pin 6)
	*		SCK direction to out? (clock) (pin 7)
	*/
	port->DIRSET |= 0b10110000;  //4 (default SS), 5 (MOSI) & 7 (SCK) to out
    1608:	f8 01       	movw	r30, r16
    160a:	81 81       	ldd	r24, Z+1	; 0x01
    160c:	80 6b       	ori	r24, 0xB0	; 176
    160e:	81 83       	std	Z+1, r24	; 0x01
	port->DIRSET &= 0b10111111; //6 (MISO) in
    1610:	81 81       	ldd	r24, Z+1	; 0x01
    1612:	8f 7b       	andi	r24, 0xBF	; 191
    1614:	81 83       	std	Z+1, r24	; 0x01
	port->OUT |= 0b10110000; //Setting 4 to high deselects it, in case it isn't the select we're using
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	80 6b       	ori	r24, 0xB0	; 176
    161a:	84 83       	std	Z+4, r24	; 0x04
	port->IN &= 0b10111111;
    161c:	80 85       	ldd	r24, Z+8	; 0x08
    161e:	8f 7b       	andi	r24, 0xBF	; 191
    1620:	80 87       	std	Z+8, r24	; 0x08
	*	6 coefficients are stored in PROM, use them for converting data from D1 and D2 into accurate temperature and pressure
	*	Clock polarity and phase modes 0 and 3 are both acceptable
	*
	*/

	targetspi->CTRL = 0b11010000;
    1622:	80 ed       	ldi	r24, 0xD0	; 208
    1624:	88 83       	st	Y, r24
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <board_init>:
    1630:	08 95       	ret

00001632 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1638:	0e 94 2b 02 	call	0x456	; 0x456 <usart_getchar>
    163c:	88 83       	st	Y, r24
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1644:	0c 94 23 02 	jmp	0x446	; 0x446 <usart_putchar>
}
    1648:	08 95       	ret

0000164a <UART_computer_init>:

void UART_computer_init(USART_t* comms_usart, PORT_t* comms_port, ioport_pin_t tx_pin, ioport_pin_t rx_pin)
/* This sets up the UART pins that are used by the XBee (if plugged into a one month board), and by the computer during debugging
Call during startup.
Based on Adam's code template for one month, but with RX pin configuration. */
{
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	27 97       	sbiw	r28, 0x07	; 7
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	8c 01       	movw	r16, r24
    1666:	f2 2e       	mov	r15, r18
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1668:	84 2f       	mov	r24, r20
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	cc 24       	eor	r12, r12
    166e:	c3 94       	inc	r12
    1670:	d1 2c       	mov	r13, r1
    1672:	b6 01       	movw	r22, r12
    1674:	02 c0       	rjmp	.+4      	; 0x167a <UART_computer_init+0x30>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <UART_computer_init+0x2c>
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    167e:	46 95       	lsr	r20
    1680:	46 95       	lsr	r20
    1682:	46 95       	lsr	r20
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1684:	20 e2       	ldi	r18, 0x20	; 32
    1686:	42 9f       	mul	r20, r18
    1688:	c0 01       	movw	r24, r0
    168a:	11 24       	eor	r1, r1
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	9a 5f       	subi	r25, 0xFA	; 250
    1692:	0e 94 ca 01 	call	0x394	; 0x394 <ioport_configure_port_pin>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1696:	8f 2d       	mov	r24, r15
    1698:	87 70       	andi	r24, 0x07	; 7
    169a:	b6 01       	movw	r22, r12
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <UART_computer_init+0x58>
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	8a 95       	dec	r24
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <UART_computer_init+0x54>
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    16a6:	f6 94       	lsr	r15
    16a8:	f6 94       	lsr	r15
    16aa:	f6 94       	lsr	r15
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    16ac:	20 e2       	ldi	r18, 0x20	; 32
    16ae:	f2 9e       	mul	r15, r18
    16b0:	c0 01       	movw	r24, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	9a 5f       	subi	r25, 0xFA	; 250
    16ba:	0e 94 ca 01 	call	0x394	; 0x394 <ioport_configure_port_pin>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <UART_computer_init+0x7c>
    16c4:	d4 c1       	rjmp	.+936    	; 0x1a6e <UART_computer_init+0x424>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    16c6:	00 3c       	cpi	r16, 0xC0	; 192
    16c8:	11 05       	cpc	r17, r1
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <UART_computer_init+0x8c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    16cc:	60 e1       	ldi	r22, 0x10	; 16
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16d4:	cc c1       	rjmp	.+920    	; 0x1a6e <UART_computer_init+0x424>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    16d6:	01 15       	cp	r16, r1
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	18 07       	cpc	r17, r24
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <UART_computer_init+0x9e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    16de:	64 e0       	ldi	r22, 0x04	; 4
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16e6:	c3 c1       	rjmp	.+902    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    16e8:	00 38       	cpi	r16, 0x80	; 128
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	12 07       	cpc	r17, r18
    16ee:	29 f4       	brne	.+10     	; 0x16fa <UART_computer_init+0xb0>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16f8:	ba c1       	rjmp	.+884    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    16fa:	01 15       	cp	r16, r1
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	18 07       	cpc	r17, r24
    1700:	29 f4       	brne	.+10     	; 0x170c <UART_computer_init+0xc2>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    170a:	b1 c1       	rjmp	.+866    	; 0x1a6e <UART_computer_init+0x424>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    170c:	00 38       	cpi	r16, 0x80	; 128
    170e:	23 e0       	ldi	r18, 0x03	; 3
    1710:	12 07       	cpc	r17, r18
    1712:	29 f4       	brne	.+10     	; 0x171e <UART_computer_init+0xd4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    171c:	a8 c1       	rjmp	.+848    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    171e:	00 39       	cpi	r16, 0x90	; 144
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	18 07       	cpc	r17, r24
    1724:	29 f4       	brne	.+10     	; 0x1730 <UART_computer_init+0xe6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    172e:	9f c1       	rjmp	.+830    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1730:	01 15       	cp	r16, r1
    1732:	22 e0       	ldi	r18, 0x02	; 2
    1734:	12 07       	cpc	r17, r18
    1736:	29 f4       	brne	.+10     	; 0x1742 <UART_computer_init+0xf8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1740:	96 c1       	rjmp	.+812    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1742:	00 34       	cpi	r16, 0x40	; 64
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	18 07       	cpc	r17, r24
    1748:	29 f4       	brne	.+10     	; 0x1754 <UART_computer_init+0x10a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1752:	8d c1       	rjmp	.+794    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1754:	00 32       	cpi	r16, 0x20	; 32
    1756:	23 e0       	ldi	r18, 0x03	; 3
    1758:	12 07       	cpc	r17, r18
    175a:	29 f4       	brne	.+10     	; 0x1766 <UART_computer_init+0x11c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    175c:	64 e0       	ldi	r22, 0x04	; 4
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1764:	84 c1       	rjmp	.+776    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1766:	01 15       	cp	r16, r1
    1768:	88 e0       	ldi	r24, 0x08	; 8
    176a:	18 07       	cpc	r17, r24
    176c:	29 f4       	brne	.+10     	; 0x1778 <UART_computer_init+0x12e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	83 e0       	ldi	r24, 0x03	; 3
    1772:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1776:	7b c1       	rjmp	.+758    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1778:	01 15       	cp	r16, r1
    177a:	29 e0       	ldi	r18, 0x09	; 9
    177c:	12 07       	cpc	r17, r18
    177e:	29 f4       	brne	.+10     	; 0x178a <UART_computer_init+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1788:	72 c1       	rjmp	.+740    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    178a:	01 15       	cp	r16, r1
    178c:	8a e0       	ldi	r24, 0x0A	; 10
    178e:	18 07       	cpc	r17, r24
    1790:	29 f4       	brne	.+10     	; 0x179c <UART_computer_init+0x152>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	85 e0       	ldi	r24, 0x05	; 5
    1796:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    179a:	69 c1       	rjmp	.+722    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    179c:	01 15       	cp	r16, r1
    179e:	2b e0       	ldi	r18, 0x0B	; 11
    17a0:	12 07       	cpc	r17, r18
    17a2:	29 f4       	brne	.+10     	; 0x17ae <UART_computer_init+0x164>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17ac:	60 c1       	rjmp	.+704    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    17ae:	00 34       	cpi	r16, 0x40	; 64
    17b0:	88 e0       	ldi	r24, 0x08	; 8
    17b2:	18 07       	cpc	r17, r24
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <UART_computer_init+0x176>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17be:	57 c1       	rjmp	.+686    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    17c0:	00 34       	cpi	r16, 0x40	; 64
    17c2:	29 e0       	ldi	r18, 0x09	; 9
    17c4:	12 07       	cpc	r17, r18
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <UART_computer_init+0x188>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17d0:	4e c1       	rjmp	.+668    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    17d2:	00 34       	cpi	r16, 0x40	; 64
    17d4:	8a e0       	ldi	r24, 0x0A	; 10
    17d6:	18 07       	cpc	r17, r24
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <UART_computer_init+0x19a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    17da:	62 e0       	ldi	r22, 0x02	; 2
    17dc:	85 e0       	ldi	r24, 0x05	; 5
    17de:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17e2:	45 c1       	rjmp	.+650    	; 0x1a6e <UART_computer_init+0x424>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    17e4:	00 39       	cpi	r16, 0x90	; 144
    17e6:	28 e0       	ldi	r18, 0x08	; 8
    17e8:	12 07       	cpc	r17, r18
    17ea:	29 f4       	brne	.+10     	; 0x17f6 <UART_computer_init+0x1ac>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17f4:	3c c1       	rjmp	.+632    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    17f6:	00 39       	cpi	r16, 0x90	; 144
    17f8:	89 e0       	ldi	r24, 0x09	; 9
    17fa:	18 07       	cpc	r17, r24
    17fc:	29 f4       	brne	.+10     	; 0x1808 <UART_computer_init+0x1be>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    17fe:	64 e0       	ldi	r22, 0x04	; 4
    1800:	84 e0       	ldi	r24, 0x04	; 4
    1802:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1806:	33 c1       	rjmp	.+614    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1808:	00 39       	cpi	r16, 0x90	; 144
    180a:	2a e0       	ldi	r18, 0x0A	; 10
    180c:	12 07       	cpc	r17, r18
    180e:	29 f4       	brne	.+10     	; 0x181a <UART_computer_init+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1810:	64 e0       	ldi	r22, 0x04	; 4
    1812:	85 e0       	ldi	r24, 0x05	; 5
    1814:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1818:	2a c1       	rjmp	.+596    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    181a:	00 39       	cpi	r16, 0x90	; 144
    181c:	8b e0       	ldi	r24, 0x0B	; 11
    181e:	18 07       	cpc	r17, r24
    1820:	29 f4       	brne	.+10     	; 0x182c <UART_computer_init+0x1e2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    182a:	21 c1       	rjmp	.+578    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    182c:	00 3c       	cpi	r16, 0xC0	; 192
    182e:	28 e0       	ldi	r18, 0x08	; 8
    1830:	12 07       	cpc	r17, r18
    1832:	29 f4       	brne	.+10     	; 0x183e <UART_computer_init+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1834:	68 e0       	ldi	r22, 0x08	; 8
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    183c:	18 c1       	rjmp	.+560    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    183e:	00 3c       	cpi	r16, 0xC0	; 192
    1840:	89 e0       	ldi	r24, 0x09	; 9
    1842:	18 07       	cpc	r17, r24
    1844:	29 f4       	brne	.+10     	; 0x1850 <UART_computer_init+0x206>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1846:	68 e0       	ldi	r22, 0x08	; 8
    1848:	84 e0       	ldi	r24, 0x04	; 4
    184a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    184e:	0f c1       	rjmp	.+542    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1850:	00 3c       	cpi	r16, 0xC0	; 192
    1852:	2a e0       	ldi	r18, 0x0A	; 10
    1854:	12 07       	cpc	r17, r18
    1856:	29 f4       	brne	.+10     	; 0x1862 <UART_computer_init+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1858:	68 e0       	ldi	r22, 0x08	; 8
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1860:	06 c1       	rjmp	.+524    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1862:	00 3c       	cpi	r16, 0xC0	; 192
    1864:	8b e0       	ldi	r24, 0x0B	; 11
    1866:	18 07       	cpc	r17, r24
    1868:	29 f4       	brne	.+10     	; 0x1874 <UART_computer_init+0x22a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    186a:	68 e0       	ldi	r22, 0x08	; 8
    186c:	86 e0       	ldi	r24, 0x06	; 6
    186e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1872:	fd c0       	rjmp	.+506    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1874:	00 3a       	cpi	r16, 0xA0	; 160
    1876:	28 e0       	ldi	r18, 0x08	; 8
    1878:	12 07       	cpc	r17, r18
    187a:	39 f5       	brne	.+78     	; 0x18ca <UART_computer_init+0x280>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    187c:	60 e1       	ldi	r22, 0x10	; 16
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1884:	80 ea       	ldi	r24, 0xA0	; 160
    1886:	98 e0       	ldi	r25, 0x08	; 8
    1888:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <stdio_base>
    188c:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1890:	82 e2       	ldi	r24, 0x22	; 34
    1892:	9b e0       	ldi	r25, 0x0B	; 11
    1894:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    1898:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    189c:	89 e1       	ldi	r24, 0x19	; 25
    189e:	9b e0       	ldi	r25, 0x0B	; 11
    18a0:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    18a4:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    18a8:	e6 e0       	ldi	r30, 0x06	; 6
    18aa:	f0 e2       	ldi	r31, 0x20	; 32
    18ac:	84 81       	ldd	r24, Z+4	; 0x04
    18ae:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    18b0:	85 81       	ldd	r24, Z+5	; 0x05
    18b2:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    18b4:	86 81       	ldd	r24, Z+6	; 0x06
    18b6:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	a2 81       	ldd	r26, Z+2	; 0x02
    18be:	b3 81       	ldd	r27, Z+3	; 0x03
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	ab 83       	std	Y+3, r26	; 0x03
    18c6:	bc 83       	std	Y+4, r27	; 0x04
    18c8:	76 c0       	rjmp	.+236    	; 0x19b6 <UART_computer_init+0x36c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    18ca:	00 3a       	cpi	r16, 0xA0	; 160
    18cc:	89 e0       	ldi	r24, 0x09	; 9
    18ce:	18 07       	cpc	r17, r24
    18d0:	29 f4       	brne	.+10     	; 0x18dc <UART_computer_init+0x292>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    18d2:	60 e1       	ldi	r22, 0x10	; 16
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    18da:	c9 c0       	rjmp	.+402    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    18dc:	00 3a       	cpi	r16, 0xA0	; 160
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	12 07       	cpc	r17, r18
    18e2:	29 f4       	brne	.+10     	; 0x18ee <UART_computer_init+0x2a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    18e4:	60 e1       	ldi	r22, 0x10	; 16
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    18ec:	c0 c0       	rjmp	.+384    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    18ee:	00 3a       	cpi	r16, 0xA0	; 160
    18f0:	8b e0       	ldi	r24, 0x0B	; 11
    18f2:	18 07       	cpc	r17, r24
    18f4:	29 f4       	brne	.+10     	; 0x1900 <UART_computer_init+0x2b6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    18f6:	60 e1       	ldi	r22, 0x10	; 16
    18f8:	86 e0       	ldi	r24, 0x06	; 6
    18fa:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    18fe:	b7 c0       	rjmp	.+366    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1900:	00 3b       	cpi	r16, 0xB0	; 176
    1902:	28 e0       	ldi	r18, 0x08	; 8
    1904:	12 07       	cpc	r17, r18
    1906:	29 f4       	brne	.+10     	; 0x1912 <UART_computer_init+0x2c8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1908:	60 e2       	ldi	r22, 0x20	; 32
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1910:	ae c0       	rjmp	.+348    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1912:	00 3b       	cpi	r16, 0xB0	; 176
    1914:	89 e0       	ldi	r24, 0x09	; 9
    1916:	18 07       	cpc	r17, r24
    1918:	29 f4       	brne	.+10     	; 0x1924 <UART_computer_init+0x2da>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    191a:	60 e2       	ldi	r22, 0x20	; 32
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1922:	a5 c0       	rjmp	.+330    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1924:	00 3b       	cpi	r16, 0xB0	; 176
    1926:	2a e0       	ldi	r18, 0x0A	; 10
    1928:	12 07       	cpc	r17, r18
    192a:	29 f4       	brne	.+10     	; 0x1936 <UART_computer_init+0x2ec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    192c:	60 e2       	ldi	r22, 0x20	; 32
    192e:	85 e0       	ldi	r24, 0x05	; 5
    1930:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1934:	9c c0       	rjmp	.+312    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1936:	00 3b       	cpi	r16, 0xB0	; 176
    1938:	8b e0       	ldi	r24, 0x0B	; 11
    193a:	18 07       	cpc	r17, r24
    193c:	29 f4       	brne	.+10     	; 0x1948 <UART_computer_init+0x2fe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    193e:	60 e2       	ldi	r22, 0x20	; 32
    1940:	86 e0       	ldi	r24, 0x06	; 6
    1942:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1946:	93 c0       	rjmp	.+294    	; 0x1a6e <UART_computer_init+0x424>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1948:	00 38       	cpi	r16, 0x80	; 128
    194a:	24 e0       	ldi	r18, 0x04	; 4
    194c:	12 07       	cpc	r17, r18
    194e:	29 f4       	brne	.+10     	; 0x195a <UART_computer_init+0x310>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1950:	60 e4       	ldi	r22, 0x40	; 64
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1958:	8a c0       	rjmp	.+276    	; 0x1a6e <UART_computer_init+0x424>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    195a:	00 3a       	cpi	r16, 0xA0	; 160
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	18 07       	cpc	r17, r24
    1960:	29 f4       	brne	.+10     	; 0x196c <UART_computer_init+0x322>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1962:	60 e4       	ldi	r22, 0x40	; 64
    1964:	85 e0       	ldi	r24, 0x05	; 5
    1966:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    196a:	81 c0       	rjmp	.+258    	; 0x1a6e <UART_computer_init+0x424>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    196c:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <stdio_base>
    1970:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1974:	82 e2       	ldi	r24, 0x22	; 34
    1976:	9b e0       	ldi	r25, 0x0B	; 11
    1978:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    197c:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1980:	89 e1       	ldi	r24, 0x19	; 25
    1982:	9b e0       	ldi	r25, 0x0B	; 11
    1984:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    1988:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    198c:	e6 e0       	ldi	r30, 0x06	; 6
    198e:	f0 e2       	ldi	r31, 0x20	; 32
    1990:	84 81       	ldd	r24, Z+4	; 0x04
    1992:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1994:	85 81       	ldd	r24, Z+5	; 0x05
    1996:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1998:	86 81       	ldd	r24, Z+6	; 0x06
    199a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	a2 81       	ldd	r26, Z+2	; 0x02
    19a2:	b3 81       	ldd	r27, Z+3	; 0x03
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	ab 83       	std	Y+3, r26	; 0x03
    19aa:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    19ac:	78 01       	movw	r14, r16
    19ae:	00 3a       	cpi	r16, 0xA0	; 160
    19b0:	28 e0       	ldi	r18, 0x08	; 8
    19b2:	12 07       	cpc	r17, r18
    19b4:	59 f4       	brne	.+22     	; 0x19cc <UART_computer_init+0x382>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    19b6:	60 e1       	ldi	r22, 0x10	; 16
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    19be:	0f 2e       	mov	r0, r31
    19c0:	f0 ea       	ldi	r31, 0xA0	; 160
    19c2:	ef 2e       	mov	r14, r31
    19c4:	f8 e0       	ldi	r31, 0x08	; 8
    19c6:	ff 2e       	mov	r15, r31
    19c8:	f0 2d       	mov	r31, r0
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <UART_computer_init+0x3aa>
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    19cc:	80 eb       	ldi	r24, 0xB0	; 176
    19ce:	e8 16       	cp	r14, r24
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	f8 06       	cpc	r15, r24
    19d4:	29 f4       	brne	.+10     	; 0x19e0 <UART_computer_init+0x396>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    19d6:	60 e2       	ldi	r22, 0x20	; 32
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <UART_computer_init+0x3be>
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    19e0:	20 ea       	ldi	r18, 0xA0	; 160
    19e2:	e2 16       	cp	r14, r18
    19e4:	29 e0       	ldi	r18, 0x09	; 9
    19e6:	f2 06       	cpc	r15, r18
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <UART_computer_init+0x3aa>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    19ea:	60 e1       	ldi	r22, 0x10	; 16
    19ec:	84 e0       	ldi	r24, 0x04	; 4
    19ee:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <UART_computer_init+0x3d2>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    19f4:	80 eb       	ldi	r24, 0xB0	; 176
    19f6:	e8 16       	cp	r14, r24
    19f8:	89 e0       	ldi	r24, 0x09	; 9
    19fa:	f8 06       	cpc	r15, r24
    19fc:	29 f4       	brne	.+10     	; 0x1a08 <UART_computer_init+0x3be>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    19fe:	60 e2       	ldi	r22, 0x20	; 32
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <UART_computer_init+0x3e6>
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    1a08:	20 ea       	ldi	r18, 0xA0	; 160
    1a0a:	e2 16       	cp	r14, r18
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	f2 06       	cpc	r15, r18
    1a10:	29 f4       	brne	.+10     	; 0x1a1c <UART_computer_init+0x3d2>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1a12:	60 e1       	ldi	r22, 0x10	; 16
    1a14:	85 e0       	ldi	r24, 0x05	; 5
    1a16:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <UART_computer_init+0x3fa>
	}
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
    1a1c:	80 eb       	ldi	r24, 0xB0	; 176
    1a1e:	e8 16       	cp	r14, r24
    1a20:	8a e0       	ldi	r24, 0x0A	; 10
    1a22:	f8 06       	cpc	r15, r24
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <UART_computer_init+0x3e6>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
    1a26:	60 e2       	ldi	r22, 0x20	; 32
    1a28:	85 e0       	ldi	r24, 0x05	; 5
    1a2a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1a2e:	13 c0       	rjmp	.+38     	; 0x1a56 <UART_computer_init+0x40c>
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    1a30:	20 ea       	ldi	r18, 0xA0	; 160
    1a32:	e2 16       	cp	r14, r18
    1a34:	2b e0       	ldi	r18, 0x0B	; 11
    1a36:	f2 06       	cpc	r15, r18
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <UART_computer_init+0x3fa>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    1a3a:	60 e1       	ldi	r22, 0x10	; 16
    1a3c:	86 e0       	ldi	r24, 0x06	; 6
    1a3e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <UART_computer_init+0x40c>
	}
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
    1a44:	80 eb       	ldi	r24, 0xB0	; 176
    1a46:	e8 16       	cp	r14, r24
    1a48:	8b e0       	ldi	r24, 0x0B	; 11
    1a4a:	f8 06       	cpc	r15, r24
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <UART_computer_init+0x40c>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
    1a4e:	60 e2       	ldi	r22, 0x20	; 32
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1a56:	be 01       	movw	r22, r28
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	0e 94 4a 03 	call	0x694	; 0x694 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1a62:	62 ef       	ldi	r22, 0xF2	; 242
    1a64:	71 e0       	ldi	r23, 0x01	; 1
    1a66:	8b e0       	ldi	r24, 0x0B	; 11
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	fe d7       	rcall	.+4092   	; 0x2a68 <fdevopen>
    1a6c:	22 c0       	rjmp	.+68     	; 0x1ab2 <UART_computer_init+0x468>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1a6e:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <stdio_base>
    1a72:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1a76:	82 e2       	ldi	r24, 0x22	; 34
    1a78:	9b e0       	ldi	r25, 0x0B	; 11
    1a7a:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    1a7e:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1a82:	89 e1       	ldi	r24, 0x19	; 25
    1a84:	9b e0       	ldi	r25, 0x0B	; 11
    1a86:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    1a8a:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1a8e:	e6 e0       	ldi	r30, 0x06	; 6
    1a90:	f0 e2       	ldi	r31, 0x20	; 32
    1a92:	84 81       	ldd	r24, Z+4	; 0x04
    1a94:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1a96:	85 81       	ldd	r24, Z+5	; 0x05
    1a98:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1a9a:	86 81       	ldd	r24, Z+6	; 0x06
    1a9c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	a2 81       	ldd	r26, Z+2	; 0x02
    1aa4:	b3 81       	ldd	r27, Z+3	; 0x03
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	ab 83       	std	Y+3, r26	; 0x03
    1aac:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1aae:	78 01       	movw	r14, r16
    1ab0:	8d cf       	rjmp	.-230    	; 0x19cc <UART_computer_init+0x382>
	gpio_configure_pin(tx_pin, IOPORT_DIR_OUTPUT);
	gpio_configure_pin(rx_pin, IOPORT_DIR_INPUT);
	sysclk_enable_peripheral_clock(comms_usart); 
	
	stdio_serial_init(comms_usart, &options);
    1ab2:	27 96       	adiw	r28, 0x07	; 7
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	08 95       	ret

00001aca <main>:
#define COMMS_USART				USARTC0


//Example usage of MS5611/07 driver for One Monthers
int main (void)
{
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	6a 97       	sbiw	r28, 0x1a	; 26
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	de bf       	out	0x3e, r29	; 62
	board_init();
    1ad8:	ab dd       	rcall	.-1194   	; 0x1630 <board_init>
	sysclk_init();
    1ada:	0e 94 97 01 	call	0x32e	; 0x32e <sysclk_init>
	UART_computer_init(&COMMS_USART, 
    1ade:	22 e1       	ldi	r18, 0x12	; 18
    1ae0:	43 e1       	ldi	r20, 0x13	; 19
    1ae2:	60 e4       	ldi	r22, 0x40	; 64
    1ae4:	76 e0       	ldi	r23, 0x06	; 6
    1ae6:	80 ea       	ldi	r24, 0xA0	; 160
    1ae8:	98 e0       	ldi	r25, 0x08	; 8
    1aea:	af dd       	rcall	.-1186   	; 0x164a <UART_computer_init>
						&PORTC, 
						IOPORT_CREATE_PIN(PORTC, 3), 
						IOPORT_CREATE_PIN(PORTC, 2));
	
	MS56XX_t pressure_sensor = define_new_MS56XX_default_OSR(MS5607, &SPIC, IOPORT_CREATE_PIN(PORTC, 4));
    1aec:	24 e1       	ldi	r18, 0x14	; 20
    1aee:	40 ec       	ldi	r20, 0xC0	; 192
    1af0:	58 e0       	ldi	r21, 0x08	; 8
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	ce 01       	movw	r24, r28
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	0e 94 b7 04 	call	0x96e	; 0x96e <define_new_MS56XX_default_OSR>
	
	initializespi(&SPIC, &PORTC);
    1afc:	60 e4       	ldi	r22, 0x40	; 64
    1afe:	76 e0       	ldi	r23, 0x06	; 6
    1b00:	80 ec       	ldi	r24, 0xC0	; 192
    1b02:	98 e0       	ldi	r25, 0x08	; 8
    1b04:	48 dc       	rcall	.-1904   	; 0x1396 <initializespi>
	enable_select_pin(pressure_sensor.select_pin);
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	31 dc       	rcall	.-1950   	; 0x136c <enable_select_pin>
	
	//Pressure sensor initialization routine, also reads calibration data from sensor
	calibratePressureSensor(&pressure_sensor);
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <calibratePressureSensor>
	
	readMS56XX(&pressure_sensor);
    1b12:	ce 01       	movw	r24, r28
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	0e 94 80 05 	call	0xb00	; 0xb00 <readMS56XX>
	printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1b1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b1c:	8f 93       	push	r24
    1b1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b20:	8f 93       	push	r24
    1b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b24:	8f 93       	push	r24
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	8f 93       	push	r24
    1b2a:	88 85       	ldd	r24, Y+8	; 0x08
    1b2c:	8f 93       	push	r24
    1b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b30:	8f 93       	push	r24
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	8f 93       	push	r24
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	8f 93       	push	r24
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	90 e2       	ldi	r25, 0x20	; 32
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <printf>
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	de bf       	out	0x3e, r29	; 62
	
	while (1)
	{
		readMS56XX(&pressure_sensor);
		printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1b4a:	0d e0       	ldi	r16, 0x0D	; 13
    1b4c:	10 e2       	ldi	r17, 0x20	; 32
    1b4e:	0f 2e       	mov	r0, r31
    1b50:	f5 e5       	ldi	r31, 0x55	; 85
    1b52:	cf 2e       	mov	r12, r31
    1b54:	f0 2d       	mov	r31, r0
    1b56:	0f 2e       	mov	r0, r31
    1b58:	f1 e6       	ldi	r31, 0x61	; 97
    1b5a:	df 2e       	mov	r13, r31
    1b5c:	f0 2d       	mov	r31, r0
    1b5e:	0f 2e       	mov	r0, r31
    1b60:	f1 e5       	ldi	r31, 0x51	; 81
    1b62:	ef 2e       	mov	r14, r31
    1b64:	f0 2d       	mov	r31, r0
    1b66:	f1 2c       	mov	r15, r1
	readMS56XX(&pressure_sensor);
	printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
	
	while (1)
	{
		readMS56XX(&pressure_sensor);
    1b68:	ce 01       	movw	r24, r28
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	0e 94 80 05 	call	0xb00	; 0xb00 <readMS56XX>
		printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1b70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b72:	8f 93       	push	r24
    1b74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b76:	8f 93       	push	r24
    1b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7a:	8f 93       	push	r24
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	8f 93       	push	r24
    1b80:	88 85       	ldd	r24, Y+8	; 0x08
    1b82:	8f 93       	push	r24
    1b84:	8f 81       	ldd	r24, Y+7	; 0x07
    1b86:	8f 93       	push	r24
    1b88:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8a:	8f 93       	push	r24
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	8f 93       	push	r24
    1b90:	1f 93       	push	r17
    1b92:	0f 93       	push	r16
    1b94:	eb d7       	rcall	.+4054   	; 0x2b6c <printf>
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	8c 2d       	mov	r24, r12
    1b9c:	9d 2d       	mov	r25, r13
    1b9e:	ae 2d       	mov	r26, r14
    1ba0:	bf 2d       	mov	r27, r15
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	a1 09       	sbc	r26, r1
    1ba6:	b1 09       	sbc	r27, r1
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <main+0xd8>
    1baa:	de cf       	rjmp	.-68     	; 0x1b68 <main+0x9e>

00001bac <__divsf3>:
    1bac:	0c d0       	rcall	.+24     	; 0x1bc6 <__divsf3x>
    1bae:	05 c1       	rjmp	.+522    	; 0x1dba <__fp_round>
    1bb0:	fd d0       	rcall	.+506    	; 0x1dac <__fp_pscB>
    1bb2:	40 f0       	brcs	.+16     	; 0x1bc4 <__divsf3+0x18>
    1bb4:	f4 d0       	rcall	.+488    	; 0x1d9e <__fp_pscA>
    1bb6:	30 f0       	brcs	.+12     	; 0x1bc4 <__divsf3+0x18>
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <__divsf3+0x16>
    1bba:	5f 3f       	cpi	r21, 0xFF	; 255
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <__divsf3+0x18>
    1bbe:	d6 c0       	rjmp	.+428    	; 0x1d6c <__fp_inf>
    1bc0:	51 11       	cpse	r21, r1
    1bc2:	2f c1       	rjmp	.+606    	; 0x1e22 <__fp_szero>
    1bc4:	d9 c0       	rjmp	.+434    	; 0x1d78 <__fp_nan>

00001bc6 <__divsf3x>:
    1bc6:	0a d1       	rcall	.+532    	; 0x1ddc <__fp_split3>
    1bc8:	98 f3       	brcs	.-26     	; 0x1bb0 <__divsf3+0x4>

00001bca <__divsf3_pse>:
    1bca:	99 23       	and	r25, r25
    1bcc:	c9 f3       	breq	.-14     	; 0x1bc0 <__divsf3+0x14>
    1bce:	55 23       	and	r21, r21
    1bd0:	b1 f3       	breq	.-20     	; 0x1bbe <__divsf3+0x12>
    1bd2:	95 1b       	sub	r25, r21
    1bd4:	55 0b       	sbc	r21, r21
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	aa 27       	eor	r26, r26
    1bda:	62 17       	cp	r22, r18
    1bdc:	73 07       	cpc	r23, r19
    1bde:	84 07       	cpc	r24, r20
    1be0:	38 f0       	brcs	.+14     	; 0x1bf0 <__divsf3_pse+0x26>
    1be2:	9f 5f       	subi	r25, 0xFF	; 255
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	44 1f       	adc	r20, r20
    1bec:	aa 1f       	adc	r26, r26
    1bee:	a9 f3       	breq	.-22     	; 0x1bda <__divsf3_pse+0x10>
    1bf0:	33 d0       	rcall	.+102    	; 0x1c58 <__divsf3_pse+0x8e>
    1bf2:	0e 2e       	mov	r0, r30
    1bf4:	3a f0       	brmi	.+14     	; 0x1c04 <__divsf3_pse+0x3a>
    1bf6:	e0 e8       	ldi	r30, 0x80	; 128
    1bf8:	30 d0       	rcall	.+96     	; 0x1c5a <__divsf3_pse+0x90>
    1bfa:	91 50       	subi	r25, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	e6 95       	lsr	r30
    1c00:	00 1c       	adc	r0, r0
    1c02:	ca f7       	brpl	.-14     	; 0x1bf6 <__divsf3_pse+0x2c>
    1c04:	29 d0       	rcall	.+82     	; 0x1c58 <__divsf3_pse+0x8e>
    1c06:	fe 2f       	mov	r31, r30
    1c08:	27 d0       	rcall	.+78     	; 0x1c58 <__divsf3_pse+0x8e>
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	bb 1f       	adc	r27, r27
    1c12:	26 17       	cp	r18, r22
    1c14:	37 07       	cpc	r19, r23
    1c16:	48 07       	cpc	r20, r24
    1c18:	ab 07       	cpc	r26, r27
    1c1a:	b0 e8       	ldi	r27, 0x80	; 128
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <__divsf3_pse+0x56>
    1c1e:	bb 0b       	sbc	r27, r27
    1c20:	80 2d       	mov	r24, r0
    1c22:	bf 01       	movw	r22, r30
    1c24:	ff 27       	eor	r31, r31
    1c26:	93 58       	subi	r25, 0x83	; 131
    1c28:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2a:	2a f0       	brmi	.+10     	; 0x1c36 <__divsf3_pse+0x6c>
    1c2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c2e:	51 05       	cpc	r21, r1
    1c30:	68 f0       	brcs	.+26     	; 0x1c4c <__divsf3_pse+0x82>
    1c32:	9c c0       	rjmp	.+312    	; 0x1d6c <__fp_inf>
    1c34:	f6 c0       	rjmp	.+492    	; 0x1e22 <__fp_szero>
    1c36:	5f 3f       	cpi	r21, 0xFF	; 255
    1c38:	ec f3       	brlt	.-6      	; 0x1c34 <__divsf3_pse+0x6a>
    1c3a:	98 3e       	cpi	r25, 0xE8	; 232
    1c3c:	dc f3       	brlt	.-10     	; 0x1c34 <__divsf3_pse+0x6a>
    1c3e:	86 95       	lsr	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b7 95       	ror	r27
    1c46:	f7 95       	ror	r31
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__divsf3_pse+0x74>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	91 1d       	adc	r25, r1
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	97 f9       	bld	r25, 7
    1c56:	08 95       	ret
    1c58:	e1 e0       	ldi	r30, 0x01	; 1
    1c5a:	66 0f       	add	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	bb 1f       	adc	r27, r27
    1c62:	62 17       	cp	r22, r18
    1c64:	73 07       	cpc	r23, r19
    1c66:	84 07       	cpc	r24, r20
    1c68:	ba 07       	cpc	r27, r26
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <__divsf3_pse+0xaa>
    1c6c:	62 1b       	sub	r22, r18
    1c6e:	73 0b       	sbc	r23, r19
    1c70:	84 0b       	sbc	r24, r20
    1c72:	ba 0b       	sbc	r27, r26
    1c74:	ee 1f       	adc	r30, r30
    1c76:	88 f7       	brcc	.-30     	; 0x1c5a <__divsf3_pse+0x90>
    1c78:	e0 95       	com	r30
    1c7a:	08 95       	ret

00001c7c <__fixsfdi>:
    1c7c:	be e3       	ldi	r27, 0x3E	; 62
    1c7e:	04 d0       	rcall	.+8      	; 0x1c88 <__fixunssfdi+0x2>
    1c80:	08 f4       	brcc	.+2      	; 0x1c84 <__fixsfdi+0x8>
    1c82:	90 e8       	ldi	r25, 0x80	; 128
    1c84:	08 95       	ret

00001c86 <__fixunssfdi>:
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	22 27       	eor	r18, r18
    1c8a:	33 27       	eor	r19, r19
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	ae d0       	rcall	.+348    	; 0x1dec <__fp_splitA>
    1c90:	58 f1       	brcs	.+86     	; 0x1ce8 <__fixunssfdi+0x62>
    1c92:	9f 57       	subi	r25, 0x7F	; 127
    1c94:	40 f1       	brcs	.+80     	; 0x1ce6 <__fixunssfdi+0x60>
    1c96:	b9 17       	cp	r27, r25
    1c98:	38 f1       	brcs	.+78     	; 0x1ce8 <__fixunssfdi+0x62>
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	b9 1b       	sub	r27, r25
    1c9e:	99 27       	eor	r25, r25
    1ca0:	b8 50       	subi	r27, 0x08	; 8
    1ca2:	3a f4       	brpl	.+14     	; 0x1cb2 <__fixunssfdi+0x2c>
    1ca4:	66 0f       	add	r22, r22
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 1f       	adc	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	b3 95       	inc	r27
    1cae:	d2 f3       	brmi	.-12     	; 0x1ca4 <__fixunssfdi+0x1e>
    1cb0:	16 c0       	rjmp	.+44     	; 0x1cde <__fixunssfdi+0x58>
    1cb2:	b8 50       	subi	r27, 0x08	; 8
    1cb4:	4a f0       	brmi	.+18     	; 0x1cc8 <__fixunssfdi+0x42>
    1cb6:	23 2f       	mov	r18, r19
    1cb8:	34 2f       	mov	r19, r20
    1cba:	45 2f       	mov	r20, r21
    1cbc:	56 2f       	mov	r21, r22
    1cbe:	67 2f       	mov	r22, r23
    1cc0:	78 2f       	mov	r23, r24
    1cc2:	88 27       	eor	r24, r24
    1cc4:	b8 50       	subi	r27, 0x08	; 8
    1cc6:	ba f7       	brpl	.-18     	; 0x1cb6 <__fixunssfdi+0x30>
    1cc8:	b8 5f       	subi	r27, 0xF8	; 248
    1cca:	49 f0       	breq	.+18     	; 0x1cde <__fixunssfdi+0x58>
    1ccc:	86 95       	lsr	r24
    1cce:	77 95       	ror	r23
    1cd0:	67 95       	ror	r22
    1cd2:	57 95       	ror	r21
    1cd4:	47 95       	ror	r20
    1cd6:	37 95       	ror	r19
    1cd8:	27 95       	ror	r18
    1cda:	ba 95       	dec	r27
    1cdc:	b9 f7       	brne	.-18     	; 0x1ccc <__fixunssfdi+0x46>
    1cde:	0e f4       	brtc	.+2      	; 0x1ce2 <__fixunssfdi+0x5c>
    1ce0:	4e d0       	rcall	.+156    	; 0x1d7e <__fp_negdi>
    1ce2:	88 94       	clc
    1ce4:	08 95       	ret
    1ce6:	88 94       	clc
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	cb 01       	movw	r24, r22
    1cee:	08 95       	ret

00001cf0 <__floatundisf>:
    1cf0:	e8 94       	clt

00001cf2 <__fp_di2sf>:
    1cf2:	f9 2f       	mov	r31, r25
    1cf4:	96 eb       	ldi	r25, 0xB6	; 182
    1cf6:	ff 23       	and	r31, r31
    1cf8:	81 f0       	breq	.+32     	; 0x1d1a <__fp_di2sf+0x28>
    1cfa:	12 16       	cp	r1, r18
    1cfc:	13 06       	cpc	r1, r19
    1cfe:	14 06       	cpc	r1, r20
    1d00:	44 0b       	sbc	r20, r20
    1d02:	93 95       	inc	r25
    1d04:	f6 95       	lsr	r31
    1d06:	87 95       	ror	r24
    1d08:	77 95       	ror	r23
    1d0a:	67 95       	ror	r22
    1d0c:	57 95       	ror	r21
    1d0e:	40 40       	sbci	r20, 0x00	; 0
    1d10:	ff 23       	and	r31, r31
    1d12:	b9 f7       	brne	.-18     	; 0x1d02 <__fp_di2sf+0x10>
    1d14:	1b c0       	rjmp	.+54     	; 0x1d4c <__fp_di2sf+0x5a>
    1d16:	99 27       	eor	r25, r25
    1d18:	08 95       	ret
    1d1a:	88 23       	and	r24, r24
    1d1c:	51 f4       	brne	.+20     	; 0x1d32 <__fp_di2sf+0x40>
    1d1e:	98 50       	subi	r25, 0x08	; 8
    1d20:	d2 f7       	brpl	.-12     	; 0x1d16 <__fp_di2sf+0x24>
    1d22:	87 2b       	or	r24, r23
    1d24:	76 2f       	mov	r23, r22
    1d26:	65 2f       	mov	r22, r21
    1d28:	54 2f       	mov	r21, r20
    1d2a:	43 2f       	mov	r20, r19
    1d2c:	32 2f       	mov	r19, r18
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	b1 f3       	breq	.-20     	; 0x1d1e <__fp_di2sf+0x2c>
    1d32:	12 16       	cp	r1, r18
    1d34:	13 06       	cpc	r1, r19
    1d36:	14 06       	cpc	r1, r20
    1d38:	44 0b       	sbc	r20, r20
    1d3a:	88 23       	and	r24, r24
    1d3c:	3a f0       	brmi	.+14     	; 0x1d4c <__fp_di2sf+0x5a>
    1d3e:	9a 95       	dec	r25
    1d40:	44 0f       	add	r20, r20
    1d42:	55 1f       	adc	r21, r21
    1d44:	66 1f       	adc	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	ca f7       	brpl	.-14     	; 0x1d3e <__fp_di2sf+0x4c>
    1d4c:	55 23       	and	r21, r21
    1d4e:	4a f4       	brpl	.+18     	; 0x1d62 <__fp_di2sf+0x70>
    1d50:	44 0f       	add	r20, r20
    1d52:	55 1f       	adc	r21, r21
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <__fp_di2sf+0x68>
    1d56:	60 ff       	sbrs	r22, 0
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <__fp_di2sf+0x70>
    1d5a:	6f 5f       	subi	r22, 0xFF	; 255
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	88 0f       	add	r24, r24
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	97 f9       	bld	r25, 7
    1d6a:	08 95       	ret

00001d6c <__fp_inf>:
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	9f 67       	ori	r25, 0x7F	; 127
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	08 95       	ret

00001d78 <__fp_nan>:
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	80 ec       	ldi	r24, 0xC0	; 192
    1d7c:	08 95       	ret

00001d7e <__fp_negdi>:
    1d7e:	90 95       	com	r25
    1d80:	80 95       	com	r24
    1d82:	70 95       	com	r23
    1d84:	60 95       	com	r22
    1d86:	50 95       	com	r21
    1d88:	40 95       	com	r20
    1d8a:	30 95       	com	r19
    1d8c:	21 95       	neg	r18
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	4f 4f       	sbci	r20, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	6f 4f       	sbci	r22, 0xFF	; 255
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	08 95       	ret

00001d9e <__fp_pscA>:
    1d9e:	00 24       	eor	r0, r0
    1da0:	0a 94       	dec	r0
    1da2:	16 16       	cp	r1, r22
    1da4:	17 06       	cpc	r1, r23
    1da6:	18 06       	cpc	r1, r24
    1da8:	09 06       	cpc	r0, r25
    1daa:	08 95       	ret

00001dac <__fp_pscB>:
    1dac:	00 24       	eor	r0, r0
    1dae:	0a 94       	dec	r0
    1db0:	12 16       	cp	r1, r18
    1db2:	13 06       	cpc	r1, r19
    1db4:	14 06       	cpc	r1, r20
    1db6:	05 06       	cpc	r0, r21
    1db8:	08 95       	ret

00001dba <__fp_round>:
    1dba:	09 2e       	mov	r0, r25
    1dbc:	03 94       	inc	r0
    1dbe:	00 0c       	add	r0, r0
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__fp_round+0xc>
    1dc2:	88 23       	and	r24, r24
    1dc4:	52 f0       	brmi	.+20     	; 0x1dda <__fp_round+0x20>
    1dc6:	bb 0f       	add	r27, r27
    1dc8:	40 f4       	brcc	.+16     	; 0x1dda <__fp_round+0x20>
    1dca:	bf 2b       	or	r27, r31
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <__fp_round+0x18>
    1dce:	60 ff       	sbrs	r22, 0
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <__fp_round+0x20>
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	08 95       	ret

00001ddc <__fp_split3>:
    1ddc:	57 fd       	sbrc	r21, 7
    1dde:	90 58       	subi	r25, 0x80	; 128
    1de0:	44 0f       	add	r20, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	59 f0       	breq	.+22     	; 0x1dfc <__fp_splitA+0x10>
    1de6:	5f 3f       	cpi	r21, 0xFF	; 255
    1de8:	71 f0       	breq	.+28     	; 0x1e06 <__fp_splitA+0x1a>
    1dea:	47 95       	ror	r20

00001dec <__fp_splitA>:
    1dec:	88 0f       	add	r24, r24
    1dee:	97 fb       	bst	r25, 7
    1df0:	99 1f       	adc	r25, r25
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <__fp_splitA+0x20>
    1df4:	9f 3f       	cpi	r25, 0xFF	; 255
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <__fp_splitA+0x2a>
    1df8:	87 95       	ror	r24
    1dfa:	08 95       	ret
    1dfc:	12 16       	cp	r1, r18
    1dfe:	13 06       	cpc	r1, r19
    1e00:	14 06       	cpc	r1, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	f2 cf       	rjmp	.-28     	; 0x1dea <__fp_split3+0xe>
    1e06:	46 95       	lsr	r20
    1e08:	f1 df       	rcall	.-30     	; 0x1dec <__fp_splitA>
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <__fp_splitA+0x30>
    1e0c:	16 16       	cp	r1, r22
    1e0e:	17 06       	cpc	r1, r23
    1e10:	18 06       	cpc	r1, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	f1 cf       	rjmp	.-30     	; 0x1df8 <__fp_splitA+0xc>
    1e16:	86 95       	lsr	r24
    1e18:	71 05       	cpc	r23, r1
    1e1a:	61 05       	cpc	r22, r1
    1e1c:	08 94       	sec
    1e1e:	08 95       	ret

00001e20 <__fp_zero>:
    1e20:	e8 94       	clt

00001e22 <__fp_szero>:
    1e22:	bb 27       	eor	r27, r27
    1e24:	66 27       	eor	r22, r22
    1e26:	77 27       	eor	r23, r23
    1e28:	cb 01       	movw	r24, r22
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret

00001e2e <vfprintf>:
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	63 97       	sbiw	r28, 0x13	; 19
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	6c 01       	movw	r12, r24
    1e5e:	4b 01       	movw	r8, r22
    1e60:	2a 01       	movw	r4, r20
    1e62:	fc 01       	movw	r30, r24
    1e64:	16 82       	std	Z+6, r1	; 0x06
    1e66:	17 82       	std	Z+7, r1	; 0x07
    1e68:	83 81       	ldd	r24, Z+3	; 0x03
    1e6a:	81 ff       	sbrs	r24, 1
    1e6c:	29 c3       	rjmp	.+1618   	; 0x24c0 <vfprintf+0x692>
    1e6e:	ae 01       	movw	r20, r28
    1e70:	4f 5f       	subi	r20, 0xFF	; 255
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	3a 01       	movw	r6, r20
    1e76:	f6 01       	movw	r30, r12
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	f4 01       	movw	r30, r8
    1e7c:	93 fd       	sbrc	r25, 3
    1e7e:	85 91       	lpm	r24, Z+
    1e80:	93 ff       	sbrs	r25, 3
    1e82:	81 91       	ld	r24, Z+
    1e84:	4f 01       	movw	r8, r30
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <vfprintf+0x5e>
    1e8a:	16 c3       	rjmp	.+1580   	; 0x24b8 <vfprintf+0x68a>
    1e8c:	85 32       	cpi	r24, 0x25	; 37
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <vfprintf+0x70>
    1e90:	93 fd       	sbrc	r25, 3
    1e92:	85 91       	lpm	r24, Z+
    1e94:	93 ff       	sbrs	r25, 3
    1e96:	81 91       	ld	r24, Z+
    1e98:	4f 01       	movw	r8, r30
    1e9a:	85 32       	cpi	r24, 0x25	; 37
    1e9c:	31 f4       	brne	.+12     	; 0x1eaa <vfprintf+0x7c>
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	2c d6       	rcall	.+3160   	; 0x2afc <fputc>
    1ea4:	52 01       	movw	r10, r4
    1ea6:	25 01       	movw	r4, r10
    1ea8:	e6 cf       	rjmp	.-52     	; 0x1e76 <vfprintf+0x48>
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
    1eac:	f1 2c       	mov	r15, r1
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	20 32       	cpi	r18, 0x20	; 32
    1eb2:	a0 f4       	brcc	.+40     	; 0x1edc <vfprintf+0xae>
    1eb4:	8b 32       	cpi	r24, 0x2B	; 43
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <vfprintf+0xa4>
    1eb8:	30 f4       	brcc	.+12     	; 0x1ec6 <vfprintf+0x98>
    1eba:	80 32       	cpi	r24, 0x20	; 32
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <vfprintf+0xa6>
    1ebe:	83 32       	cpi	r24, 0x23	; 35
    1ec0:	69 f4       	brne	.+26     	; 0x1edc <vfprintf+0xae>
    1ec2:	20 61       	ori	r18, 0x10	; 16
    1ec4:	2c c0       	rjmp	.+88     	; 0x1f1e <vfprintf+0xf0>
    1ec6:	8d 32       	cpi	r24, 0x2D	; 45
    1ec8:	39 f0       	breq	.+14     	; 0x1ed8 <vfprintf+0xaa>
    1eca:	80 33       	cpi	r24, 0x30	; 48
    1ecc:	39 f4       	brne	.+14     	; 0x1edc <vfprintf+0xae>
    1ece:	21 60       	ori	r18, 0x01	; 1
    1ed0:	26 c0       	rjmp	.+76     	; 0x1f1e <vfprintf+0xf0>
    1ed2:	22 60       	ori	r18, 0x02	; 2
    1ed4:	24 60       	ori	r18, 0x04	; 4
    1ed6:	23 c0       	rjmp	.+70     	; 0x1f1e <vfprintf+0xf0>
    1ed8:	28 60       	ori	r18, 0x08	; 8
    1eda:	21 c0       	rjmp	.+66     	; 0x1f1e <vfprintf+0xf0>
    1edc:	27 fd       	sbrc	r18, 7
    1ede:	27 c0       	rjmp	.+78     	; 0x1f2e <vfprintf+0x100>
    1ee0:	30 ed       	ldi	r19, 0xD0	; 208
    1ee2:	38 0f       	add	r19, r24
    1ee4:	3a 30       	cpi	r19, 0x0A	; 10
    1ee6:	78 f4       	brcc	.+30     	; 0x1f06 <vfprintf+0xd8>
    1ee8:	26 ff       	sbrs	r18, 6
    1eea:	06 c0       	rjmp	.+12     	; 0x1ef8 <vfprintf+0xca>
    1eec:	fa e0       	ldi	r31, 0x0A	; 10
    1eee:	1f 9f       	mul	r17, r31
    1ef0:	30 0d       	add	r19, r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	13 2f       	mov	r17, r19
    1ef6:	13 c0       	rjmp	.+38     	; 0x1f1e <vfprintf+0xf0>
    1ef8:	4a e0       	ldi	r20, 0x0A	; 10
    1efa:	f4 9e       	mul	r15, r20
    1efc:	30 0d       	add	r19, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	f3 2e       	mov	r15, r19
    1f02:	20 62       	ori	r18, 0x20	; 32
    1f04:	0c c0       	rjmp	.+24     	; 0x1f1e <vfprintf+0xf0>
    1f06:	8e 32       	cpi	r24, 0x2E	; 46
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <vfprintf+0xe4>
    1f0a:	26 fd       	sbrc	r18, 6
    1f0c:	d5 c2       	rjmp	.+1450   	; 0x24b8 <vfprintf+0x68a>
    1f0e:	20 64       	ori	r18, 0x40	; 64
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0xf0>
    1f12:	8c 36       	cpi	r24, 0x6C	; 108
    1f14:	11 f4       	brne	.+4      	; 0x1f1a <vfprintf+0xec>
    1f16:	20 68       	ori	r18, 0x80	; 128
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <vfprintf+0xf0>
    1f1a:	88 36       	cpi	r24, 0x68	; 104
    1f1c:	41 f4       	brne	.+16     	; 0x1f2e <vfprintf+0x100>
    1f1e:	f4 01       	movw	r30, r8
    1f20:	93 fd       	sbrc	r25, 3
    1f22:	85 91       	lpm	r24, Z+
    1f24:	93 ff       	sbrs	r25, 3
    1f26:	81 91       	ld	r24, Z+
    1f28:	4f 01       	movw	r8, r30
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	c1 cf       	rjmp	.-126    	; 0x1eb0 <vfprintf+0x82>
    1f2e:	9b eb       	ldi	r25, 0xBB	; 187
    1f30:	98 0f       	add	r25, r24
    1f32:	93 30       	cpi	r25, 0x03	; 3
    1f34:	18 f4       	brcc	.+6      	; 0x1f3c <vfprintf+0x10e>
    1f36:	20 61       	ori	r18, 0x10	; 16
    1f38:	80 5e       	subi	r24, 0xE0	; 224
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <vfprintf+0x11a>
    1f3c:	9b e9       	ldi	r25, 0x9B	; 155
    1f3e:	98 0f       	add	r25, r24
    1f40:	93 30       	cpi	r25, 0x03	; 3
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <vfprintf+0x118>
    1f44:	64 c1       	rjmp	.+712    	; 0x220e <vfprintf+0x3e0>
    1f46:	2f 7e       	andi	r18, 0xEF	; 239
    1f48:	26 ff       	sbrs	r18, 6
    1f4a:	16 e0       	ldi	r17, 0x06	; 6
    1f4c:	2f 73       	andi	r18, 0x3F	; 63
    1f4e:	32 2e       	mov	r3, r18
    1f50:	85 36       	cpi	r24, 0x65	; 101
    1f52:	19 f4       	brne	.+6      	; 0x1f5a <vfprintf+0x12c>
    1f54:	20 64       	ori	r18, 0x40	; 64
    1f56:	32 2e       	mov	r3, r18
    1f58:	08 c0       	rjmp	.+16     	; 0x1f6a <vfprintf+0x13c>
    1f5a:	86 36       	cpi	r24, 0x66	; 102
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <vfprintf+0x138>
    1f5e:	f2 2f       	mov	r31, r18
    1f60:	f0 68       	ori	r31, 0x80	; 128
    1f62:	3f 2e       	mov	r3, r31
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <vfprintf+0x13c>
    1f66:	11 11       	cpse	r17, r1
    1f68:	11 50       	subi	r17, 0x01	; 1
    1f6a:	37 fe       	sbrs	r3, 7
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <vfprintf+0x14e>
    1f6e:	1c 33       	cpi	r17, 0x3C	; 60
    1f70:	50 f4       	brcc	.+20     	; 0x1f86 <vfprintf+0x158>
    1f72:	ee 24       	eor	r14, r14
    1f74:	e3 94       	inc	r14
    1f76:	e1 0e       	add	r14, r17
    1f78:	27 e0       	ldi	r18, 0x07	; 7
    1f7a:	0b c0       	rjmp	.+22     	; 0x1f92 <vfprintf+0x164>
    1f7c:	18 30       	cpi	r17, 0x08	; 8
    1f7e:	38 f0       	brcs	.+14     	; 0x1f8e <vfprintf+0x160>
    1f80:	27 e0       	ldi	r18, 0x07	; 7
    1f82:	17 e0       	ldi	r17, 0x07	; 7
    1f84:	05 c0       	rjmp	.+10     	; 0x1f90 <vfprintf+0x162>
    1f86:	27 e0       	ldi	r18, 0x07	; 7
    1f88:	4c e3       	ldi	r20, 0x3C	; 60
    1f8a:	e4 2e       	mov	r14, r20
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <vfprintf+0x164>
    1f8e:	21 2f       	mov	r18, r17
    1f90:	e1 2c       	mov	r14, r1
    1f92:	52 01       	movw	r10, r4
    1f94:	44 e0       	ldi	r20, 0x04	; 4
    1f96:	a4 0e       	add	r10, r20
    1f98:	b1 1c       	adc	r11, r1
    1f9a:	f2 01       	movw	r30, r4
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 2d       	mov	r16, r14
    1fa6:	a3 01       	movw	r20, r6
    1fa8:	71 d4       	rcall	.+2274   	; 0x288c <__ftoa_engine>
    1faa:	2c 01       	movw	r4, r24
    1fac:	09 81       	ldd	r16, Y+1	; 0x01
    1fae:	00 ff       	sbrs	r16, 0
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <vfprintf+0x188>
    1fb2:	03 ff       	sbrs	r16, 3
    1fb4:	07 c0       	rjmp	.+14     	; 0x1fc4 <vfprintf+0x196>
    1fb6:	31 fc       	sbrc	r3, 1
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <vfprintf+0x19c>
    1fba:	32 fe       	sbrs	r3, 2
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <vfprintf+0x1a2>
    1fbe:	30 e2       	ldi	r19, 0x20	; 32
    1fc0:	23 2e       	mov	r2, r19
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <vfprintf+0x1a4>
    1fc4:	2d e2       	ldi	r18, 0x2D	; 45
    1fc6:	22 2e       	mov	r2, r18
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <vfprintf+0x1a4>
    1fca:	9b e2       	ldi	r25, 0x2B	; 43
    1fcc:	29 2e       	mov	r2, r25
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <vfprintf+0x1a4>
    1fd0:	21 2c       	mov	r2, r1
    1fd2:	80 2f       	mov	r24, r16
    1fd4:	8c 70       	andi	r24, 0x0C	; 12
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <vfprintf+0x1b0>
    1fd8:	21 10       	cpse	r2, r1
    1fda:	51 c2       	rjmp	.+1186   	; 0x247e <vfprintf+0x650>
    1fdc:	8d c2       	rjmp	.+1306   	; 0x24f8 <vfprintf+0x6ca>
    1fde:	37 fe       	sbrs	r3, 7
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <vfprintf+0x1d2>
    1fe2:	e4 0c       	add	r14, r4
    1fe4:	04 ff       	sbrs	r16, 4
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <vfprintf+0x1c2>
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	81 33       	cpi	r24, 0x31	; 49
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <vfprintf+0x1c2>
    1fee:	ea 94       	dec	r14
    1ff0:	1e 14       	cp	r1, r14
    1ff2:	74 f5       	brge	.+92     	; 0x2050 <vfprintf+0x222>
    1ff4:	f8 e0       	ldi	r31, 0x08	; 8
    1ff6:	fe 15       	cp	r31, r14
    1ff8:	78 f5       	brcc	.+94     	; 0x2058 <vfprintf+0x22a>
    1ffa:	88 e0       	ldi	r24, 0x08	; 8
    1ffc:	e8 2e       	mov	r14, r24
    1ffe:	2c c0       	rjmp	.+88     	; 0x2058 <vfprintf+0x22a>
    2000:	36 fc       	sbrc	r3, 6
    2002:	2a c0       	rjmp	.+84     	; 0x2058 <vfprintf+0x22a>
    2004:	81 2f       	mov	r24, r17
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	84 15       	cp	r24, r4
    200a:	95 05       	cpc	r25, r5
    200c:	9c f0       	brlt	.+38     	; 0x2034 <vfprintf+0x206>
    200e:	2c ef       	ldi	r18, 0xFC	; 252
    2010:	42 16       	cp	r4, r18
    2012:	2f ef       	ldi	r18, 0xFF	; 255
    2014:	52 06       	cpc	r5, r18
    2016:	74 f0       	brlt	.+28     	; 0x2034 <vfprintf+0x206>
    2018:	43 2d       	mov	r20, r3
    201a:	40 68       	ori	r20, 0x80	; 128
    201c:	34 2e       	mov	r3, r20
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <vfprintf+0x206>
    2020:	e2 e0       	ldi	r30, 0x02	; 2
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	ec 0f       	add	r30, r28
    2026:	fd 1f       	adc	r31, r29
    2028:	e1 0f       	add	r30, r17
    202a:	f1 1d       	adc	r31, r1
    202c:	80 81       	ld	r24, Z
    202e:	80 33       	cpi	r24, 0x30	; 48
    2030:	19 f4       	brne	.+6      	; 0x2038 <vfprintf+0x20a>
    2032:	11 50       	subi	r17, 0x01	; 1
    2034:	11 11       	cpse	r17, r1
    2036:	f4 cf       	rjmp	.-24     	; 0x2020 <vfprintf+0x1f2>
    2038:	37 fe       	sbrs	r3, 7
    203a:	0e c0       	rjmp	.+28     	; 0x2058 <vfprintf+0x22a>
    203c:	ee 24       	eor	r14, r14
    203e:	e3 94       	inc	r14
    2040:	e1 0e       	add	r14, r17
    2042:	81 2f       	mov	r24, r17
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	48 16       	cp	r4, r24
    2048:	59 06       	cpc	r5, r25
    204a:	2c f4       	brge	.+10     	; 0x2056 <vfprintf+0x228>
    204c:	14 19       	sub	r17, r4
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <vfprintf+0x22a>
    2050:	ee 24       	eor	r14, r14
    2052:	e3 94       	inc	r14
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <vfprintf+0x22a>
    2056:	10 e0       	ldi	r17, 0x00	; 0
    2058:	37 fe       	sbrs	r3, 7
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <vfprintf+0x23a>
    205c:	14 14       	cp	r1, r4
    205e:	15 04       	cpc	r1, r5
    2060:	34 f4       	brge	.+12     	; 0x206e <vfprintf+0x240>
    2062:	c2 01       	movw	r24, r4
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <vfprintf+0x244>
    2068:	85 e0       	ldi	r24, 0x05	; 5
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <vfprintf+0x244>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	21 10       	cpse	r2, r1
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	11 23       	and	r17, r17
    2078:	31 f0       	breq	.+12     	; 0x2086 <vfprintf+0x258>
    207a:	21 2f       	mov	r18, r17
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	2f 5f       	subi	r18, 0xFF	; 255
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	2f 2d       	mov	r18, r15
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	82 17       	cp	r24, r18
    208c:	93 07       	cpc	r25, r19
    208e:	14 f4       	brge	.+4      	; 0x2094 <vfprintf+0x266>
    2090:	f8 1a       	sub	r15, r24
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <vfprintf+0x268>
    2094:	f1 2c       	mov	r15, r1
    2096:	83 2d       	mov	r24, r3
    2098:	89 70       	andi	r24, 0x09	; 9
    209a:	41 f4       	brne	.+16     	; 0x20ac <vfprintf+0x27e>
    209c:	ff 20       	and	r15, r15
    209e:	31 f0       	breq	.+12     	; 0x20ac <vfprintf+0x27e>
    20a0:	b6 01       	movw	r22, r12
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	2a d5       	rcall	.+2644   	; 0x2afc <fputc>
    20a8:	fa 94       	dec	r15
    20aa:	f8 cf       	rjmp	.-16     	; 0x209c <vfprintf+0x26e>
    20ac:	22 20       	and	r2, r2
    20ae:	21 f0       	breq	.+8      	; 0x20b8 <vfprintf+0x28a>
    20b0:	b6 01       	movw	r22, r12
    20b2:	82 2d       	mov	r24, r2
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	22 d5       	rcall	.+2628   	; 0x2afc <fputc>
    20b8:	33 fc       	sbrc	r3, 3
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <vfprintf+0x29e>
    20bc:	ff 20       	and	r15, r15
    20be:	31 f0       	breq	.+12     	; 0x20cc <vfprintf+0x29e>
    20c0:	b6 01       	movw	r22, r12
    20c2:	80 e3       	ldi	r24, 0x30	; 48
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	1a d5       	rcall	.+2612   	; 0x2afc <fputc>
    20c8:	fa 94       	dec	r15
    20ca:	f8 cf       	rjmp	.-16     	; 0x20bc <vfprintf+0x28e>
    20cc:	37 fe       	sbrs	r3, 7
    20ce:	58 c0       	rjmp	.+176    	; 0x2180 <vfprintf+0x352>
    20d0:	94 2d       	mov	r25, r4
    20d2:	85 2d       	mov	r24, r5
    20d4:	57 fe       	sbrs	r5, 7
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <vfprintf+0x2ae>
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	29 2e       	mov	r2, r25
    20de:	38 2e       	mov	r3, r24
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	a2 01       	movw	r20, r4
    20e6:	4e 19       	sub	r20, r14
    20e8:	51 09       	sbc	r21, r1
    20ea:	4c 87       	std	Y+12, r20	; 0x0c
    20ec:	5d 87       	std	Y+13, r21	; 0x0d
    20ee:	a2 01       	movw	r20, r4
    20f0:	42 19       	sub	r20, r2
    20f2:	53 09       	sbc	r21, r3
    20f4:	4e 87       	std	Y+14, r20	; 0x0e
    20f6:	5f 87       	std	Y+15, r21	; 0x0f
    20f8:	61 2f       	mov	r22, r17
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	44 27       	eor	r20, r20
    20fe:	55 27       	eor	r21, r21
    2100:	46 1b       	sub	r20, r22
    2102:	57 0b       	sbc	r21, r23
    2104:	48 8b       	std	Y+16, r20	; 0x10
    2106:	59 8b       	std	Y+17, r21	; 0x11
    2108:	5f ef       	ldi	r21, 0xFF	; 255
    210a:	25 16       	cp	r2, r21
    210c:	35 06       	cpc	r3, r21
    210e:	41 f4       	brne	.+16     	; 0x2120 <vfprintf+0x2f2>
    2110:	b6 01       	movw	r22, r12
    2112:	8e e2       	ldi	r24, 0x2E	; 46
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	2a 8b       	std	Y+18, r18	; 0x12
    2118:	3b 8b       	std	Y+19, r19	; 0x13
    211a:	f0 d4       	rcall	.+2528   	; 0x2afc <fputc>
    211c:	3b 89       	ldd	r19, Y+19	; 0x13
    211e:	2a 89       	ldd	r18, Y+18	; 0x12
    2120:	42 14       	cp	r4, r2
    2122:	53 04       	cpc	r5, r3
    2124:	6c f0       	brlt	.+26     	; 0x2140 <vfprintf+0x312>
    2126:	4c 85       	ldd	r20, Y+12	; 0x0c
    2128:	5d 85       	ldd	r21, Y+13	; 0x0d
    212a:	42 15       	cp	r20, r2
    212c:	53 05       	cpc	r21, r3
    212e:	44 f4       	brge	.+16     	; 0x2140 <vfprintf+0x312>
    2130:	ee 85       	ldd	r30, Y+14	; 0x0e
    2132:	ff 85       	ldd	r31, Y+15	; 0x0f
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	e6 0d       	add	r30, r6
    213a:	f7 1d       	adc	r31, r7
    213c:	81 81       	ldd	r24, Z+1	; 0x01
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <vfprintf+0x314>
    2140:	80 e3       	ldi	r24, 0x30	; 48
    2142:	51 e0       	ldi	r21, 0x01	; 1
    2144:	25 1a       	sub	r2, r21
    2146:	31 08       	sbc	r3, r1
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	48 89       	ldd	r20, Y+16	; 0x10
    214e:	59 89       	ldd	r21, Y+17	; 0x11
    2150:	24 16       	cp	r2, r20
    2152:	35 06       	cpc	r3, r21
    2154:	44 f0       	brlt	.+16     	; 0x2166 <vfprintf+0x338>
    2156:	b6 01       	movw	r22, r12
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	2a 8b       	std	Y+18, r18	; 0x12
    215c:	3b 8b       	std	Y+19, r19	; 0x13
    215e:	ce d4       	rcall	.+2460   	; 0x2afc <fputc>
    2160:	2a 89       	ldd	r18, Y+18	; 0x12
    2162:	3b 89       	ldd	r19, Y+19	; 0x13
    2164:	d1 cf       	rjmp	.-94     	; 0x2108 <vfprintf+0x2da>
    2166:	24 14       	cp	r2, r4
    2168:	35 04       	cpc	r3, r5
    216a:	39 f4       	brne	.+14     	; 0x217a <vfprintf+0x34c>
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	96 33       	cpi	r25, 0x36	; 54
    2170:	18 f4       	brcc	.+6      	; 0x2178 <vfprintf+0x34a>
    2172:	95 33       	cpi	r25, 0x35	; 53
    2174:	11 f4       	brne	.+4      	; 0x217a <vfprintf+0x34c>
    2176:	04 ff       	sbrs	r16, 4
    2178:	81 e3       	ldi	r24, 0x31	; 49
    217a:	b6 01       	movw	r22, r12
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	45 c0       	rjmp	.+138    	; 0x220a <vfprintf+0x3dc>
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	81 33       	cpi	r24, 0x31	; 49
    2184:	09 f0       	breq	.+2      	; 0x2188 <vfprintf+0x35a>
    2186:	0f 7e       	andi	r16, 0xEF	; 239
    2188:	b6 01       	movw	r22, r12
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	b7 d4       	rcall	.+2414   	; 0x2afc <fputc>
    218e:	11 11       	cpse	r17, r1
    2190:	05 c0       	rjmp	.+10     	; 0x219c <vfprintf+0x36e>
    2192:	34 fc       	sbrc	r3, 4
    2194:	16 c0       	rjmp	.+44     	; 0x21c2 <vfprintf+0x394>
    2196:	85 e6       	ldi	r24, 0x65	; 101
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	15 c0       	rjmp	.+42     	; 0x21c6 <vfprintf+0x398>
    219c:	b6 01       	movw	r22, r12
    219e:	8e e2       	ldi	r24, 0x2E	; 46
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	ac d4       	rcall	.+2392   	; 0x2afc <fputc>
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	ee 24       	eor	r14, r14
    21a8:	e3 94       	inc	r14
    21aa:	e8 0e       	add	r14, r24
    21ac:	f3 01       	movw	r30, r6
    21ae:	e8 0f       	add	r30, r24
    21b0:	f1 1d       	adc	r31, r1
    21b2:	80 81       	ld	r24, Z
    21b4:	b6 01       	movw	r22, r12
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a1 d4       	rcall	.+2370   	; 0x2afc <fputc>
    21ba:	11 50       	subi	r17, 0x01	; 1
    21bc:	8e 2d       	mov	r24, r14
    21be:	99 f7       	brne	.-26     	; 0x21a6 <vfprintf+0x378>
    21c0:	e8 cf       	rjmp	.-48     	; 0x2192 <vfprintf+0x364>
    21c2:	85 e4       	ldi	r24, 0x45	; 69
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b6 01       	movw	r22, r12
    21c8:	99 d4       	rcall	.+2354   	; 0x2afc <fputc>
    21ca:	57 fc       	sbrc	r5, 7
    21cc:	05 c0       	rjmp	.+10     	; 0x21d8 <vfprintf+0x3aa>
    21ce:	41 14       	cp	r4, r1
    21d0:	51 04       	cpc	r5, r1
    21d2:	39 f4       	brne	.+14     	; 0x21e2 <vfprintf+0x3b4>
    21d4:	04 ff       	sbrs	r16, 4
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <vfprintf+0x3b4>
    21d8:	51 94       	neg	r5
    21da:	41 94       	neg	r4
    21dc:	51 08       	sbc	r5, r1
    21de:	8d e2       	ldi	r24, 0x2D	; 45
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <vfprintf+0x3b6>
    21e2:	8b e2       	ldi	r24, 0x2B	; 43
    21e4:	b6 01       	movw	r22, r12
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	89 d4       	rcall	.+2322   	; 0x2afc <fputc>
    21ea:	80 e3       	ldi	r24, 0x30	; 48
    21ec:	9a e0       	ldi	r25, 0x0A	; 10
    21ee:	49 16       	cp	r4, r25
    21f0:	51 04       	cpc	r5, r1
    21f2:	2c f0       	brlt	.+10     	; 0x21fe <vfprintf+0x3d0>
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	5a e0       	ldi	r21, 0x0A	; 10
    21f8:	45 1a       	sub	r4, r21
    21fa:	51 08       	sbc	r5, r1
    21fc:	f7 cf       	rjmp	.-18     	; 0x21ec <vfprintf+0x3be>
    21fe:	b6 01       	movw	r22, r12
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	7c d4       	rcall	.+2296   	; 0x2afc <fputc>
    2204:	b6 01       	movw	r22, r12
    2206:	c2 01       	movw	r24, r4
    2208:	c0 96       	adiw	r24, 0x30	; 48
    220a:	78 d4       	rcall	.+2288   	; 0x2afc <fputc>
    220c:	4c c1       	rjmp	.+664    	; 0x24a6 <vfprintf+0x678>
    220e:	83 36       	cpi	r24, 0x63	; 99
    2210:	31 f0       	breq	.+12     	; 0x221e <vfprintf+0x3f0>
    2212:	83 37       	cpi	r24, 0x73	; 115
    2214:	79 f0       	breq	.+30     	; 0x2234 <vfprintf+0x406>
    2216:	83 35       	cpi	r24, 0x53	; 83
    2218:	09 f0       	breq	.+2      	; 0x221c <vfprintf+0x3ee>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <vfprintf+0x496>
    221c:	20 c0       	rjmp	.+64     	; 0x225e <vfprintf+0x430>
    221e:	52 01       	movw	r10, r4
    2220:	e2 e0       	ldi	r30, 0x02	; 2
    2222:	ae 0e       	add	r10, r30
    2224:	b1 1c       	adc	r11, r1
    2226:	f2 01       	movw	r30, r4
    2228:	80 81       	ld	r24, Z
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	01 e0       	ldi	r16, 0x01	; 1
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	23 01       	movw	r4, r6
    2232:	13 c0       	rjmp	.+38     	; 0x225a <vfprintf+0x42c>
    2234:	52 01       	movw	r10, r4
    2236:	f2 e0       	ldi	r31, 0x02	; 2
    2238:	af 0e       	add	r10, r31
    223a:	b1 1c       	adc	r11, r1
    223c:	f2 01       	movw	r30, r4
    223e:	40 80       	ld	r4, Z
    2240:	51 80       	ldd	r5, Z+1	; 0x01
    2242:	26 ff       	sbrs	r18, 6
    2244:	03 c0       	rjmp	.+6      	; 0x224c <vfprintf+0x41e>
    2246:	61 2f       	mov	r22, r17
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <vfprintf+0x422>
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	c2 01       	movw	r24, r4
    2252:	2a 8b       	std	Y+18, r18	; 0x12
    2254:	fe d3       	rcall	.+2044   	; 0x2a52 <strnlen>
    2256:	8c 01       	movw	r16, r24
    2258:	2a 89       	ldd	r18, Y+18	; 0x12
    225a:	2f 77       	andi	r18, 0x7F	; 127
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <vfprintf+0x458>
    225e:	52 01       	movw	r10, r4
    2260:	f2 e0       	ldi	r31, 0x02	; 2
    2262:	af 0e       	add	r10, r31
    2264:	b1 1c       	adc	r11, r1
    2266:	f2 01       	movw	r30, r4
    2268:	40 80       	ld	r4, Z
    226a:	51 80       	ldd	r5, Z+1	; 0x01
    226c:	26 ff       	sbrs	r18, 6
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <vfprintf+0x448>
    2270:	61 2f       	mov	r22, r17
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	02 c0       	rjmp	.+4      	; 0x227a <vfprintf+0x44c>
    2276:	6f ef       	ldi	r22, 0xFF	; 255
    2278:	7f ef       	ldi	r23, 0xFF	; 255
    227a:	c2 01       	movw	r24, r4
    227c:	2a 8b       	std	Y+18, r18	; 0x12
    227e:	de d3       	rcall	.+1980   	; 0x2a3c <strnlen_P>
    2280:	8c 01       	movw	r16, r24
    2282:	2a 89       	ldd	r18, Y+18	; 0x12
    2284:	20 68       	ori	r18, 0x80	; 128
    2286:	32 2e       	mov	r3, r18
    2288:	23 fd       	sbrc	r18, 3
    228a:	18 c0       	rjmp	.+48     	; 0x22bc <vfprintf+0x48e>
    228c:	8f 2d       	mov	r24, r15
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	08 17       	cp	r16, r24
    2292:	19 07       	cpc	r17, r25
    2294:	98 f4       	brcc	.+38     	; 0x22bc <vfprintf+0x48e>
    2296:	b6 01       	movw	r22, r12
    2298:	80 e2       	ldi	r24, 0x20	; 32
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	2f d4       	rcall	.+2142   	; 0x2afc <fputc>
    229e:	fa 94       	dec	r15
    22a0:	f5 cf       	rjmp	.-22     	; 0x228c <vfprintf+0x45e>
    22a2:	f2 01       	movw	r30, r4
    22a4:	37 fc       	sbrc	r3, 7
    22a6:	85 91       	lpm	r24, Z+
    22a8:	37 fe       	sbrs	r3, 7
    22aa:	81 91       	ld	r24, Z+
    22ac:	2f 01       	movw	r4, r30
    22ae:	b6 01       	movw	r22, r12
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	24 d4       	rcall	.+2120   	; 0x2afc <fputc>
    22b4:	f1 10       	cpse	r15, r1
    22b6:	fa 94       	dec	r15
    22b8:	01 50       	subi	r16, 0x01	; 1
    22ba:	11 09       	sbc	r17, r1
    22bc:	01 15       	cp	r16, r1
    22be:	11 05       	cpc	r17, r1
    22c0:	81 f7       	brne	.-32     	; 0x22a2 <vfprintf+0x474>
    22c2:	f1 c0       	rjmp	.+482    	; 0x24a6 <vfprintf+0x678>
    22c4:	84 36       	cpi	r24, 0x64	; 100
    22c6:	11 f0       	breq	.+4      	; 0x22cc <vfprintf+0x49e>
    22c8:	89 36       	cpi	r24, 0x69	; 105
    22ca:	51 f5       	brne	.+84     	; 0x2320 <vfprintf+0x4f2>
    22cc:	52 01       	movw	r10, r4
    22ce:	27 ff       	sbrs	r18, 7
    22d0:	09 c0       	rjmp	.+18     	; 0x22e4 <vfprintf+0x4b6>
    22d2:	f4 e0       	ldi	r31, 0x04	; 4
    22d4:	af 0e       	add	r10, r31
    22d6:	b1 1c       	adc	r11, r1
    22d8:	f2 01       	movw	r30, r4
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	0a c0       	rjmp	.+20     	; 0x22f8 <vfprintf+0x4ca>
    22e4:	f2 e0       	ldi	r31, 0x02	; 2
    22e6:	af 0e       	add	r10, r31
    22e8:	b1 1c       	adc	r11, r1
    22ea:	f2 01       	movw	r30, r4
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	07 2e       	mov	r0, r23
    22f2:	00 0c       	add	r0, r0
    22f4:	88 0b       	sbc	r24, r24
    22f6:	99 0b       	sbc	r25, r25
    22f8:	2f 76       	andi	r18, 0x6F	; 111
    22fa:	32 2e       	mov	r3, r18
    22fc:	97 ff       	sbrs	r25, 7
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <vfprintf+0x4e4>
    2300:	90 95       	com	r25
    2302:	80 95       	com	r24
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	20 68       	ori	r18, 0x80	; 128
    2310:	32 2e       	mov	r3, r18
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	a3 01       	movw	r20, r6
    2318:	3c d4       	rcall	.+2168   	; 0x2b92 <__ultoa_invert>
    231a:	e8 2e       	mov	r14, r24
    231c:	e6 18       	sub	r14, r6
    231e:	3e c0       	rjmp	.+124    	; 0x239c <vfprintf+0x56e>
    2320:	02 2f       	mov	r16, r18
    2322:	85 37       	cpi	r24, 0x75	; 117
    2324:	21 f4       	brne	.+8      	; 0x232e <vfprintf+0x500>
    2326:	0f 7e       	andi	r16, 0xEF	; 239
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	1d c0       	rjmp	.+58     	; 0x2368 <vfprintf+0x53a>
    232e:	09 7f       	andi	r16, 0xF9	; 249
    2330:	8f 36       	cpi	r24, 0x6F	; 111
    2332:	91 f0       	breq	.+36     	; 0x2358 <vfprintf+0x52a>
    2334:	18 f4       	brcc	.+6      	; 0x233c <vfprintf+0x50e>
    2336:	88 35       	cpi	r24, 0x58	; 88
    2338:	59 f0       	breq	.+22     	; 0x2350 <vfprintf+0x522>
    233a:	be c0       	rjmp	.+380    	; 0x24b8 <vfprintf+0x68a>
    233c:	80 37       	cpi	r24, 0x70	; 112
    233e:	19 f0       	breq	.+6      	; 0x2346 <vfprintf+0x518>
    2340:	88 37       	cpi	r24, 0x78	; 120
    2342:	11 f0       	breq	.+4      	; 0x2348 <vfprintf+0x51a>
    2344:	b9 c0       	rjmp	.+370    	; 0x24b8 <vfprintf+0x68a>
    2346:	00 61       	ori	r16, 0x10	; 16
    2348:	04 ff       	sbrs	r16, 4
    234a:	09 c0       	rjmp	.+18     	; 0x235e <vfprintf+0x530>
    234c:	04 60       	ori	r16, 0x04	; 4
    234e:	07 c0       	rjmp	.+14     	; 0x235e <vfprintf+0x530>
    2350:	24 ff       	sbrs	r18, 4
    2352:	08 c0       	rjmp	.+16     	; 0x2364 <vfprintf+0x536>
    2354:	06 60       	ori	r16, 0x06	; 6
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <vfprintf+0x536>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <vfprintf+0x53a>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <vfprintf+0x53a>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	32 e0       	ldi	r19, 0x02	; 2
    2368:	52 01       	movw	r10, r4
    236a:	07 ff       	sbrs	r16, 7
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <vfprintf+0x552>
    236e:	f4 e0       	ldi	r31, 0x04	; 4
    2370:	af 0e       	add	r10, r31
    2372:	b1 1c       	adc	r11, r1
    2374:	f2 01       	movw	r30, r4
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	08 c0       	rjmp	.+16     	; 0x2390 <vfprintf+0x562>
    2380:	f2 e0       	ldi	r31, 0x02	; 2
    2382:	af 0e       	add	r10, r31
    2384:	b1 1c       	adc	r11, r1
    2386:	f2 01       	movw	r30, r4
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a3 01       	movw	r20, r6
    2392:	ff d3       	rcall	.+2046   	; 0x2b92 <__ultoa_invert>
    2394:	e8 2e       	mov	r14, r24
    2396:	e6 18       	sub	r14, r6
    2398:	0f 77       	andi	r16, 0x7F	; 127
    239a:	30 2e       	mov	r3, r16
    239c:	36 fe       	sbrs	r3, 6
    239e:	0b c0       	rjmp	.+22     	; 0x23b6 <vfprintf+0x588>
    23a0:	33 2d       	mov	r19, r3
    23a2:	3e 7f       	andi	r19, 0xFE	; 254
    23a4:	e1 16       	cp	r14, r17
    23a6:	50 f4       	brcc	.+20     	; 0x23bc <vfprintf+0x58e>
    23a8:	34 fe       	sbrs	r3, 4
    23aa:	0a c0       	rjmp	.+20     	; 0x23c0 <vfprintf+0x592>
    23ac:	32 fc       	sbrc	r3, 2
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <vfprintf+0x592>
    23b0:	33 2d       	mov	r19, r3
    23b2:	3e 7e       	andi	r19, 0xEE	; 238
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <vfprintf+0x592>
    23b6:	0e 2d       	mov	r16, r14
    23b8:	33 2d       	mov	r19, r3
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <vfprintf+0x594>
    23bc:	0e 2d       	mov	r16, r14
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <vfprintf+0x594>
    23c0:	01 2f       	mov	r16, r17
    23c2:	34 ff       	sbrs	r19, 4
    23c4:	0c c0       	rjmp	.+24     	; 0x23de <vfprintf+0x5b0>
    23c6:	fe 01       	movw	r30, r28
    23c8:	ee 0d       	add	r30, r14
    23ca:	f1 1d       	adc	r31, r1
    23cc:	80 81       	ld	r24, Z
    23ce:	80 33       	cpi	r24, 0x30	; 48
    23d0:	11 f4       	brne	.+4      	; 0x23d6 <vfprintf+0x5a8>
    23d2:	39 7e       	andi	r19, 0xE9	; 233
    23d4:	08 c0       	rjmp	.+16     	; 0x23e6 <vfprintf+0x5b8>
    23d6:	32 ff       	sbrs	r19, 2
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <vfprintf+0x5b6>
    23da:	0e 5f       	subi	r16, 0xFE	; 254
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <vfprintf+0x5b8>
    23de:	83 2f       	mov	r24, r19
    23e0:	86 78       	andi	r24, 0x86	; 134
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <vfprintf+0x5b8>
    23e4:	0f 5f       	subi	r16, 0xFF	; 255
    23e6:	33 fd       	sbrc	r19, 3
    23e8:	12 c0       	rjmp	.+36     	; 0x240e <vfprintf+0x5e0>
    23ea:	30 ff       	sbrs	r19, 0
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfprintf+0x5cc>
    23ee:	1e 2d       	mov	r17, r14
    23f0:	0f 15       	cp	r16, r15
    23f2:	18 f4       	brcc	.+6      	; 0x23fa <vfprintf+0x5cc>
    23f4:	1f 0d       	add	r17, r15
    23f6:	10 1b       	sub	r17, r16
    23f8:	0f 2d       	mov	r16, r15
    23fa:	0f 15       	cp	r16, r15
    23fc:	60 f4       	brcc	.+24     	; 0x2416 <vfprintf+0x5e8>
    23fe:	b6 01       	movw	r22, r12
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	3b 8b       	std	Y+19, r19	; 0x13
    2406:	7a d3       	rcall	.+1780   	; 0x2afc <fputc>
    2408:	0f 5f       	subi	r16, 0xFF	; 255
    240a:	3b 89       	ldd	r19, Y+19	; 0x13
    240c:	f6 cf       	rjmp	.-20     	; 0x23fa <vfprintf+0x5cc>
    240e:	0f 15       	cp	r16, r15
    2410:	10 f4       	brcc	.+4      	; 0x2416 <vfprintf+0x5e8>
    2412:	f0 1a       	sub	r15, r16
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <vfprintf+0x5ea>
    2416:	f1 2c       	mov	r15, r1
    2418:	34 ff       	sbrs	r19, 4
    241a:	11 c0       	rjmp	.+34     	; 0x243e <vfprintf+0x610>
    241c:	b6 01       	movw	r22, r12
    241e:	80 e3       	ldi	r24, 0x30	; 48
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	3b 8b       	std	Y+19, r19	; 0x13
    2424:	6b d3       	rcall	.+1750   	; 0x2afc <fputc>
    2426:	3b 89       	ldd	r19, Y+19	; 0x13
    2428:	32 ff       	sbrs	r19, 2
    242a:	16 c0       	rjmp	.+44     	; 0x2458 <vfprintf+0x62a>
    242c:	31 fd       	sbrc	r19, 1
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <vfprintf+0x608>
    2430:	88 e7       	ldi	r24, 0x78	; 120
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 c0       	rjmp	.+4      	; 0x243a <vfprintf+0x60c>
    2436:	88 e5       	ldi	r24, 0x58	; 88
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	b6 01       	movw	r22, r12
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <vfprintf+0x628>
    243e:	83 2f       	mov	r24, r19
    2440:	86 78       	andi	r24, 0x86	; 134
    2442:	51 f0       	breq	.+20     	; 0x2458 <vfprintf+0x62a>
    2444:	31 ff       	sbrs	r19, 1
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x61e>
    2448:	8b e2       	ldi	r24, 0x2B	; 43
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x620>
    244c:	80 e2       	ldi	r24, 0x20	; 32
    244e:	37 fd       	sbrc	r19, 7
    2450:	8d e2       	ldi	r24, 0x2D	; 45
    2452:	b6 01       	movw	r22, r12
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	52 d3       	rcall	.+1700   	; 0x2afc <fputc>
    2458:	e1 16       	cp	r14, r17
    245a:	30 f4       	brcc	.+12     	; 0x2468 <vfprintf+0x63a>
    245c:	b6 01       	movw	r22, r12
    245e:	80 e3       	ldi	r24, 0x30	; 48
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	4c d3       	rcall	.+1688   	; 0x2afc <fputc>
    2464:	11 50       	subi	r17, 0x01	; 1
    2466:	f8 cf       	rjmp	.-16     	; 0x2458 <vfprintf+0x62a>
    2468:	ea 94       	dec	r14
    246a:	f3 01       	movw	r30, r6
    246c:	ee 0d       	add	r30, r14
    246e:	f1 1d       	adc	r31, r1
    2470:	80 81       	ld	r24, Z
    2472:	b6 01       	movw	r22, r12
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	42 d3       	rcall	.+1668   	; 0x2afc <fputc>
    2478:	e1 10       	cpse	r14, r1
    247a:	f6 cf       	rjmp	.-20     	; 0x2468 <vfprintf+0x63a>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <vfprintf+0x678>
    247e:	f4 e0       	ldi	r31, 0x04	; 4
    2480:	ff 15       	cp	r31, r15
    2482:	48 f5       	brcc	.+82     	; 0x24d6 <vfprintf+0x6a8>
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	f8 1a       	sub	r15, r24
    2488:	33 fe       	sbrs	r3, 3
    248a:	1d c0       	rjmp	.+58     	; 0x24c6 <vfprintf+0x698>
    248c:	21 10       	cpse	r2, r1
    248e:	24 c0       	rjmp	.+72     	; 0x24d8 <vfprintf+0x6aa>
    2490:	03 ff       	sbrs	r16, 3
    2492:	27 c0       	rjmp	.+78     	; 0x24e2 <vfprintf+0x6b4>
    2494:	08 ee       	ldi	r16, 0xE8	; 232
    2496:	11 e0       	ldi	r17, 0x01	; 1
    2498:	f3 2d       	mov	r31, r3
    249a:	f0 71       	andi	r31, 0x10	; 16
    249c:	3f 2e       	mov	r3, r31
    249e:	f8 01       	movw	r30, r16
    24a0:	84 91       	lpm	r24, Z
    24a2:	81 11       	cpse	r24, r1
    24a4:	21 c0       	rjmp	.+66     	; 0x24e8 <vfprintf+0x6ba>
    24a6:	ff 20       	and	r15, r15
    24a8:	09 f4       	brne	.+2      	; 0x24ac <vfprintf+0x67e>
    24aa:	fd cc       	rjmp	.-1542   	; 0x1ea6 <vfprintf+0x78>
    24ac:	b6 01       	movw	r22, r12
    24ae:	80 e2       	ldi	r24, 0x20	; 32
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	24 d3       	rcall	.+1608   	; 0x2afc <fputc>
    24b4:	fa 94       	dec	r15
    24b6:	f7 cf       	rjmp	.-18     	; 0x24a6 <vfprintf+0x678>
    24b8:	f6 01       	movw	r30, r12
    24ba:	86 81       	ldd	r24, Z+6	; 0x06
    24bc:	97 81       	ldd	r25, Z+7	; 0x07
    24be:	23 c0       	rjmp	.+70     	; 0x2506 <vfprintf+0x6d8>
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	9f ef       	ldi	r25, 0xFF	; 255
    24c4:	20 c0       	rjmp	.+64     	; 0x2506 <vfprintf+0x6d8>
    24c6:	b6 01       	movw	r22, r12
    24c8:	80 e2       	ldi	r24, 0x20	; 32
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	17 d3       	rcall	.+1582   	; 0x2afc <fputc>
    24ce:	fa 94       	dec	r15
    24d0:	f1 10       	cpse	r15, r1
    24d2:	f9 cf       	rjmp	.-14     	; 0x24c6 <vfprintf+0x698>
    24d4:	db cf       	rjmp	.-74     	; 0x248c <vfprintf+0x65e>
    24d6:	f1 2c       	mov	r15, r1
    24d8:	b6 01       	movw	r22, r12
    24da:	82 2d       	mov	r24, r2
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e d3       	rcall	.+1564   	; 0x2afc <fputc>
    24e0:	d7 cf       	rjmp	.-82     	; 0x2490 <vfprintf+0x662>
    24e2:	0c ee       	ldi	r16, 0xEC	; 236
    24e4:	11 e0       	ldi	r17, 0x01	; 1
    24e6:	d8 cf       	rjmp	.-80     	; 0x2498 <vfprintf+0x66a>
    24e8:	31 10       	cpse	r3, r1
    24ea:	80 52       	subi	r24, 0x20	; 32
    24ec:	b6 01       	movw	r22, r12
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	05 d3       	rcall	.+1546   	; 0x2afc <fputc>
    24f2:	0f 5f       	subi	r16, 0xFF	; 255
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	d3 cf       	rjmp	.-90     	; 0x249e <vfprintf+0x670>
    24f8:	23 e0       	ldi	r18, 0x03	; 3
    24fa:	2f 15       	cp	r18, r15
    24fc:	10 f4       	brcc	.+4      	; 0x2502 <vfprintf+0x6d4>
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	c2 cf       	rjmp	.-124    	; 0x2486 <vfprintf+0x658>
    2502:	f1 2c       	mov	r15, r1
    2504:	c5 cf       	rjmp	.-118    	; 0x2490 <vfprintf+0x662>
    2506:	63 96       	adiw	r28, 0x13	; 19
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	7f 90       	pop	r7
    2526:	6f 90       	pop	r6
    2528:	5f 90       	pop	r5
    252a:	4f 90       	pop	r4
    252c:	3f 90       	pop	r3
    252e:	2f 90       	pop	r2
    2530:	08 95       	ret

00002532 <__udivmodsi4>:
    2532:	a1 e2       	ldi	r26, 0x21	; 33
    2534:	1a 2e       	mov	r1, r26
    2536:	aa 1b       	sub	r26, r26
    2538:	bb 1b       	sub	r27, r27
    253a:	fd 01       	movw	r30, r26
    253c:	0d c0       	rjmp	.+26     	; 0x2558 <__udivmodsi4_ep>

0000253e <__udivmodsi4_loop>:
    253e:	aa 1f       	adc	r26, r26
    2540:	bb 1f       	adc	r27, r27
    2542:	ee 1f       	adc	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	a2 17       	cp	r26, r18
    2548:	b3 07       	cpc	r27, r19
    254a:	e4 07       	cpc	r30, r20
    254c:	f5 07       	cpc	r31, r21
    254e:	20 f0       	brcs	.+8      	; 0x2558 <__udivmodsi4_ep>
    2550:	a2 1b       	sub	r26, r18
    2552:	b3 0b       	sbc	r27, r19
    2554:	e4 0b       	sbc	r30, r20
    2556:	f5 0b       	sbc	r31, r21

00002558 <__udivmodsi4_ep>:
    2558:	66 1f       	adc	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	1a 94       	dec	r1
    2562:	69 f7       	brne	.-38     	; 0x253e <__udivmodsi4_loop>
    2564:	60 95       	com	r22
    2566:	70 95       	com	r23
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	bd 01       	movw	r22, r26
    2572:	cf 01       	movw	r24, r30
    2574:	08 95       	ret

00002576 <__muldi3>:
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	1f 93       	push	r17
    257c:	0f 93       	push	r16
    257e:	9a 9d       	mul	r25, r10
    2580:	f0 2d       	mov	r31, r0
    2582:	21 9f       	mul	r18, r17
    2584:	f0 0d       	add	r31, r0
    2586:	8b 9d       	mul	r24, r11
    2588:	f0 0d       	add	r31, r0
    258a:	8a 9d       	mul	r24, r10
    258c:	e0 2d       	mov	r30, r0
    258e:	f1 0d       	add	r31, r1
    2590:	03 9f       	mul	r16, r19
    2592:	f0 0d       	add	r31, r0
    2594:	02 9f       	mul	r16, r18
    2596:	e0 0d       	add	r30, r0
    2598:	f1 1d       	adc	r31, r1
    259a:	4e 9d       	mul	r20, r14
    259c:	e0 0d       	add	r30, r0
    259e:	f1 1d       	adc	r31, r1
    25a0:	5e 9d       	mul	r21, r14
    25a2:	f0 0d       	add	r31, r0
    25a4:	4f 9d       	mul	r20, r15
    25a6:	f0 0d       	add	r31, r0
    25a8:	7f 93       	push	r23
    25aa:	6f 93       	push	r22
    25ac:	bf 92       	push	r11
    25ae:	af 92       	push	r10
    25b0:	5f 93       	push	r21
    25b2:	4f 93       	push	r20
    25b4:	d5 01       	movw	r26, r10
    25b6:	5b d1       	rcall	.+694    	; 0x286e <__umulhisi3>
    25b8:	8b 01       	movw	r16, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	d7 01       	movw	r26, r14
    25be:	57 d1       	rcall	.+686    	; 0x286e <__umulhisi3>
    25c0:	eb 01       	movw	r28, r22
    25c2:	e8 0f       	add	r30, r24
    25c4:	f9 1f       	adc	r31, r25
    25c6:	d6 01       	movw	r26, r12
    25c8:	1f d0       	rcall	.+62     	; 0x2608 <__muldi3_6>
    25ca:	2f 91       	pop	r18
    25cc:	3f 91       	pop	r19
    25ce:	d6 01       	movw	r26, r12
    25d0:	4e d1       	rcall	.+668    	; 0x286e <__umulhisi3>
    25d2:	c6 0f       	add	r28, r22
    25d4:	d7 1f       	adc	r29, r23
    25d6:	e8 1f       	adc	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	af 91       	pop	r26
    25dc:	bf 91       	pop	r27
    25de:	14 d0       	rcall	.+40     	; 0x2608 <__muldi3_6>
    25e0:	2f 91       	pop	r18
    25e2:	3f 91       	pop	r19
    25e4:	44 d1       	rcall	.+648    	; 0x286e <__umulhisi3>
    25e6:	c6 0f       	add	r28, r22
    25e8:	d7 1f       	adc	r29, r23
    25ea:	e8 1f       	adc	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	d6 01       	movw	r26, r12
    25f0:	3e d1       	rcall	.+636    	; 0x286e <__umulhisi3>
    25f2:	e6 0f       	add	r30, r22
    25f4:	f7 1f       	adc	r31, r23
    25f6:	98 01       	movw	r18, r16
    25f8:	be 01       	movw	r22, r28
    25fa:	cf 01       	movw	r24, r30
    25fc:	11 24       	eor	r1, r1
    25fe:	0f 91       	pop	r16
    2600:	1f 91       	pop	r17
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <__muldi3_6>:
    2608:	32 d1       	rcall	.+612    	; 0x286e <__umulhisi3>
    260a:	46 0f       	add	r20, r22
    260c:	57 1f       	adc	r21, r23
    260e:	c8 1f       	adc	r28, r24
    2610:	d9 1f       	adc	r29, r25
    2612:	08 f4       	brcc	.+2      	; 0x2616 <__muldi3_6+0xe>
    2614:	31 96       	adiw	r30, 0x01	; 1
    2616:	08 95       	ret

00002618 <__moddi3>:
    2618:	68 94       	set
    261a:	01 c0       	rjmp	.+2      	; 0x261e <__divdi3_moddi3>

0000261c <__divdi3>:
    261c:	e8 94       	clt

0000261e <__divdi3_moddi3>:
    261e:	f9 2f       	mov	r31, r25
    2620:	f1 2b       	or	r31, r17
    2622:	0a f0       	brmi	.+2      	; 0x2626 <__divdi3_moddi3+0x8>
    2624:	27 c0       	rjmp	.+78     	; 0x2674 <__udivdi3_umoddi3>
    2626:	a0 e0       	ldi	r26, 0x00	; 0
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e8 e1       	ldi	r30, 0x18	; 24
    262c:	f3 e1       	ldi	r31, 0x13	; 19
    262e:	93 c0       	rjmp	.+294    	; 0x2756 <__prologue_saves__+0xc>
    2630:	09 2e       	mov	r0, r25
    2632:	05 94       	asr	r0
    2634:	1a f4       	brpl	.+6      	; 0x263c <__divdi3_moddi3+0x1e>
    2636:	79 d0       	rcall	.+242    	; 0x272a <__negdi2>
    2638:	11 23       	and	r17, r17
    263a:	92 f4       	brpl	.+36     	; 0x2660 <__divdi3_moddi3+0x42>
    263c:	f0 e8       	ldi	r31, 0x80	; 128
    263e:	0f 26       	eor	r0, r31
    2640:	ff ef       	ldi	r31, 0xFF	; 255
    2642:	e0 94       	com	r14
    2644:	f0 94       	com	r15
    2646:	00 95       	com	r16
    2648:	10 95       	com	r17
    264a:	b0 94       	com	r11
    264c:	c0 94       	com	r12
    264e:	d0 94       	com	r13
    2650:	a1 94       	neg	r10
    2652:	bf 0a       	sbc	r11, r31
    2654:	cf 0a       	sbc	r12, r31
    2656:	df 0a       	sbc	r13, r31
    2658:	ef 0a       	sbc	r14, r31
    265a:	ff 0a       	sbc	r15, r31
    265c:	0f 0b       	sbc	r16, r31
    265e:	1f 0b       	sbc	r17, r31
    2660:	13 d0       	rcall	.+38     	; 0x2688 <__udivmod64>
    2662:	07 fc       	sbrc	r0, 7
    2664:	62 d0       	rcall	.+196    	; 0x272a <__negdi2>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	ec e0       	ldi	r30, 0x0C	; 12
    266c:	8d c0       	rjmp	.+282    	; 0x2788 <__epilogue_restores__+0xc>

0000266e <__umoddi3>:
    266e:	68 94       	set
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <__udivdi3_umoddi3>

00002672 <__udivdi3>:
    2672:	e8 94       	clt

00002674 <__udivdi3_umoddi3>:
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	05 d0       	rcall	.+10     	; 0x2688 <__udivmod64>
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	9f 90       	pop	r9
    2684:	8f 90       	pop	r8
    2686:	08 95       	ret

00002688 <__udivmod64>:
    2688:	88 24       	eor	r8, r8
    268a:	99 24       	eor	r9, r9
    268c:	f4 01       	movw	r30, r8
    268e:	e4 01       	movw	r28, r8
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	9f 93       	push	r25
    2694:	aa 27       	eor	r26, r26
    2696:	9a 15       	cp	r25, r10
    2698:	8b 04       	cpc	r8, r11
    269a:	9c 04       	cpc	r9, r12
    269c:	ed 05       	cpc	r30, r13
    269e:	fe 05       	cpc	r31, r14
    26a0:	cf 05       	cpc	r28, r15
    26a2:	d0 07       	cpc	r29, r16
    26a4:	a1 07       	cpc	r26, r17
    26a6:	98 f4       	brcc	.+38     	; 0x26ce <__udivmod64+0x46>
    26a8:	ad 2f       	mov	r26, r29
    26aa:	dc 2f       	mov	r29, r28
    26ac:	cf 2f       	mov	r28, r31
    26ae:	fe 2f       	mov	r31, r30
    26b0:	e9 2d       	mov	r30, r9
    26b2:	98 2c       	mov	r9, r8
    26b4:	89 2e       	mov	r8, r25
    26b6:	98 2f       	mov	r25, r24
    26b8:	87 2f       	mov	r24, r23
    26ba:	76 2f       	mov	r23, r22
    26bc:	65 2f       	mov	r22, r21
    26be:	54 2f       	mov	r21, r20
    26c0:	43 2f       	mov	r20, r19
    26c2:	32 2f       	mov	r19, r18
    26c4:	22 27       	eor	r18, r18
    26c6:	b8 50       	subi	r27, 0x08	; 8
    26c8:	31 f7       	brne	.-52     	; 0x2696 <__udivmod64+0xe>
    26ca:	bf 91       	pop	r27
    26cc:	27 c0       	rjmp	.+78     	; 0x271c <__udivmod64+0x94>
    26ce:	1b 2e       	mov	r1, r27
    26d0:	bf 91       	pop	r27
    26d2:	bb 27       	eor	r27, r27
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	44 1f       	adc	r20, r20
    26da:	55 1f       	adc	r21, r21
    26dc:	66 1f       	adc	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	88 1f       	adc	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	88 1c       	adc	r8, r8
    26e6:	99 1c       	adc	r9, r9
    26e8:	ee 1f       	adc	r30, r30
    26ea:	ff 1f       	adc	r31, r31
    26ec:	cc 1f       	adc	r28, r28
    26ee:	dd 1f       	adc	r29, r29
    26f0:	aa 1f       	adc	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	8a 14       	cp	r8, r10
    26f6:	9b 04       	cpc	r9, r11
    26f8:	ec 05       	cpc	r30, r12
    26fa:	fd 05       	cpc	r31, r13
    26fc:	ce 05       	cpc	r28, r14
    26fe:	df 05       	cpc	r29, r15
    2700:	a0 07       	cpc	r26, r16
    2702:	b1 07       	cpc	r27, r17
    2704:	48 f0       	brcs	.+18     	; 0x2718 <__udivmod64+0x90>
    2706:	8a 18       	sub	r8, r10
    2708:	9b 08       	sbc	r9, r11
    270a:	ec 09       	sbc	r30, r12
    270c:	fd 09       	sbc	r31, r13
    270e:	ce 09       	sbc	r28, r14
    2710:	df 09       	sbc	r29, r15
    2712:	a0 0b       	sbc	r26, r16
    2714:	b1 0b       	sbc	r27, r17
    2716:	21 60       	ori	r18, 0x01	; 1
    2718:	1a 94       	dec	r1
    271a:	e1 f6       	brne	.-72     	; 0x26d4 <__udivmod64+0x4c>
    271c:	2e f4       	brtc	.+10     	; 0x2728 <__udivmod64+0xa0>
    271e:	94 01       	movw	r18, r8
    2720:	af 01       	movw	r20, r30
    2722:	be 01       	movw	r22, r28
    2724:	cd 01       	movw	r24, r26
    2726:	00 0c       	add	r0, r0
    2728:	08 95       	ret

0000272a <__negdi2>:
    272a:	60 95       	com	r22
    272c:	70 95       	com	r23
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	30 95       	com	r19
    2734:	40 95       	com	r20
    2736:	50 95       	com	r21
    2738:	21 95       	neg	r18
    273a:	3f 4f       	sbci	r19, 0xFF	; 255
    273c:	4f 4f       	sbci	r20, 0xFF	; 255
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
    2740:	6f 4f       	sbci	r22, 0xFF	; 255
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	8f 4f       	sbci	r24, 0xFF	; 255
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	08 95       	ret

0000274a <__prologue_saves__>:
    274a:	2f 92       	push	r2
    274c:	3f 92       	push	r3
    274e:	4f 92       	push	r4
    2750:	5f 92       	push	r5
    2752:	6f 92       	push	r6
    2754:	7f 92       	push	r7
    2756:	8f 92       	push	r8
    2758:	9f 92       	push	r9
    275a:	af 92       	push	r10
    275c:	bf 92       	push	r11
    275e:	cf 92       	push	r12
    2760:	df 92       	push	r13
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	ca 1b       	sub	r28, r26
    2774:	db 0b       	sbc	r29, r27
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	19 94       	eijmp

0000277c <__epilogue_restores__>:
    277c:	2a 88       	ldd	r2, Y+18	; 0x12
    277e:	39 88       	ldd	r3, Y+17	; 0x11
    2780:	48 88       	ldd	r4, Y+16	; 0x10
    2782:	5f 84       	ldd	r5, Y+15	; 0x0f
    2784:	6e 84       	ldd	r6, Y+14	; 0x0e
    2786:	7d 84       	ldd	r7, Y+13	; 0x0d
    2788:	8c 84       	ldd	r8, Y+12	; 0x0c
    278a:	9b 84       	ldd	r9, Y+11	; 0x0b
    278c:	aa 84       	ldd	r10, Y+10	; 0x0a
    278e:	b9 84       	ldd	r11, Y+9	; 0x09
    2790:	c8 84       	ldd	r12, Y+8	; 0x08
    2792:	df 80       	ldd	r13, Y+7	; 0x07
    2794:	ee 80       	ldd	r14, Y+6	; 0x06
    2796:	fd 80       	ldd	r15, Y+5	; 0x05
    2798:	0c 81       	ldd	r16, Y+4	; 0x04
    279a:	1b 81       	ldd	r17, Y+3	; 0x03
    279c:	aa 81       	ldd	r26, Y+2	; 0x02
    279e:	b9 81       	ldd	r27, Y+1	; 0x01
    27a0:	ce 0f       	add	r28, r30
    27a2:	d1 1d       	adc	r29, r1
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	ed 01       	movw	r28, r26
    27aa:	08 95       	ret

000027ac <__ashldi3>:
    27ac:	0f 93       	push	r16
    27ae:	08 30       	cpi	r16, 0x08	; 8
    27b0:	90 f0       	brcs	.+36     	; 0x27d6 <__ashldi3+0x2a>
    27b2:	98 2f       	mov	r25, r24
    27b4:	87 2f       	mov	r24, r23
    27b6:	76 2f       	mov	r23, r22
    27b8:	65 2f       	mov	r22, r21
    27ba:	54 2f       	mov	r21, r20
    27bc:	43 2f       	mov	r20, r19
    27be:	32 2f       	mov	r19, r18
    27c0:	22 27       	eor	r18, r18
    27c2:	08 50       	subi	r16, 0x08	; 8
    27c4:	f4 cf       	rjmp	.-24     	; 0x27ae <__ashldi3+0x2>
    27c6:	22 0f       	add	r18, r18
    27c8:	33 1f       	adc	r19, r19
    27ca:	44 1f       	adc	r20, r20
    27cc:	55 1f       	adc	r21, r21
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	0a 95       	dec	r16
    27d8:	b2 f7       	brpl	.-20     	; 0x27c6 <__ashldi3+0x1a>
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <__ashrdi3>:
    27de:	97 fb       	bst	r25, 7
    27e0:	10 f8       	bld	r1, 0

000027e2 <__lshrdi3>:
    27e2:	16 94       	lsr	r1
    27e4:	00 08       	sbc	r0, r0
    27e6:	0f 93       	push	r16
    27e8:	08 30       	cpi	r16, 0x08	; 8
    27ea:	98 f0       	brcs	.+38     	; 0x2812 <__lshrdi3+0x30>
    27ec:	08 50       	subi	r16, 0x08	; 8
    27ee:	23 2f       	mov	r18, r19
    27f0:	34 2f       	mov	r19, r20
    27f2:	45 2f       	mov	r20, r21
    27f4:	56 2f       	mov	r21, r22
    27f6:	67 2f       	mov	r22, r23
    27f8:	78 2f       	mov	r23, r24
    27fa:	89 2f       	mov	r24, r25
    27fc:	90 2d       	mov	r25, r0
    27fe:	f4 cf       	rjmp	.-24     	; 0x27e8 <__lshrdi3+0x6>
    2800:	05 94       	asr	r0
    2802:	97 95       	ror	r25
    2804:	87 95       	ror	r24
    2806:	77 95       	ror	r23
    2808:	67 95       	ror	r22
    280a:	57 95       	ror	r21
    280c:	47 95       	ror	r20
    280e:	37 95       	ror	r19
    2810:	27 95       	ror	r18
    2812:	0a 95       	dec	r16
    2814:	aa f7       	brpl	.-22     	; 0x2800 <__lshrdi3+0x1e>
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <__adddi3>:
    281a:	2a 0d       	add	r18, r10
    281c:	3b 1d       	adc	r19, r11
    281e:	4c 1d       	adc	r20, r12
    2820:	5d 1d       	adc	r21, r13
    2822:	6e 1d       	adc	r22, r14
    2824:	7f 1d       	adc	r23, r15
    2826:	80 1f       	adc	r24, r16
    2828:	91 1f       	adc	r25, r17
    282a:	08 95       	ret

0000282c <__adddi3_s8>:
    282c:	00 24       	eor	r0, r0
    282e:	a7 fd       	sbrc	r26, 7
    2830:	00 94       	com	r0
    2832:	2a 0f       	add	r18, r26
    2834:	30 1d       	adc	r19, r0
    2836:	40 1d       	adc	r20, r0
    2838:	50 1d       	adc	r21, r0
    283a:	60 1d       	adc	r22, r0
    283c:	70 1d       	adc	r23, r0
    283e:	80 1d       	adc	r24, r0
    2840:	90 1d       	adc	r25, r0
    2842:	08 95       	ret

00002844 <__subdi3>:
    2844:	2a 19       	sub	r18, r10
    2846:	3b 09       	sbc	r19, r11
    2848:	4c 09       	sbc	r20, r12
    284a:	5d 09       	sbc	r21, r13
    284c:	6e 09       	sbc	r22, r14
    284e:	7f 09       	sbc	r23, r15
    2850:	80 0b       	sbc	r24, r16
    2852:	91 0b       	sbc	r25, r17
    2854:	08 95       	ret

00002856 <__cmpdi2_s8>:
    2856:	00 24       	eor	r0, r0
    2858:	a7 fd       	sbrc	r26, 7
    285a:	00 94       	com	r0
    285c:	2a 17       	cp	r18, r26
    285e:	30 05       	cpc	r19, r0
    2860:	40 05       	cpc	r20, r0
    2862:	50 05       	cpc	r21, r0
    2864:	60 05       	cpc	r22, r0
    2866:	70 05       	cpc	r23, r0
    2868:	80 05       	cpc	r24, r0
    286a:	90 05       	cpc	r25, r0
    286c:	08 95       	ret

0000286e <__umulhisi3>:
    286e:	a2 9f       	mul	r26, r18
    2870:	b0 01       	movw	r22, r0
    2872:	b3 9f       	mul	r27, r19
    2874:	c0 01       	movw	r24, r0
    2876:	a3 9f       	mul	r26, r19
    2878:	70 0d       	add	r23, r0
    287a:	81 1d       	adc	r24, r1
    287c:	11 24       	eor	r1, r1
    287e:	91 1d       	adc	r25, r1
    2880:	b2 9f       	mul	r27, r18
    2882:	70 0d       	add	r23, r0
    2884:	81 1d       	adc	r24, r1
    2886:	11 24       	eor	r1, r1
    2888:	91 1d       	adc	r25, r1
    288a:	08 95       	ret

0000288c <__ftoa_engine>:
    288c:	28 30       	cpi	r18, 0x08	; 8
    288e:	08 f0       	brcs	.+2      	; 0x2892 <__ftoa_engine+0x6>
    2890:	27 e0       	ldi	r18, 0x07	; 7
    2892:	33 27       	eor	r19, r19
    2894:	da 01       	movw	r26, r20
    2896:	99 0f       	add	r25, r25
    2898:	31 1d       	adc	r19, r1
    289a:	87 fd       	sbrc	r24, 7
    289c:	91 60       	ori	r25, 0x01	; 1
    289e:	00 96       	adiw	r24, 0x00	; 0
    28a0:	61 05       	cpc	r22, r1
    28a2:	71 05       	cpc	r23, r1
    28a4:	39 f4       	brne	.+14     	; 0x28b4 <__ftoa_engine+0x28>
    28a6:	32 60       	ori	r19, 0x02	; 2
    28a8:	2e 5f       	subi	r18, 0xFE	; 254
    28aa:	3d 93       	st	X+, r19
    28ac:	30 e3       	ldi	r19, 0x30	; 48
    28ae:	2a 95       	dec	r18
    28b0:	e1 f7       	brne	.-8      	; 0x28aa <__ftoa_engine+0x1e>
    28b2:	08 95       	ret
    28b4:	9f 3f       	cpi	r25, 0xFF	; 255
    28b6:	30 f0       	brcs	.+12     	; 0x28c4 <__ftoa_engine+0x38>
    28b8:	80 38       	cpi	r24, 0x80	; 128
    28ba:	71 05       	cpc	r23, r1
    28bc:	61 05       	cpc	r22, r1
    28be:	09 f0       	breq	.+2      	; 0x28c2 <__ftoa_engine+0x36>
    28c0:	3c 5f       	subi	r19, 0xFC	; 252
    28c2:	3c 5f       	subi	r19, 0xFC	; 252
    28c4:	3d 93       	st	X+, r19
    28c6:	91 30       	cpi	r25, 0x01	; 1
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <__ftoa_engine+0x40>
    28ca:	80 68       	ori	r24, 0x80	; 128
    28cc:	91 1d       	adc	r25, r1
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	1f 93       	push	r17
    28d4:	0f 93       	push	r16
    28d6:	ff 92       	push	r15
    28d8:	ef 92       	push	r14
    28da:	19 2f       	mov	r17, r25
    28dc:	98 7f       	andi	r25, 0xF8	; 248
    28de:	96 95       	lsr	r25
    28e0:	e9 2f       	mov	r30, r25
    28e2:	96 95       	lsr	r25
    28e4:	96 95       	lsr	r25
    28e6:	e9 0f       	add	r30, r25
    28e8:	ff 27       	eor	r31, r31
    28ea:	e6 5b       	subi	r30, 0xB6	; 182
    28ec:	fd 4f       	sbci	r31, 0xFD	; 253
    28ee:	99 27       	eor	r25, r25
    28f0:	33 27       	eor	r19, r19
    28f2:	ee 24       	eor	r14, r14
    28f4:	ff 24       	eor	r15, r15
    28f6:	a7 01       	movw	r20, r14
    28f8:	e7 01       	movw	r28, r14
    28fa:	05 90       	lpm	r0, Z+
    28fc:	08 94       	sec
    28fe:	07 94       	ror	r0
    2900:	28 f4       	brcc	.+10     	; 0x290c <__ftoa_engine+0x80>
    2902:	36 0f       	add	r19, r22
    2904:	e7 1e       	adc	r14, r23
    2906:	f8 1e       	adc	r15, r24
    2908:	49 1f       	adc	r20, r25
    290a:	51 1d       	adc	r21, r1
    290c:	66 0f       	add	r22, r22
    290e:	77 1f       	adc	r23, r23
    2910:	88 1f       	adc	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	06 94       	lsr	r0
    2916:	a1 f7       	brne	.-24     	; 0x2900 <__ftoa_engine+0x74>
    2918:	05 90       	lpm	r0, Z+
    291a:	07 94       	ror	r0
    291c:	28 f4       	brcc	.+10     	; 0x2928 <__ftoa_engine+0x9c>
    291e:	e7 0e       	add	r14, r23
    2920:	f8 1e       	adc	r15, r24
    2922:	49 1f       	adc	r20, r25
    2924:	56 1f       	adc	r21, r22
    2926:	c1 1d       	adc	r28, r1
    2928:	77 0f       	add	r23, r23
    292a:	88 1f       	adc	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	66 1f       	adc	r22, r22
    2930:	06 94       	lsr	r0
    2932:	a1 f7       	brne	.-24     	; 0x291c <__ftoa_engine+0x90>
    2934:	05 90       	lpm	r0, Z+
    2936:	07 94       	ror	r0
    2938:	28 f4       	brcc	.+10     	; 0x2944 <__ftoa_engine+0xb8>
    293a:	f8 0e       	add	r15, r24
    293c:	49 1f       	adc	r20, r25
    293e:	56 1f       	adc	r21, r22
    2940:	c7 1f       	adc	r28, r23
    2942:	d1 1d       	adc	r29, r1
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	66 1f       	adc	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	06 94       	lsr	r0
    294e:	a1 f7       	brne	.-24     	; 0x2938 <__ftoa_engine+0xac>
    2950:	05 90       	lpm	r0, Z+
    2952:	07 94       	ror	r0
    2954:	20 f4       	brcc	.+8      	; 0x295e <__ftoa_engine+0xd2>
    2956:	49 0f       	add	r20, r25
    2958:	56 1f       	adc	r21, r22
    295a:	c7 1f       	adc	r28, r23
    295c:	d8 1f       	adc	r29, r24
    295e:	99 0f       	add	r25, r25
    2960:	66 1f       	adc	r22, r22
    2962:	77 1f       	adc	r23, r23
    2964:	88 1f       	adc	r24, r24
    2966:	06 94       	lsr	r0
    2968:	a9 f7       	brne	.-22     	; 0x2954 <__ftoa_engine+0xc8>
    296a:	84 91       	lpm	r24, Z
    296c:	10 95       	com	r17
    296e:	17 70       	andi	r17, 0x07	; 7
    2970:	41 f0       	breq	.+16     	; 0x2982 <__ftoa_engine+0xf6>
    2972:	d6 95       	lsr	r29
    2974:	c7 95       	ror	r28
    2976:	57 95       	ror	r21
    2978:	47 95       	ror	r20
    297a:	f7 94       	ror	r15
    297c:	e7 94       	ror	r14
    297e:	1a 95       	dec	r17
    2980:	c1 f7       	brne	.-16     	; 0x2972 <__ftoa_engine+0xe6>
    2982:	e0 ef       	ldi	r30, 0xF0	; 240
    2984:	f1 e0       	ldi	r31, 0x01	; 1
    2986:	68 94       	set
    2988:	15 90       	lpm	r1, Z+
    298a:	15 91       	lpm	r17, Z+
    298c:	35 91       	lpm	r19, Z+
    298e:	65 91       	lpm	r22, Z+
    2990:	95 91       	lpm	r25, Z+
    2992:	05 90       	lpm	r0, Z+
    2994:	7f e2       	ldi	r23, 0x2F	; 47
    2996:	73 95       	inc	r23
    2998:	e1 18       	sub	r14, r1
    299a:	f1 0a       	sbc	r15, r17
    299c:	43 0b       	sbc	r20, r19
    299e:	56 0b       	sbc	r21, r22
    29a0:	c9 0b       	sbc	r28, r25
    29a2:	d0 09       	sbc	r29, r0
    29a4:	c0 f7       	brcc	.-16     	; 0x2996 <__ftoa_engine+0x10a>
    29a6:	e1 0c       	add	r14, r1
    29a8:	f1 1e       	adc	r15, r17
    29aa:	43 1f       	adc	r20, r19
    29ac:	56 1f       	adc	r21, r22
    29ae:	c9 1f       	adc	r28, r25
    29b0:	d0 1d       	adc	r29, r0
    29b2:	7e f4       	brtc	.+30     	; 0x29d2 <__ftoa_engine+0x146>
    29b4:	70 33       	cpi	r23, 0x30	; 48
    29b6:	11 f4       	brne	.+4      	; 0x29bc <__ftoa_engine+0x130>
    29b8:	8a 95       	dec	r24
    29ba:	e6 cf       	rjmp	.-52     	; 0x2988 <__ftoa_engine+0xfc>
    29bc:	e8 94       	clt
    29be:	01 50       	subi	r16, 0x01	; 1
    29c0:	30 f0       	brcs	.+12     	; 0x29ce <__ftoa_engine+0x142>
    29c2:	08 0f       	add	r16, r24
    29c4:	0a f4       	brpl	.+2      	; 0x29c8 <__ftoa_engine+0x13c>
    29c6:	00 27       	eor	r16, r16
    29c8:	02 17       	cp	r16, r18
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <__ftoa_engine+0x142>
    29cc:	20 2f       	mov	r18, r16
    29ce:	23 95       	inc	r18
    29d0:	02 2f       	mov	r16, r18
    29d2:	7a 33       	cpi	r23, 0x3A	; 58
    29d4:	28 f0       	brcs	.+10     	; 0x29e0 <__ftoa_engine+0x154>
    29d6:	79 e3       	ldi	r23, 0x39	; 57
    29d8:	7d 93       	st	X+, r23
    29da:	2a 95       	dec	r18
    29dc:	e9 f7       	brne	.-6      	; 0x29d8 <__ftoa_engine+0x14c>
    29de:	10 c0       	rjmp	.+32     	; 0x2a00 <__ftoa_engine+0x174>
    29e0:	7d 93       	st	X+, r23
    29e2:	2a 95       	dec	r18
    29e4:	89 f6       	brne	.-94     	; 0x2988 <__ftoa_engine+0xfc>
    29e6:	06 94       	lsr	r0
    29e8:	97 95       	ror	r25
    29ea:	67 95       	ror	r22
    29ec:	37 95       	ror	r19
    29ee:	17 95       	ror	r17
    29f0:	17 94       	ror	r1
    29f2:	e1 18       	sub	r14, r1
    29f4:	f1 0a       	sbc	r15, r17
    29f6:	43 0b       	sbc	r20, r19
    29f8:	56 0b       	sbc	r21, r22
    29fa:	c9 0b       	sbc	r28, r25
    29fc:	d0 09       	sbc	r29, r0
    29fe:	98 f0       	brcs	.+38     	; 0x2a26 <__ftoa_engine+0x19a>
    2a00:	23 95       	inc	r18
    2a02:	7e 91       	ld	r23, -X
    2a04:	73 95       	inc	r23
    2a06:	7a 33       	cpi	r23, 0x3A	; 58
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <__ftoa_engine+0x180>
    2a0a:	70 e3       	ldi	r23, 0x30	; 48
    2a0c:	7c 93       	st	X, r23
    2a0e:	20 13       	cpse	r18, r16
    2a10:	b8 f7       	brcc	.-18     	; 0x2a00 <__ftoa_engine+0x174>
    2a12:	7e 91       	ld	r23, -X
    2a14:	70 61       	ori	r23, 0x10	; 16
    2a16:	7d 93       	st	X+, r23
    2a18:	30 f0       	brcs	.+12     	; 0x2a26 <__ftoa_engine+0x19a>
    2a1a:	83 95       	inc	r24
    2a1c:	71 e3       	ldi	r23, 0x31	; 49
    2a1e:	7d 93       	st	X+, r23
    2a20:	70 e3       	ldi	r23, 0x30	; 48
    2a22:	2a 95       	dec	r18
    2a24:	e1 f7       	brne	.-8      	; 0x2a1e <__ftoa_engine+0x192>
    2a26:	11 24       	eor	r1, r1
    2a28:	ef 90       	pop	r14
    2a2a:	ff 90       	pop	r15
    2a2c:	0f 91       	pop	r16
    2a2e:	1f 91       	pop	r17
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	99 27       	eor	r25, r25
    2a36:	87 fd       	sbrc	r24, 7
    2a38:	90 95       	com	r25
    2a3a:	08 95       	ret

00002a3c <strnlen_P>:
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	05 90       	lpm	r0, Z+
    2a40:	61 50       	subi	r22, 0x01	; 1
    2a42:	70 40       	sbci	r23, 0x00	; 0
    2a44:	01 10       	cpse	r0, r1
    2a46:	d8 f7       	brcc	.-10     	; 0x2a3e <strnlen_P+0x2>
    2a48:	80 95       	com	r24
    2a4a:	90 95       	com	r25
    2a4c:	8e 0f       	add	r24, r30
    2a4e:	9f 1f       	adc	r25, r31
    2a50:	08 95       	ret

00002a52 <strnlen>:
    2a52:	fc 01       	movw	r30, r24
    2a54:	61 50       	subi	r22, 0x01	; 1
    2a56:	70 40       	sbci	r23, 0x00	; 0
    2a58:	01 90       	ld	r0, Z+
    2a5a:	01 10       	cpse	r0, r1
    2a5c:	d8 f7       	brcc	.-10     	; 0x2a54 <strnlen+0x2>
    2a5e:	80 95       	com	r24
    2a60:	90 95       	com	r25
    2a62:	8e 0f       	add	r24, r30
    2a64:	9f 1f       	adc	r25, r31
    2a66:	08 95       	ret

00002a68 <fdevopen>:
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	31 f4       	brne	.+12     	; 0x2a80 <fdevopen+0x18>
    2a74:	61 15       	cp	r22, r1
    2a76:	71 05       	cpc	r23, r1
    2a78:	19 f4       	brne	.+6      	; 0x2a80 <fdevopen+0x18>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	39 c0       	rjmp	.+114    	; 0x2af2 <fdevopen+0x8a>
    2a80:	8b 01       	movw	r16, r22
    2a82:	ec 01       	movw	r28, r24
    2a84:	6e e0       	ldi	r22, 0x0E	; 14
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	e0 d0       	rcall	.+448    	; 0x2c4e <calloc>
    2a8e:	fc 01       	movw	r30, r24
    2a90:	89 2b       	or	r24, r25
    2a92:	99 f3       	breq	.-26     	; 0x2a7a <fdevopen+0x12>
    2a94:	80 e8       	ldi	r24, 0x80	; 128
    2a96:	83 83       	std	Z+3, r24	; 0x03
    2a98:	01 15       	cp	r16, r1
    2a9a:	11 05       	cpc	r17, r1
    2a9c:	71 f0       	breq	.+28     	; 0x2aba <fdevopen+0x52>
    2a9e:	02 87       	std	Z+10, r16	; 0x0a
    2aa0:	13 87       	std	Z+11, r17	; 0x0b
    2aa2:	81 e8       	ldi	r24, 0x81	; 129
    2aa4:	83 83       	std	Z+3, r24	; 0x03
    2aa6:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <__iob>
    2aaa:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <__iob+0x1>
    2aae:	89 2b       	or	r24, r25
    2ab0:	21 f4       	brne	.+8      	; 0x2aba <fdevopen+0x52>
    2ab2:	e0 93 38 20 	sts	0x2038, r30	; 0x802038 <__iob>
    2ab6:	f0 93 39 20 	sts	0x2039, r31	; 0x802039 <__iob+0x1>
    2aba:	20 97       	sbiw	r28, 0x00	; 0
    2abc:	c9 f0       	breq	.+50     	; 0x2af0 <fdevopen+0x88>
    2abe:	c0 87       	std	Z+8, r28	; 0x08
    2ac0:	d1 87       	std	Z+9, r29	; 0x09
    2ac2:	83 81       	ldd	r24, Z+3	; 0x03
    2ac4:	82 60       	ori	r24, 0x02	; 2
    2ac6:	83 83       	std	Z+3, r24	; 0x03
    2ac8:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__iob+0x2>
    2acc:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <__iob+0x3>
    2ad0:	89 2b       	or	r24, r25
    2ad2:	71 f4       	brne	.+28     	; 0x2af0 <fdevopen+0x88>
    2ad4:	e0 93 3a 20 	sts	0x203A, r30	; 0x80203a <__iob+0x2>
    2ad8:	f0 93 3b 20 	sts	0x203B, r31	; 0x80203b <__iob+0x3>
    2adc:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <__iob+0x4>
    2ae0:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <__iob+0x5>
    2ae4:	89 2b       	or	r24, r25
    2ae6:	21 f4       	brne	.+8      	; 0x2af0 <fdevopen+0x88>
    2ae8:	e0 93 3c 20 	sts	0x203C, r30	; 0x80203c <__iob+0x4>
    2aec:	f0 93 3d 20 	sts	0x203D, r31	; 0x80203d <__iob+0x5>
    2af0:	cf 01       	movw	r24, r30
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <fputc>:
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	fb 01       	movw	r30, r22
    2b06:	23 81       	ldd	r18, Z+3	; 0x03
    2b08:	21 fd       	sbrc	r18, 1
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <fputc+0x16>
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	9f ef       	ldi	r25, 0xFF	; 255
    2b10:	28 c0       	rjmp	.+80     	; 0x2b62 <fputc+0x66>
    2b12:	22 ff       	sbrs	r18, 2
    2b14:	16 c0       	rjmp	.+44     	; 0x2b42 <fputc+0x46>
    2b16:	46 81       	ldd	r20, Z+6	; 0x06
    2b18:	57 81       	ldd	r21, Z+7	; 0x07
    2b1a:	24 81       	ldd	r18, Z+4	; 0x04
    2b1c:	35 81       	ldd	r19, Z+5	; 0x05
    2b1e:	42 17       	cp	r20, r18
    2b20:	53 07       	cpc	r21, r19
    2b22:	44 f4       	brge	.+16     	; 0x2b34 <fputc+0x38>
    2b24:	a0 81       	ld	r26, Z
    2b26:	b1 81       	ldd	r27, Z+1	; 0x01
    2b28:	9d 01       	movw	r18, r26
    2b2a:	2f 5f       	subi	r18, 0xFF	; 255
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	20 83       	st	Z, r18
    2b30:	31 83       	std	Z+1, r19	; 0x01
    2b32:	8c 93       	st	X, r24
    2b34:	26 81       	ldd	r18, Z+6	; 0x06
    2b36:	37 81       	ldd	r19, Z+7	; 0x07
    2b38:	2f 5f       	subi	r18, 0xFF	; 255
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	26 83       	std	Z+6, r18	; 0x06
    2b3e:	37 83       	std	Z+7, r19	; 0x07
    2b40:	10 c0       	rjmp	.+32     	; 0x2b62 <fputc+0x66>
    2b42:	eb 01       	movw	r28, r22
    2b44:	09 2f       	mov	r16, r25
    2b46:	18 2f       	mov	r17, r24
    2b48:	00 84       	ldd	r0, Z+8	; 0x08
    2b4a:	f1 85       	ldd	r31, Z+9	; 0x09
    2b4c:	e0 2d       	mov	r30, r0
    2b4e:	19 95       	eicall
    2b50:	89 2b       	or	r24, r25
    2b52:	e1 f6       	brne	.-72     	; 0x2b0c <fputc+0x10>
    2b54:	8e 81       	ldd	r24, Y+6	; 0x06
    2b56:	9f 81       	ldd	r25, Y+7	; 0x07
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	8e 83       	std	Y+6, r24	; 0x06
    2b5c:	9f 83       	std	Y+7, r25	; 0x07
    2b5e:	81 2f       	mov	r24, r17
    2b60:	90 2f       	mov	r25, r16
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	08 95       	ret

00002b6c <printf>:
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	ae 01       	movw	r20, r28
    2b76:	4a 5f       	subi	r20, 0xFA	; 250
    2b78:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	61 91       	ld	r22, Z+
    2b7e:	71 91       	ld	r23, Z+
    2b80:	af 01       	movw	r20, r30
    2b82:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__iob+0x2>
    2b86:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <__iob+0x3>
    2b8a:	51 d9       	rcall	.-3422   	; 0x1e2e <vfprintf>
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <__ultoa_invert>:
    2b92:	fa 01       	movw	r30, r20
    2b94:	aa 27       	eor	r26, r26
    2b96:	28 30       	cpi	r18, 0x08	; 8
    2b98:	51 f1       	breq	.+84     	; 0x2bee <__ultoa_invert+0x5c>
    2b9a:	20 31       	cpi	r18, 0x10	; 16
    2b9c:	81 f1       	breq	.+96     	; 0x2bfe <__ultoa_invert+0x6c>
    2b9e:	e8 94       	clt
    2ba0:	6f 93       	push	r22
    2ba2:	6e 7f       	andi	r22, 0xFE	; 254
    2ba4:	6e 5f       	subi	r22, 0xFE	; 254
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	af 4f       	sbci	r26, 0xFF	; 255
    2bae:	b1 e0       	ldi	r27, 0x01	; 1
    2bb0:	3e d0       	rcall	.+124    	; 0x2c2e <__ultoa_invert+0x9c>
    2bb2:	b4 e0       	ldi	r27, 0x04	; 4
    2bb4:	3c d0       	rcall	.+120    	; 0x2c2e <__ultoa_invert+0x9c>
    2bb6:	67 0f       	add	r22, r23
    2bb8:	78 1f       	adc	r23, r24
    2bba:	89 1f       	adc	r24, r25
    2bbc:	9a 1f       	adc	r25, r26
    2bbe:	a1 1d       	adc	r26, r1
    2bc0:	68 0f       	add	r22, r24
    2bc2:	79 1f       	adc	r23, r25
    2bc4:	8a 1f       	adc	r24, r26
    2bc6:	91 1d       	adc	r25, r1
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	6a 0f       	add	r22, r26
    2bcc:	71 1d       	adc	r23, r1
    2bce:	81 1d       	adc	r24, r1
    2bd0:	91 1d       	adc	r25, r1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	20 d0       	rcall	.+64     	; 0x2c16 <__ultoa_invert+0x84>
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <__ultoa_invert+0x48>
    2bd8:	68 94       	set
    2bda:	3f 91       	pop	r19
    2bdc:	2a e0       	ldi	r18, 0x0A	; 10
    2bde:	26 9f       	mul	r18, r22
    2be0:	11 24       	eor	r1, r1
    2be2:	30 19       	sub	r19, r0
    2be4:	30 5d       	subi	r19, 0xD0	; 208
    2be6:	31 93       	st	Z+, r19
    2be8:	de f6       	brtc	.-74     	; 0x2ba0 <__ultoa_invert+0xe>
    2bea:	cf 01       	movw	r24, r30
    2bec:	08 95       	ret
    2bee:	46 2f       	mov	r20, r22
    2bf0:	47 70       	andi	r20, 0x07	; 7
    2bf2:	40 5d       	subi	r20, 0xD0	; 208
    2bf4:	41 93       	st	Z+, r20
    2bf6:	b3 e0       	ldi	r27, 0x03	; 3
    2bf8:	0f d0       	rcall	.+30     	; 0x2c18 <__ultoa_invert+0x86>
    2bfa:	c9 f7       	brne	.-14     	; 0x2bee <__ultoa_invert+0x5c>
    2bfc:	f6 cf       	rjmp	.-20     	; 0x2bea <__ultoa_invert+0x58>
    2bfe:	46 2f       	mov	r20, r22
    2c00:	4f 70       	andi	r20, 0x0F	; 15
    2c02:	40 5d       	subi	r20, 0xD0	; 208
    2c04:	4a 33       	cpi	r20, 0x3A	; 58
    2c06:	18 f0       	brcs	.+6      	; 0x2c0e <__ultoa_invert+0x7c>
    2c08:	49 5d       	subi	r20, 0xD9	; 217
    2c0a:	31 fd       	sbrc	r19, 1
    2c0c:	40 52       	subi	r20, 0x20	; 32
    2c0e:	41 93       	st	Z+, r20
    2c10:	02 d0       	rcall	.+4      	; 0x2c16 <__ultoa_invert+0x84>
    2c12:	a9 f7       	brne	.-22     	; 0x2bfe <__ultoa_invert+0x6c>
    2c14:	ea cf       	rjmp	.-44     	; 0x2bea <__ultoa_invert+0x58>
    2c16:	b4 e0       	ldi	r27, 0x04	; 4
    2c18:	a6 95       	lsr	r26
    2c1a:	97 95       	ror	r25
    2c1c:	87 95       	ror	r24
    2c1e:	77 95       	ror	r23
    2c20:	67 95       	ror	r22
    2c22:	ba 95       	dec	r27
    2c24:	c9 f7       	brne	.-14     	; 0x2c18 <__ultoa_invert+0x86>
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	61 05       	cpc	r22, r1
    2c2a:	71 05       	cpc	r23, r1
    2c2c:	08 95       	ret
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	0a 2e       	mov	r0, r26
    2c34:	06 94       	lsr	r0
    2c36:	57 95       	ror	r21
    2c38:	47 95       	ror	r20
    2c3a:	37 95       	ror	r19
    2c3c:	27 95       	ror	r18
    2c3e:	ba 95       	dec	r27
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <__ultoa_invert+0xa2>
    2c42:	62 0f       	add	r22, r18
    2c44:	73 1f       	adc	r23, r19
    2c46:	84 1f       	adc	r24, r20
    2c48:	95 1f       	adc	r25, r21
    2c4a:	a0 1d       	adc	r26, r0
    2c4c:	08 95       	ret

00002c4e <calloc>:
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	86 9f       	mul	r24, r22
    2c58:	80 01       	movw	r16, r0
    2c5a:	87 9f       	mul	r24, r23
    2c5c:	10 0d       	add	r17, r0
    2c5e:	96 9f       	mul	r25, r22
    2c60:	10 0d       	add	r17, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	c8 01       	movw	r24, r16
    2c66:	0d d0       	rcall	.+26     	; 0x2c82 <malloc>
    2c68:	ec 01       	movw	r28, r24
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <calloc+0x28>
    2c6e:	a8 01       	movw	r20, r16
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	33 d1       	rcall	.+614    	; 0x2edc <memset>
    2c76:	ce 01       	movw	r24, r28
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	08 95       	ret

00002c82 <malloc>:
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	91 05       	cpc	r25, r1
    2c8a:	10 f4       	brcc	.+4      	; 0x2c90 <malloc+0xe>
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <__flp>
    2c94:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <__flp+0x1>
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	c0 e0       	ldi	r28, 0x00	; 0
    2c9e:	d0 e0       	ldi	r29, 0x00	; 0
    2ca0:	30 97       	sbiw	r30, 0x00	; 0
    2ca2:	11 f1       	breq	.+68     	; 0x2ce8 <malloc+0x66>
    2ca4:	40 81       	ld	r20, Z
    2ca6:	51 81       	ldd	r21, Z+1	; 0x01
    2ca8:	48 17       	cp	r20, r24
    2caa:	59 07       	cpc	r21, r25
    2cac:	c0 f0       	brcs	.+48     	; 0x2cde <malloc+0x5c>
    2cae:	48 17       	cp	r20, r24
    2cb0:	59 07       	cpc	r21, r25
    2cb2:	61 f4       	brne	.+24     	; 0x2ccc <malloc+0x4a>
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 97       	sbiw	r28, 0x00	; 0
    2cba:	19 f0       	breq	.+6      	; 0x2cc2 <malloc+0x40>
    2cbc:	8a 83       	std	Y+2, r24	; 0x02
    2cbe:	9b 83       	std	Y+3, r25	; 0x03
    2cc0:	2b c0       	rjmp	.+86     	; 0x2d18 <malloc+0x96>
    2cc2:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__flp>
    2cc6:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__flp+0x1>
    2cca:	26 c0       	rjmp	.+76     	; 0x2d18 <malloc+0x96>
    2ccc:	21 15       	cp	r18, r1
    2cce:	31 05       	cpc	r19, r1
    2cd0:	19 f0       	breq	.+6      	; 0x2cd8 <malloc+0x56>
    2cd2:	42 17       	cp	r20, r18
    2cd4:	53 07       	cpc	r21, r19
    2cd6:	18 f4       	brcc	.+6      	; 0x2cde <malloc+0x5c>
    2cd8:	9a 01       	movw	r18, r20
    2cda:	be 01       	movw	r22, r28
    2cdc:	df 01       	movw	r26, r30
    2cde:	ef 01       	movw	r28, r30
    2ce0:	02 80       	ldd	r0, Z+2	; 0x02
    2ce2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ce4:	e0 2d       	mov	r30, r0
    2ce6:	dc cf       	rjmp	.-72     	; 0x2ca0 <malloc+0x1e>
    2ce8:	21 15       	cp	r18, r1
    2cea:	31 05       	cpc	r19, r1
    2cec:	09 f1       	breq	.+66     	; 0x2d30 <malloc+0xae>
    2cee:	28 1b       	sub	r18, r24
    2cf0:	39 0b       	sbc	r19, r25
    2cf2:	24 30       	cpi	r18, 0x04	; 4
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	90 f4       	brcc	.+36     	; 0x2d1c <malloc+0x9a>
    2cf8:	12 96       	adiw	r26, 0x02	; 2
    2cfa:	8d 91       	ld	r24, X+
    2cfc:	9c 91       	ld	r25, X
    2cfe:	13 97       	sbiw	r26, 0x03	; 3
    2d00:	61 15       	cp	r22, r1
    2d02:	71 05       	cpc	r23, r1
    2d04:	21 f0       	breq	.+8      	; 0x2d0e <malloc+0x8c>
    2d06:	fb 01       	movw	r30, r22
    2d08:	82 83       	std	Z+2, r24	; 0x02
    2d0a:	93 83       	std	Z+3, r25	; 0x03
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <malloc+0x94>
    2d0e:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__flp>
    2d12:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__flp+0x1>
    2d16:	fd 01       	movw	r30, r26
    2d18:	32 96       	adiw	r30, 0x02	; 2
    2d1a:	44 c0       	rjmp	.+136    	; 0x2da4 <malloc+0x122>
    2d1c:	fd 01       	movw	r30, r26
    2d1e:	e2 0f       	add	r30, r18
    2d20:	f3 1f       	adc	r31, r19
    2d22:	81 93       	st	Z+, r24
    2d24:	91 93       	st	Z+, r25
    2d26:	22 50       	subi	r18, 0x02	; 2
    2d28:	31 09       	sbc	r19, r1
    2d2a:	2d 93       	st	X+, r18
    2d2c:	3c 93       	st	X, r19
    2d2e:	3a c0       	rjmp	.+116    	; 0x2da4 <malloc+0x122>
    2d30:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    2d34:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    2d38:	23 2b       	or	r18, r19
    2d3a:	41 f4       	brne	.+16     	; 0x2d4c <malloc+0xca>
    2d3c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2d40:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2d44:	20 93 3e 20 	sts	0x203E, r18	; 0x80203e <__brkval>
    2d48:	30 93 3f 20 	sts	0x203F, r19	; 0x80203f <__brkval+0x1>
    2d4c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2d50:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2d54:	21 15       	cp	r18, r1
    2d56:	31 05       	cpc	r19, r1
    2d58:	41 f4       	brne	.+16     	; 0x2d6a <malloc+0xe8>
    2d5a:	2d b7       	in	r18, 0x3d	; 61
    2d5c:	3e b7       	in	r19, 0x3e	; 62
    2d5e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2d62:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2d66:	24 1b       	sub	r18, r20
    2d68:	35 0b       	sbc	r19, r21
    2d6a:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <__brkval>
    2d6e:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <__brkval+0x1>
    2d72:	e2 17       	cp	r30, r18
    2d74:	f3 07       	cpc	r31, r19
    2d76:	a0 f4       	brcc	.+40     	; 0x2da0 <malloc+0x11e>
    2d78:	2e 1b       	sub	r18, r30
    2d7a:	3f 0b       	sbc	r19, r31
    2d7c:	28 17       	cp	r18, r24
    2d7e:	39 07       	cpc	r19, r25
    2d80:	78 f0       	brcs	.+30     	; 0x2da0 <malloc+0x11e>
    2d82:	ac 01       	movw	r20, r24
    2d84:	4e 5f       	subi	r20, 0xFE	; 254
    2d86:	5f 4f       	sbci	r21, 0xFF	; 255
    2d88:	24 17       	cp	r18, r20
    2d8a:	35 07       	cpc	r19, r21
    2d8c:	48 f0       	brcs	.+18     	; 0x2da0 <malloc+0x11e>
    2d8e:	4e 0f       	add	r20, r30
    2d90:	5f 1f       	adc	r21, r31
    2d92:	40 93 3e 20 	sts	0x203E, r20	; 0x80203e <__brkval>
    2d96:	50 93 3f 20 	sts	0x203F, r21	; 0x80203f <__brkval+0x1>
    2d9a:	81 93       	st	Z+, r24
    2d9c:	91 93       	st	Z+, r25
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <malloc+0x122>
    2da0:	e0 e0       	ldi	r30, 0x00	; 0
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	cf 01       	movw	r24, r30
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	08 95       	ret

00002dac <free>:
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	09 f4       	brne	.+2      	; 0x2dba <free+0xe>
    2db8:	8c c0       	rjmp	.+280    	; 0x2ed2 <free+0x126>
    2dba:	fc 01       	movw	r30, r24
    2dbc:	32 97       	sbiw	r30, 0x02	; 2
    2dbe:	12 82       	std	Z+2, r1	; 0x02
    2dc0:	13 82       	std	Z+3, r1	; 0x03
    2dc2:	00 91 40 20 	lds	r16, 0x2040	; 0x802040 <__flp>
    2dc6:	10 91 41 20 	lds	r17, 0x2041	; 0x802041 <__flp+0x1>
    2dca:	01 15       	cp	r16, r1
    2dcc:	11 05       	cpc	r17, r1
    2dce:	81 f4       	brne	.+32     	; 0x2df0 <free+0x44>
    2dd0:	20 81       	ld	r18, Z
    2dd2:	31 81       	ldd	r19, Z+1	; 0x01
    2dd4:	82 0f       	add	r24, r18
    2dd6:	93 1f       	adc	r25, r19
    2dd8:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    2ddc:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    2de0:	28 17       	cp	r18, r24
    2de2:	39 07       	cpc	r19, r25
    2de4:	79 f5       	brne	.+94     	; 0x2e44 <free+0x98>
    2de6:	e0 93 3e 20 	sts	0x203E, r30	; 0x80203e <__brkval>
    2dea:	f0 93 3f 20 	sts	0x203F, r31	; 0x80203f <__brkval+0x1>
    2dee:	71 c0       	rjmp	.+226    	; 0x2ed2 <free+0x126>
    2df0:	d8 01       	movw	r26, r16
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	ae 17       	cp	r26, r30
    2df8:	bf 07       	cpc	r27, r31
    2dfa:	50 f4       	brcc	.+20     	; 0x2e10 <free+0x64>
    2dfc:	12 96       	adiw	r26, 0x02	; 2
    2dfe:	2d 91       	ld	r18, X+
    2e00:	3c 91       	ld	r19, X
    2e02:	13 97       	sbiw	r26, 0x03	; 3
    2e04:	ad 01       	movw	r20, r26
    2e06:	21 15       	cp	r18, r1
    2e08:	31 05       	cpc	r19, r1
    2e0a:	09 f1       	breq	.+66     	; 0x2e4e <free+0xa2>
    2e0c:	d9 01       	movw	r26, r18
    2e0e:	f3 cf       	rjmp	.-26     	; 0x2df6 <free+0x4a>
    2e10:	9d 01       	movw	r18, r26
    2e12:	da 01       	movw	r26, r20
    2e14:	22 83       	std	Z+2, r18	; 0x02
    2e16:	33 83       	std	Z+3, r19	; 0x03
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	86 0f       	add	r24, r22
    2e1e:	97 1f       	adc	r25, r23
    2e20:	82 17       	cp	r24, r18
    2e22:	93 07       	cpc	r25, r19
    2e24:	69 f4       	brne	.+26     	; 0x2e40 <free+0x94>
    2e26:	ec 01       	movw	r28, r24
    2e28:	28 81       	ld	r18, Y
    2e2a:	39 81       	ldd	r19, Y+1	; 0x01
    2e2c:	26 0f       	add	r18, r22
    2e2e:	37 1f       	adc	r19, r23
    2e30:	2e 5f       	subi	r18, 0xFE	; 254
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	20 83       	st	Z, r18
    2e36:	31 83       	std	Z+1, r19	; 0x01
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3c:	82 83       	std	Z+2, r24	; 0x02
    2e3e:	93 83       	std	Z+3, r25	; 0x03
    2e40:	45 2b       	or	r20, r21
    2e42:	29 f4       	brne	.+10     	; 0x2e4e <free+0xa2>
    2e44:	e0 93 40 20 	sts	0x2040, r30	; 0x802040 <__flp>
    2e48:	f0 93 41 20 	sts	0x2041, r31	; 0x802041 <__flp+0x1>
    2e4c:	42 c0       	rjmp	.+132    	; 0x2ed2 <free+0x126>
    2e4e:	12 96       	adiw	r26, 0x02	; 2
    2e50:	ed 93       	st	X+, r30
    2e52:	fc 93       	st	X, r31
    2e54:	13 97       	sbiw	r26, 0x03	; 3
    2e56:	ed 01       	movw	r28, r26
    2e58:	49 91       	ld	r20, Y+
    2e5a:	59 91       	ld	r21, Y+
    2e5c:	9e 01       	movw	r18, r28
    2e5e:	24 0f       	add	r18, r20
    2e60:	35 1f       	adc	r19, r21
    2e62:	e2 17       	cp	r30, r18
    2e64:	f3 07       	cpc	r31, r19
    2e66:	71 f4       	brne	.+28     	; 0x2e84 <free+0xd8>
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	84 0f       	add	r24, r20
    2e6e:	95 1f       	adc	r25, r21
    2e70:	02 96       	adiw	r24, 0x02	; 2
    2e72:	8d 93       	st	X+, r24
    2e74:	9c 93       	st	X, r25
    2e76:	11 97       	sbiw	r26, 0x01	; 1
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	12 96       	adiw	r26, 0x02	; 2
    2e7e:	8d 93       	st	X+, r24
    2e80:	9c 93       	st	X, r25
    2e82:	13 97       	sbiw	r26, 0x03	; 3
    2e84:	e0 e0       	ldi	r30, 0x00	; 0
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	d8 01       	movw	r26, r16
    2e8a:	12 96       	adiw	r26, 0x02	; 2
    2e8c:	8d 91       	ld	r24, X+
    2e8e:	9c 91       	ld	r25, X
    2e90:	13 97       	sbiw	r26, 0x03	; 3
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	19 f0       	breq	.+6      	; 0x2e9c <free+0xf0>
    2e96:	f8 01       	movw	r30, r16
    2e98:	8c 01       	movw	r16, r24
    2e9a:	f6 cf       	rjmp	.-20     	; 0x2e88 <free+0xdc>
    2e9c:	8d 91       	ld	r24, X+
    2e9e:	9c 91       	ld	r25, X
    2ea0:	98 01       	movw	r18, r16
    2ea2:	2e 5f       	subi	r18, 0xFE	; 254
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	82 0f       	add	r24, r18
    2ea8:	93 1f       	adc	r25, r19
    2eaa:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    2eae:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	69 f4       	brne	.+26     	; 0x2ed2 <free+0x126>
    2eb8:	30 97       	sbiw	r30, 0x00	; 0
    2eba:	29 f4       	brne	.+10     	; 0x2ec6 <free+0x11a>
    2ebc:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <__flp>
    2ec0:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <__flp+0x1>
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <free+0x11e>
    2ec6:	12 82       	std	Z+2, r1	; 0x02
    2ec8:	13 82       	std	Z+3, r1	; 0x03
    2eca:	00 93 3e 20 	sts	0x203E, r16	; 0x80203e <__brkval>
    2ece:	10 93 3f 20 	sts	0x203F, r17	; 0x80203f <__brkval+0x1>
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	08 95       	ret

00002edc <memset>:
    2edc:	dc 01       	movw	r26, r24
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <memset+0x6>
    2ee0:	6d 93       	st	X+, r22
    2ee2:	41 50       	subi	r20, 0x01	; 1
    2ee4:	50 40       	sbci	r21, 0x00	; 0
    2ee6:	e0 f7       	brcc	.-8      	; 0x2ee0 <memset+0x4>
    2ee8:	08 95       	ret

00002eea <_exit>:
    2eea:	f8 94       	cli

00002eec <__stop_program>:
    2eec:	ff cf       	rjmp	.-2      	; 0x2eec <__stop_program>
