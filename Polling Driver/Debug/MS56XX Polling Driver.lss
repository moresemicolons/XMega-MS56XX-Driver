
MS56XX Polling Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00802000  000029d8  00002a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802032  00802032  00002a9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00002b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bfd0  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c49  00000000  00000000  0000ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000446e  00000000  00000000  00012941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00016db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029463  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028c2  00000000  00000000  0004066b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00042f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009836  00000000  00000000  000430ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c1       	rjmp	.+744    	; 0x2ea <__ctors_end>
       2:	00 00       	nop
       4:	93 c1       	rjmp	.+806    	; 0x32c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c1       	rjmp	.+802    	; 0x32c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c1       	rjmp	.+798    	; 0x32c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c1       	rjmp	.+794    	; 0x32c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c1       	rjmp	.+790    	; 0x32c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c1       	rjmp	.+786    	; 0x32c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c1       	rjmp	.+782    	; 0x32c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c1       	rjmp	.+778    	; 0x32c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c1       	rjmp	.+774    	; 0x32c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c1       	rjmp	.+770    	; 0x32c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c1       	rjmp	.+766    	; 0x32c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c1       	rjmp	.+762    	; 0x32c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c1       	rjmp	.+758    	; 0x32c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c1       	rjmp	.+754    	; 0x32c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c1       	rjmp	.+750    	; 0x32c <__bad_interrupt>
      3e:	00 00       	nop
      40:	75 c1       	rjmp	.+746    	; 0x32c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c1       	rjmp	.+742    	; 0x32c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c1       	rjmp	.+738    	; 0x32c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c1       	rjmp	.+734    	; 0x32c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c1       	rjmp	.+730    	; 0x32c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c1       	rjmp	.+726    	; 0x32c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c1       	rjmp	.+722    	; 0x32c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c1       	rjmp	.+718    	; 0x32c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c1       	rjmp	.+714    	; 0x32c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c1       	rjmp	.+710    	; 0x32c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c1       	rjmp	.+706    	; 0x32c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c1       	rjmp	.+702    	; 0x32c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c1       	rjmp	.+698    	; 0x32c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c1       	rjmp	.+694    	; 0x32c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c1       	rjmp	.+690    	; 0x32c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c1       	rjmp	.+686    	; 0x32c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c1       	rjmp	.+682    	; 0x32c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c1       	rjmp	.+678    	; 0x32c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c1       	rjmp	.+674    	; 0x32c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c1       	rjmp	.+670    	; 0x32c <__bad_interrupt>
      8e:	00 00       	nop
      90:	4d c1       	rjmp	.+666    	; 0x32c <__bad_interrupt>
      92:	00 00       	nop
      94:	4b c1       	rjmp	.+662    	; 0x32c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c1       	rjmp	.+658    	; 0x32c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c1       	rjmp	.+654    	; 0x32c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c1       	rjmp	.+650    	; 0x32c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c1       	rjmp	.+646    	; 0x32c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	41 c1       	rjmp	.+642    	; 0x32c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3f c1       	rjmp	.+638    	; 0x32c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c1       	rjmp	.+634    	; 0x32c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c1       	rjmp	.+630    	; 0x32c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c1       	rjmp	.+626    	; 0x32c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c1       	rjmp	.+622    	; 0x32c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c1       	rjmp	.+618    	; 0x32c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c1       	rjmp	.+614    	; 0x32c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c1       	rjmp	.+610    	; 0x32c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2f c1       	rjmp	.+606    	; 0x32c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2d c1       	rjmp	.+602    	; 0x32c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c1       	rjmp	.+598    	; 0x32c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	29 c1       	rjmp	.+594    	; 0x32c <__bad_interrupt>
      da:	00 00       	nop
      dc:	27 c1       	rjmp	.+590    	; 0x32c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c1       	rjmp	.+586    	; 0x32c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	23 c1       	rjmp	.+582    	; 0x32c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	21 c1       	rjmp	.+578    	; 0x32c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	1f c1       	rjmp	.+574    	; 0x32c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	1d c1       	rjmp	.+570    	; 0x32c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1b c1       	rjmp	.+566    	; 0x32c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	19 c1       	rjmp	.+562    	; 0x32c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	17 c1       	rjmp	.+558    	; 0x32c <__bad_interrupt>
      fe:	00 00       	nop
     100:	15 c1       	rjmp	.+554    	; 0x32c <__bad_interrupt>
     102:	00 00       	nop
     104:	13 c1       	rjmp	.+550    	; 0x32c <__bad_interrupt>
     106:	00 00       	nop
     108:	11 c1       	rjmp	.+546    	; 0x32c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	0f c1       	rjmp	.+542    	; 0x32c <__bad_interrupt>
     10e:	00 00       	nop
     110:	0d c1       	rjmp	.+538    	; 0x32c <__bad_interrupt>
     112:	00 00       	nop
     114:	0b c1       	rjmp	.+534    	; 0x32c <__bad_interrupt>
     116:	00 00       	nop
     118:	09 c1       	rjmp	.+530    	; 0x32c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	07 c1       	rjmp	.+526    	; 0x32c <__bad_interrupt>
     11e:	00 00       	nop
     120:	05 c1       	rjmp	.+522    	; 0x32c <__bad_interrupt>
     122:	00 00       	nop
     124:	03 c1       	rjmp	.+518    	; 0x32c <__bad_interrupt>
     126:	00 00       	nop
     128:	01 c1       	rjmp	.+514    	; 0x32c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ff c0       	rjmp	.+510    	; 0x32c <__bad_interrupt>
     12e:	00 00       	nop
     130:	fd c0       	rjmp	.+506    	; 0x32c <__bad_interrupt>
     132:	00 00       	nop
     134:	fb c0       	rjmp	.+502    	; 0x32c <__bad_interrupt>
     136:	00 00       	nop
     138:	f9 c0       	rjmp	.+498    	; 0x32c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	f7 c0       	rjmp	.+494    	; 0x32c <__bad_interrupt>
     13e:	00 00       	nop
     140:	f5 c0       	rjmp	.+490    	; 0x32c <__bad_interrupt>
     142:	00 00       	nop
     144:	f3 c0       	rjmp	.+486    	; 0x32c <__bad_interrupt>
     146:	00 00       	nop
     148:	f1 c0       	rjmp	.+482    	; 0x32c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ef c0       	rjmp	.+478    	; 0x32c <__bad_interrupt>
     14e:	00 00       	nop
     150:	ed c0       	rjmp	.+474    	; 0x32c <__bad_interrupt>
     152:	00 00       	nop
     154:	eb c0       	rjmp	.+470    	; 0x32c <__bad_interrupt>
     156:	00 00       	nop
     158:	e9 c0       	rjmp	.+466    	; 0x32c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	e7 c0       	rjmp	.+462    	; 0x32c <__bad_interrupt>
     15e:	00 00       	nop
     160:	e5 c0       	rjmp	.+458    	; 0x32c <__bad_interrupt>
     162:	00 00       	nop
     164:	e3 c0       	rjmp	.+454    	; 0x32c <__bad_interrupt>
     166:	00 00       	nop
     168:	e1 c0       	rjmp	.+450    	; 0x32c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	df c0       	rjmp	.+446    	; 0x32c <__bad_interrupt>
     16e:	00 00       	nop
     170:	dd c0       	rjmp	.+442    	; 0x32c <__bad_interrupt>
     172:	00 00       	nop
     174:	db c0       	rjmp	.+438    	; 0x32c <__bad_interrupt>
     176:	00 00       	nop
     178:	d9 c0       	rjmp	.+434    	; 0x32c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	d7 c0       	rjmp	.+430    	; 0x32c <__bad_interrupt>
     17e:	00 00       	nop
     180:	d5 c0       	rjmp	.+426    	; 0x32c <__bad_interrupt>
     182:	00 00       	nop
     184:	d3 c0       	rjmp	.+422    	; 0x32c <__bad_interrupt>
     186:	00 00       	nop
     188:	d1 c0       	rjmp	.+418    	; 0x32c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	cf c0       	rjmp	.+414    	; 0x32c <__bad_interrupt>
     18e:	00 00       	nop
     190:	cd c0       	rjmp	.+410    	; 0x32c <__bad_interrupt>
     192:	00 00       	nop
     194:	cb c0       	rjmp	.+406    	; 0x32c <__bad_interrupt>
     196:	00 00       	nop
     198:	c9 c0       	rjmp	.+402    	; 0x32c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	c7 c0       	rjmp	.+398    	; 0x32c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c5 c0       	rjmp	.+394    	; 0x32c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c3 c0       	rjmp	.+390    	; 0x32c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c1 c0       	rjmp	.+386    	; 0x32c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	bf c0       	rjmp	.+382    	; 0x32c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	bd c0       	rjmp	.+378    	; 0x32c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bb c0       	rjmp	.+374    	; 0x32c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	b9 c0       	rjmp	.+370    	; 0x32c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	b7 c0       	rjmp	.+366    	; 0x32c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b5 c0       	rjmp	.+362    	; 0x32c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b3 c0       	rjmp	.+358    	; 0x32c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b1 c0       	rjmp	.+354    	; 0x32c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	af c0       	rjmp	.+350    	; 0x32c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	ad c0       	rjmp	.+346    	; 0x32c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ab c0       	rjmp	.+342    	; 0x32c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	a9 c0       	rjmp	.+338    	; 0x32c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	a7 c0       	rjmp	.+334    	; 0x32c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a5 c0       	rjmp	.+330    	; 0x32c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a3 c0       	rjmp	.+326    	; 0x32c <__bad_interrupt>
	...

000001e8 <__trampolines_end>:
     1e8:	6e 61       	ori	r22, 0x1E	; 30
     1ea:	6e 00       	.word	0x006e	; ????

000001ec <__c.2240>:
     1ec:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1fc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     20c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     21c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     22c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     23c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     24c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     25c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     26c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     27c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     28c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     29c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ac:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2bc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2cc:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2dc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df e5       	ldi	r29, 0x5F	; 95
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	10 e2       	ldi	r17, 0x20	; 32
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b0 e2       	ldi	r27, 0x20	; 32
     300:	e8 ed       	ldi	r30, 0xD8	; 216
     302:	f9 e2       	ldi	r31, 0x29	; 41
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a2 33       	cpi	r26, 0x32	; 50
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	20 e2       	ldi	r18, 0x20	; 32
     316:	a2 e3       	ldi	r26, 0x32	; 50
     318:	b0 e2       	ldi	r27, 0x20	; 32
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	a2 34       	cpi	r26, 0x42	; 66
     320:	b2 07       	cpc	r27, r18
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>
     324:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
     328:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <_exit>

0000032c <__bad_interrupt>:
     32c:	69 ce       	rjmp	.-814    	; 0x0 <__vectors>

0000032e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     334:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     338:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     33c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     340:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     344:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     348:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     34c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     34e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     350:	e0 e5       	ldi	r30, 0x50	; 80
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	82 60       	ori	r24, 0x02	; 2
     358:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     35a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     35c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     35e:	81 ff       	sbrs	r24, 1
     360:	fd cf       	rjmp	.-6      	; 0x35c <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e4       	ldi	r24, 0x40	; 64
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	40 d0       	rcall	.+128    	; 0x3ea <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     36a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     36c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     36e:	e0 e5       	ldi	r30, 0x50	; 80
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8e 7f       	andi	r24, 0xFE	; 254
     376:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     378:	9f bf       	out	0x3f, r25	; 63
     37a:	08 95       	ret

0000037c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     37c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     37e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     380:	e8 2f       	mov	r30, r24
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	e0 59       	subi	r30, 0x90	; 144
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	60 95       	com	r22
     38a:	80 81       	ld	r24, Z
     38c:	68 23       	and	r22, r24
     38e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     390:	9f bf       	out	0x3f, r25	; 63
     392:	08 95       	ret

00000394 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	1f 92       	push	r1
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     39e:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <stdio_base>
     3a2:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <stdio_base+0x1>
     3a6:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <__data_end>
     3aa:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <__data_end+0x1>
     3ae:	be 01       	movw	r22, r28
     3b0:	6f 5f       	subi	r22, 0xFF	; 255
     3b2:	7f 4f       	sbci	r23, 0xFF	; 255
     3b4:	19 95       	eicall
	return c;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
}
     3b8:	08 2e       	mov	r0, r24
     3ba:	00 0c       	add	r0, r0
     3bc:	99 0b       	sbc	r25, r25
     3be:	0f 90       	pop	r0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     3c6:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     3c8:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <stdio_base>
     3cc:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <stdio_base+0x1>
     3d0:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <ptr_put>
     3d4:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <ptr_put+0x1>
     3d8:	19 95       	eicall
     3da:	99 23       	and	r25, r25
     3dc:	1c f0       	brlt	.+6      	; 0x3e4 <_write+0x1e>
		return -1;
	}
	return 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     3e8:	08 95       	ret

000003ea <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     3ea:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     3ec:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     3ee:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     3f0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     3f2:	60 83       	st	Z, r22
	ret                             // Return to caller
     3f4:	08 95       	ret

000003f6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     3f6:	fc 01       	movw	r30, r24
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	95 ff       	sbrs	r25, 5
     3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <usart_putchar+0x2>
     3fe:	60 83       	st	Z, r22
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret

00000406 <usart_getchar>:
     406:	fc 01       	movw	r30, r24
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	99 23       	and	r25, r25
     40c:	ec f7       	brge	.-6      	; 0x408 <usart_getchar+0x2>
     40e:	80 81       	ld	r24, Z
     410:	08 95       	ret

00000412 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     412:	2f 92       	push	r2
     414:	3f 92       	push	r3
     416:	4f 92       	push	r4
     418:	5f 92       	push	r5
     41a:	6f 92       	push	r6
     41c:	7f 92       	push	r7
     41e:	8f 92       	push	r8
     420:	9f 92       	push	r9
     422:	af 92       	push	r10
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	1c 01       	movw	r2, r24
     436:	2a 01       	movw	r4, r20
     438:	3b 01       	movw	r6, r22
     43a:	48 01       	movw	r8, r16
     43c:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     43e:	d9 01       	movw	r26, r18
     440:	c8 01       	movw	r24, r16
     442:	68 94       	set
     444:	12 f8       	bld	r1, 2
     446:	b6 95       	lsr	r27
     448:	a7 95       	ror	r26
     44a:	97 95       	ror	r25
     44c:	87 95       	ror	r24
     44e:	16 94       	lsr	r1
     450:	d1 f7       	brne	.-12     	; 0x446 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     452:	b9 01       	movw	r22, r18
     454:	a8 01       	movw	r20, r16
     456:	03 2e       	mov	r0, r19
     458:	36 e1       	ldi	r19, 0x16	; 22
     45a:	76 95       	lsr	r23
     45c:	67 95       	ror	r22
     45e:	57 95       	ror	r21
     460:	47 95       	ror	r20
     462:	3a 95       	dec	r19
     464:	d1 f7       	brne	.-12     	; 0x45a <usart_set_baudrate+0x48>
     466:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     468:	f1 01       	movw	r30, r2
     46a:	24 81       	ldd	r18, Z+4	; 0x04
     46c:	22 fd       	sbrc	r18, 2
     46e:	08 c0       	rjmp	.+16     	; 0x480 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     470:	b6 95       	lsr	r27
     472:	a7 95       	ror	r26
     474:	97 95       	ror	r25
     476:	87 95       	ror	r24
		min_rate /= 2;
     478:	76 95       	lsr	r23
     47a:	67 95       	ror	r22
     47c:	57 95       	ror	r21
     47e:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     480:	84 15       	cp	r24, r4
     482:	95 05       	cpc	r25, r5
     484:	a6 05       	cpc	r26, r6
     486:	b7 05       	cpc	r27, r7
     488:	08 f4       	brcc	.+2      	; 0x48c <usart_set_baudrate+0x7a>
     48a:	ae c0       	rjmp	.+348    	; 0x5e8 <usart_set_baudrate+0x1d6>
     48c:	44 16       	cp	r4, r20
     48e:	55 06       	cpc	r5, r21
     490:	66 06       	cpc	r6, r22
     492:	77 06       	cpc	r7, r23
     494:	08 f4       	brcc	.+2      	; 0x498 <usart_set_baudrate+0x86>
     496:	aa c0       	rjmp	.+340    	; 0x5ec <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     498:	f1 01       	movw	r30, r2
     49a:	84 81       	ldd	r24, Z+4	; 0x04
     49c:	82 fd       	sbrc	r24, 2
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <usart_set_baudrate+0x96>
		baud *= 2;
     4a0:	44 0c       	add	r4, r4
     4a2:	55 1c       	adc	r5, r5
     4a4:	66 1c       	adc	r6, r6
     4a6:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     4a8:	c5 01       	movw	r24, r10
     4aa:	b4 01       	movw	r22, r8
     4ac:	a3 01       	movw	r20, r6
     4ae:	92 01       	movw	r18, r4
     4b0:	0e 94 0e 10 	call	0x201c	; 0x201c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     4b4:	2f 3f       	cpi	r18, 0xFF	; 255
     4b6:	31 05       	cpc	r19, r1
     4b8:	41 05       	cpc	r20, r1
     4ba:	51 05       	cpc	r21, r1
     4bc:	08 f4       	brcc	.+2      	; 0x4c0 <usart_set_baudrate+0xae>
     4be:	98 c0       	rjmp	.+304    	; 0x5f0 <usart_set_baudrate+0x1de>
     4c0:	c1 2c       	mov	r12, r1
     4c2:	d1 2c       	mov	r13, r1
     4c4:	76 01       	movw	r14, r12
     4c6:	ca 94       	dec	r12
     4c8:	c9 ef       	ldi	r28, 0xF9	; 249
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <usart_set_baudrate+0xc4>
     4cc:	2c 15       	cp	r18, r12
     4ce:	3d 05       	cpc	r19, r13
     4d0:	4e 05       	cpc	r20, r14
     4d2:	5f 05       	cpc	r21, r15
     4d4:	68 f0       	brcs	.+26     	; 0x4f0 <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     4d6:	cc 0c       	add	r12, r12
     4d8:	dd 1c       	adc	r13, r13
     4da:	ee 1c       	adc	r14, r14
     4dc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     4de:	cd 3f       	cpi	r28, 0xFD	; 253
     4e0:	14 f4       	brge	.+4      	; 0x4e6 <usart_set_baudrate+0xd4>
			limit |= 1;
     4e2:	68 94       	set
     4e4:	c0 f8       	bld	r12, 0
     4e6:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     4e8:	c7 30       	cpi	r28, 0x07	; 7
     4ea:	81 f7       	brne	.-32     	; 0x4cc <usart_set_baudrate+0xba>
     4ec:	8c 2f       	mov	r24, r28
     4ee:	56 c0       	rjmp	.+172    	; 0x59c <usart_set_baudrate+0x18a>
     4f0:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     4f2:	cc 23       	and	r28, r28
     4f4:	0c f0       	brlt	.+2      	; 0x4f8 <usart_set_baudrate+0xe6>
     4f6:	52 c0       	rjmp	.+164    	; 0x59c <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     4f8:	d3 01       	movw	r26, r6
     4fa:	c2 01       	movw	r24, r4
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	aa 1f       	adc	r26, r26
     502:	bb 1f       	adc	r27, r27
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	aa 1f       	adc	r26, r26
     50a:	bb 1f       	adc	r27, r27
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	aa 1f       	adc	r26, r26
     512:	bb 1f       	adc	r27, r27
     514:	85 01       	movw	r16, r10
     516:	74 01       	movw	r14, r8
     518:	e8 1a       	sub	r14, r24
     51a:	f9 0a       	sbc	r15, r25
     51c:	0a 0b       	sbc	r16, r26
     51e:	1b 0b       	sbc	r17, r27
     520:	d8 01       	movw	r26, r16
     522:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     524:	ce 3f       	cpi	r28, 0xFE	; 254
     526:	f4 f4       	brge	.+60     	; 0x564 <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     528:	2d ef       	ldi	r18, 0xFD	; 253
     52a:	3f ef       	ldi	r19, 0xFF	; 255
     52c:	2c 1b       	sub	r18, r28
     52e:	31 09       	sbc	r19, r1
     530:	c7 fd       	sbrc	r28, 7
     532:	33 95       	inc	r19
     534:	04 c0       	rjmp	.+8      	; 0x53e <usart_set_baudrate+0x12c>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	aa 1f       	adc	r26, r26
     53c:	bb 1f       	adc	r27, r27
     53e:	2a 95       	dec	r18
     540:	d2 f7       	brpl	.-12     	; 0x536 <usart_set_baudrate+0x124>
     542:	73 01       	movw	r14, r6
     544:	62 01       	movw	r12, r4
     546:	f6 94       	lsr	r15
     548:	e7 94       	ror	r14
     54a:	d7 94       	ror	r13
     54c:	c7 94       	ror	r12
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	6c 0d       	add	r22, r12
     554:	7d 1d       	adc	r23, r13
     556:	8e 1d       	adc	r24, r14
     558:	9f 1d       	adc	r25, r15
     55a:	a3 01       	movw	r20, r6
     55c:	92 01       	movw	r18, r4
     55e:	0e 94 0e 10 	call	0x201c	; 0x201c <__udivmodsi4>
     562:	38 c0       	rjmp	.+112    	; 0x5d4 <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
     564:	23 e0       	ldi	r18, 0x03	; 3
     566:	2c 0f       	add	r18, r28
     568:	83 01       	movw	r16, r6
     56a:	72 01       	movw	r14, r4
     56c:	04 c0       	rjmp	.+8      	; 0x576 <usart_set_baudrate+0x164>
     56e:	ee 0c       	add	r14, r14
     570:	ff 1c       	adc	r15, r15
     572:	00 1f       	adc	r16, r16
     574:	11 1f       	adc	r17, r17
     576:	2a 95       	dec	r18
     578:	d2 f7       	brpl	.-12     	; 0x56e <usart_set_baudrate+0x15c>
     57a:	a8 01       	movw	r20, r16
     57c:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     57e:	67 01       	movw	r12, r14
     580:	78 01       	movw	r14, r16
     582:	f6 94       	lsr	r15
     584:	e7 94       	ror	r14
     586:	d7 94       	ror	r13
     588:	c7 94       	ror	r12
     58a:	bc 01       	movw	r22, r24
     58c:	cd 01       	movw	r24, r26
     58e:	6c 0d       	add	r22, r12
     590:	7d 1d       	adc	r23, r13
     592:	8e 1d       	adc	r24, r14
     594:	9f 1d       	adc	r25, r15
     596:	0e 94 0e 10 	call	0x201c	; 0x201c <__udivmodsi4>
     59a:	1c c0       	rjmp	.+56     	; 0x5d4 <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     59c:	8d 5f       	subi	r24, 0xFD	; 253
     59e:	a3 01       	movw	r20, r6
     5a0:	92 01       	movw	r18, r4
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <usart_set_baudrate+0x19a>
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	44 1f       	adc	r20, r20
     5aa:	55 1f       	adc	r21, r21
     5ac:	8a 95       	dec	r24
     5ae:	d2 f7       	brpl	.-12     	; 0x5a4 <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
     5b0:	da 01       	movw	r26, r20
     5b2:	c9 01       	movw	r24, r18
     5b4:	b6 95       	lsr	r27
     5b6:	a7 95       	ror	r26
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	68 0d       	add	r22, r8
     5c2:	79 1d       	adc	r23, r9
     5c4:	8a 1d       	adc	r24, r10
     5c6:	9b 1d       	adc	r25, r11
     5c8:	0e 94 0e 10 	call	0x201c	; 0x201c <__udivmodsi4>
     5cc:	21 50       	subi	r18, 0x01	; 1
     5ce:	31 09       	sbc	r19, r1
     5d0:	41 09       	sbc	r20, r1
     5d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     5d4:	83 2f       	mov	r24, r19
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	c2 95       	swap	r28
     5da:	c0 7f       	andi	r28, 0xF0	; 240
     5dc:	c8 2b       	or	r28, r24
     5de:	f1 01       	movw	r30, r2
     5e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     5e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	1c c0       	rjmp	.+56     	; 0x620 <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	1a c0       	rjmp	.+52     	; 0x620 <usart_set_baudrate+0x20e>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	18 c0       	rjmp	.+48     	; 0x620 <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     5f0:	d3 01       	movw	r26, r6
     5f2:	c2 01       	movw	r24, r4
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	aa 1f       	adc	r26, r26
     5fa:	bb 1f       	adc	r27, r27
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	aa 1f       	adc	r26, r26
     602:	bb 1f       	adc	r27, r27
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	aa 1f       	adc	r26, r26
     60a:	bb 1f       	adc	r27, r27
     60c:	85 01       	movw	r16, r10
     60e:	74 01       	movw	r14, r8
     610:	e8 1a       	sub	r14, r24
     612:	f9 0a       	sbc	r15, r25
     614:	0a 0b       	sbc	r16, r26
     616:	1b 0b       	sbc	r17, r27
     618:	d8 01       	movw	r26, r16
     61a:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61c:	c9 ef       	ldi	r28, 0xF9	; 249
     61e:	84 cf       	rjmp	.-248    	; 0x528 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	9f 90       	pop	r9
     634:	8f 90       	pop	r8
     636:	7f 90       	pop	r7
     638:	6f 90       	pop	r6
     63a:	5f 90       	pop	r5
     63c:	4f 90       	pop	r4
     63e:	3f 90       	pop	r3
     640:	2f 90       	pop	r2
     642:	08 95       	ret

00000644 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
     64e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	09 f4       	brne	.+2      	; 0x656 <usart_init_rs232+0x12>
     654:	0e c1       	rjmp	.+540    	; 0x872 <usart_init_rs232+0x22e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     656:	80 3c       	cpi	r24, 0xC0	; 192
     658:	91 05       	cpc	r25, r1
     65a:	21 f4       	brne	.+8      	; 0x664 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     65c:	60 e1       	ldi	r22, 0x10	; 16
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	8d de       	rcall	.-742    	; 0x37c <sysclk_enable_module>
     662:	07 c1       	rjmp	.+526    	; 0x872 <usart_init_rs232+0x22e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     664:	c1 15       	cp	r28, r1
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	d8 07       	cpc	r29, r24
     66a:	21 f4       	brne	.+8      	; 0x674 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     66c:	64 e0       	ldi	r22, 0x04	; 4
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	85 de       	rcall	.-758    	; 0x37c <sysclk_enable_module>
     672:	ff c0       	rjmp	.+510    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     674:	c0 38       	cpi	r28, 0x80	; 128
     676:	e1 e0       	ldi	r30, 0x01	; 1
     678:	de 07       	cpc	r29, r30
     67a:	21 f4       	brne	.+8      	; 0x684 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	7d de       	rcall	.-774    	; 0x37c <sysclk_enable_module>
     682:	f7 c0       	rjmp	.+494    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     684:	c1 15       	cp	r28, r1
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	df 07       	cpc	r29, r31
     68a:	21 f4       	brne	.+8      	; 0x694 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	75 de       	rcall	.-790    	; 0x37c <sysclk_enable_module>
     692:	ef c0       	rjmp	.+478    	; 0x872 <usart_init_rs232+0x22e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     694:	c0 38       	cpi	r28, 0x80	; 128
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	d8 07       	cpc	r29, r24
     69a:	21 f4       	brne	.+8      	; 0x6a4 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	6d de       	rcall	.-806    	; 0x37c <sysclk_enable_module>
     6a2:	e7 c0       	rjmp	.+462    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     6a4:	c0 39       	cpi	r28, 0x90	; 144
     6a6:	e3 e0       	ldi	r30, 0x03	; 3
     6a8:	de 07       	cpc	r29, r30
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	65 de       	rcall	.-822    	; 0x37c <sysclk_enable_module>
     6b2:	df c0       	rjmp	.+446    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     6b4:	c1 15       	cp	r28, r1
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	df 07       	cpc	r29, r31
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	5d de       	rcall	.-838    	; 0x37c <sysclk_enable_module>
     6c2:	d7 c0       	rjmp	.+430    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     6c4:	c0 34       	cpi	r28, 0x40	; 64
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	d8 07       	cpc	r29, r24
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	55 de       	rcall	.-854    	; 0x37c <sysclk_enable_module>
     6d2:	cf c0       	rjmp	.+414    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     6d4:	c0 32       	cpi	r28, 0x20	; 32
     6d6:	e3 e0       	ldi	r30, 0x03	; 3
     6d8:	de 07       	cpc	r29, r30
     6da:	21 f4       	brne	.+8      	; 0x6e4 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     6dc:	64 e0       	ldi	r22, 0x04	; 4
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	4d de       	rcall	.-870    	; 0x37c <sysclk_enable_module>
     6e2:	c7 c0       	rjmp	.+398    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     6e4:	c1 15       	cp	r28, r1
     6e6:	f8 e0       	ldi	r31, 0x08	; 8
     6e8:	df 07       	cpc	r29, r31
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	45 de       	rcall	.-886    	; 0x37c <sysclk_enable_module>
     6f2:	bf c0       	rjmp	.+382    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     6f4:	c1 15       	cp	r28, r1
     6f6:	89 e0       	ldi	r24, 0x09	; 9
     6f8:	d8 07       	cpc	r29, r24
     6fa:	21 f4       	brne	.+8      	; 0x704 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	3d de       	rcall	.-902    	; 0x37c <sysclk_enable_module>
     702:	b7 c0       	rjmp	.+366    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     704:	c1 15       	cp	r28, r1
     706:	ea e0       	ldi	r30, 0x0A	; 10
     708:	de 07       	cpc	r29, r30
     70a:	21 f4       	brne	.+8      	; 0x714 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	35 de       	rcall	.-918    	; 0x37c <sysclk_enable_module>
     712:	af c0       	rjmp	.+350    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     714:	c1 15       	cp	r28, r1
     716:	fb e0       	ldi	r31, 0x0B	; 11
     718:	df 07       	cpc	r29, r31
     71a:	21 f4       	brne	.+8      	; 0x724 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	2d de       	rcall	.-934    	; 0x37c <sysclk_enable_module>
     722:	a7 c0       	rjmp	.+334    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     724:	c0 34       	cpi	r28, 0x40	; 64
     726:	88 e0       	ldi	r24, 0x08	; 8
     728:	d8 07       	cpc	r29, r24
     72a:	21 f4       	brne	.+8      	; 0x734 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	25 de       	rcall	.-950    	; 0x37c <sysclk_enable_module>
     732:	9f c0       	rjmp	.+318    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     734:	c0 34       	cpi	r28, 0x40	; 64
     736:	e9 e0       	ldi	r30, 0x09	; 9
     738:	de 07       	cpc	r29, r30
     73a:	21 f4       	brne	.+8      	; 0x744 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     73c:	62 e0       	ldi	r22, 0x02	; 2
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	1d de       	rcall	.-966    	; 0x37c <sysclk_enable_module>
     742:	97 c0       	rjmp	.+302    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     744:	c0 34       	cpi	r28, 0x40	; 64
     746:	fa e0       	ldi	r31, 0x0A	; 10
     748:	df 07       	cpc	r29, r31
     74a:	21 f4       	brne	.+8      	; 0x754 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	15 de       	rcall	.-982    	; 0x37c <sysclk_enable_module>
     752:	8f c0       	rjmp	.+286    	; 0x872 <usart_init_rs232+0x22e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     754:	c0 39       	cpi	r28, 0x90	; 144
     756:	88 e0       	ldi	r24, 0x08	; 8
     758:	d8 07       	cpc	r29, r24
     75a:	21 f4       	brne	.+8      	; 0x764 <usart_init_rs232+0x120>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     75c:	64 e0       	ldi	r22, 0x04	; 4
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0d de       	rcall	.-998    	; 0x37c <sysclk_enable_module>
     762:	87 c0       	rjmp	.+270    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     764:	c0 39       	cpi	r28, 0x90	; 144
     766:	e9 e0       	ldi	r30, 0x09	; 9
     768:	de 07       	cpc	r29, r30
     76a:	21 f4       	brne	.+8      	; 0x774 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     76c:	64 e0       	ldi	r22, 0x04	; 4
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	05 de       	rcall	.-1014   	; 0x37c <sysclk_enable_module>
     772:	7f c0       	rjmp	.+254    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     774:	c0 39       	cpi	r28, 0x90	; 144
     776:	fa e0       	ldi	r31, 0x0A	; 10
     778:	df 07       	cpc	r29, r31
     77a:	21 f4       	brne	.+8      	; 0x784 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     77c:	64 e0       	ldi	r22, 0x04	; 4
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	fd dd       	rcall	.-1030   	; 0x37c <sysclk_enable_module>
     782:	77 c0       	rjmp	.+238    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     784:	c0 39       	cpi	r28, 0x90	; 144
     786:	8b e0       	ldi	r24, 0x0B	; 11
     788:	d8 07       	cpc	r29, r24
     78a:	21 f4       	brne	.+8      	; 0x794 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     78c:	64 e0       	ldi	r22, 0x04	; 4
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	f5 dd       	rcall	.-1046   	; 0x37c <sysclk_enable_module>
     792:	6f c0       	rjmp	.+222    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     794:	c0 3c       	cpi	r28, 0xC0	; 192
     796:	e8 e0       	ldi	r30, 0x08	; 8
     798:	de 07       	cpc	r29, r30
     79a:	21 f4       	brne	.+8      	; 0x7a4 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     79c:	68 e0       	ldi	r22, 0x08	; 8
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	ed dd       	rcall	.-1062   	; 0x37c <sysclk_enable_module>
     7a2:	67 c0       	rjmp	.+206    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     7a4:	c0 3c       	cpi	r28, 0xC0	; 192
     7a6:	f9 e0       	ldi	r31, 0x09	; 9
     7a8:	df 07       	cpc	r29, r31
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     7ac:	68 e0       	ldi	r22, 0x08	; 8
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	e5 dd       	rcall	.-1078   	; 0x37c <sysclk_enable_module>
     7b2:	5f c0       	rjmp	.+190    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     7b4:	c0 3c       	cpi	r28, 0xC0	; 192
     7b6:	8a e0       	ldi	r24, 0x0A	; 10
     7b8:	d8 07       	cpc	r29, r24
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     7bc:	68 e0       	ldi	r22, 0x08	; 8
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	dd dd       	rcall	.-1094   	; 0x37c <sysclk_enable_module>
     7c2:	57 c0       	rjmp	.+174    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     7c4:	c0 3c       	cpi	r28, 0xC0	; 192
     7c6:	eb e0       	ldi	r30, 0x0B	; 11
     7c8:	de 07       	cpc	r29, r30
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     7cc:	68 e0       	ldi	r22, 0x08	; 8
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	d5 dd       	rcall	.-1110   	; 0x37c <sysclk_enable_module>
     7d2:	4f c0       	rjmp	.+158    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     7d4:	c0 3a       	cpi	r28, 0xA0	; 160
     7d6:	f8 e0       	ldi	r31, 0x08	; 8
     7d8:	df 07       	cpc	r29, r31
     7da:	21 f4       	brne	.+8      	; 0x7e4 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     7dc:	60 e1       	ldi	r22, 0x10	; 16
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	cd dd       	rcall	.-1126   	; 0x37c <sysclk_enable_module>
     7e2:	47 c0       	rjmp	.+142    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     7e4:	c0 3a       	cpi	r28, 0xA0	; 160
     7e6:	89 e0       	ldi	r24, 0x09	; 9
     7e8:	d8 07       	cpc	r29, r24
     7ea:	21 f4       	brne	.+8      	; 0x7f4 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     7ec:	60 e1       	ldi	r22, 0x10	; 16
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	c5 dd       	rcall	.-1142   	; 0x37c <sysclk_enable_module>
     7f2:	3f c0       	rjmp	.+126    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     7f4:	c0 3a       	cpi	r28, 0xA0	; 160
     7f6:	ea e0       	ldi	r30, 0x0A	; 10
     7f8:	de 07       	cpc	r29, r30
     7fa:	21 f4       	brne	.+8      	; 0x804 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     7fc:	60 e1       	ldi	r22, 0x10	; 16
     7fe:	85 e0       	ldi	r24, 0x05	; 5
     800:	bd dd       	rcall	.-1158   	; 0x37c <sysclk_enable_module>
     802:	37 c0       	rjmp	.+110    	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     804:	c0 3a       	cpi	r28, 0xA0	; 160
     806:	fb e0       	ldi	r31, 0x0B	; 11
     808:	df 07       	cpc	r29, r31
     80a:	21 f4       	brne	.+8      	; 0x814 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     80c:	60 e1       	ldi	r22, 0x10	; 16
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	b5 dd       	rcall	.-1174   	; 0x37c <sysclk_enable_module>
     812:	2f c0       	rjmp	.+94     	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     814:	c0 3b       	cpi	r28, 0xB0	; 176
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	d8 07       	cpc	r29, r24
     81a:	21 f4       	brne	.+8      	; 0x824 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     81c:	60 e2       	ldi	r22, 0x20	; 32
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	ad dd       	rcall	.-1190   	; 0x37c <sysclk_enable_module>
     822:	27 c0       	rjmp	.+78     	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     824:	c0 3b       	cpi	r28, 0xB0	; 176
     826:	e9 e0       	ldi	r30, 0x09	; 9
     828:	de 07       	cpc	r29, r30
     82a:	21 f4       	brne	.+8      	; 0x834 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     82c:	60 e2       	ldi	r22, 0x20	; 32
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	a5 dd       	rcall	.-1206   	; 0x37c <sysclk_enable_module>
     832:	1f c0       	rjmp	.+62     	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     834:	c0 3b       	cpi	r28, 0xB0	; 176
     836:	fa e0       	ldi	r31, 0x0A	; 10
     838:	df 07       	cpc	r29, r31
     83a:	21 f4       	brne	.+8      	; 0x844 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     83c:	60 e2       	ldi	r22, 0x20	; 32
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	9d dd       	rcall	.-1222   	; 0x37c <sysclk_enable_module>
     842:	17 c0       	rjmp	.+46     	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     844:	c0 3b       	cpi	r28, 0xB0	; 176
     846:	8b e0       	ldi	r24, 0x0B	; 11
     848:	d8 07       	cpc	r29, r24
     84a:	21 f4       	brne	.+8      	; 0x854 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     84c:	60 e2       	ldi	r22, 0x20	; 32
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	95 dd       	rcall	.-1238   	; 0x37c <sysclk_enable_module>
     852:	0f c0       	rjmp	.+30     	; 0x872 <usart_init_rs232+0x22e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     854:	c0 38       	cpi	r28, 0x80	; 128
     856:	e4 e0       	ldi	r30, 0x04	; 4
     858:	de 07       	cpc	r29, r30
     85a:	21 f4       	brne	.+8      	; 0x864 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     85c:	60 e4       	ldi	r22, 0x40	; 64
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	8d dd       	rcall	.-1254   	; 0x37c <sysclk_enable_module>
     862:	07 c0       	rjmp	.+14     	; 0x872 <usart_init_rs232+0x22e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     864:	c0 3a       	cpi	r28, 0xA0	; 160
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	df 07       	cpc	r29, r31
     86a:	19 f4       	brne	.+6      	; 0x872 <usart_init_rs232+0x22e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     86c:	60 e4       	ldi	r22, 0x40	; 64
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	85 dd       	rcall	.-1270   	; 0x37c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     872:	8d 81       	ldd	r24, Y+5	; 0x05
     874:	8f 73       	andi	r24, 0x3F	; 63
     876:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     878:	f8 01       	movw	r30, r16
     87a:	94 81       	ldd	r25, Z+4	; 0x04
     87c:	85 81       	ldd	r24, Z+5	; 0x05
     87e:	89 2b       	or	r24, r25
     880:	96 81       	ldd	r25, Z+6	; 0x06
     882:	91 11       	cpse	r25, r1
     884:	98 e0       	ldi	r25, 0x08	; 8
     886:	89 2b       	or	r24, r25
     888:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     88a:	f8 01       	movw	r30, r16
     88c:	40 81       	ld	r20, Z
     88e:	51 81       	ldd	r21, Z+1	; 0x01
     890:	62 81       	ldd	r22, Z+2	; 0x02
     892:	73 81       	ldd	r23, Z+3	; 0x03
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	18 e4       	ldi	r17, 0x48	; 72
     898:	28 ee       	ldi	r18, 0xE8	; 232
     89a:	31 e0       	ldi	r19, 0x01	; 1
     89c:	ce 01       	movw	r24, r28
     89e:	b9 dd       	rcall	.-1166   	; 0x412 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     8a0:	9c 81       	ldd	r25, Y+4	; 0x04
     8a2:	98 60       	ori	r25, 0x08	; 8
     8a4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	90 61       	ori	r25, 0x10	; 16
     8aa:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <read16>:
uint32_t read24(SPI_t* targetspi);



uint16_t read16(SPI_t* targetspi)
{
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	8c 01       	movw	r16, r24
	//Read in 16 bits, MSB first
	uint16_t ret = ((uint16_t)spiread(targetspi)) << 8;
     8c0:	49 d4       	rcall	.+2194   	; 0x1154 <spiread>
     8c2:	c8 2f       	mov	r28, r24
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
     8c6:	dc 2f       	mov	r29, r28
     8c8:	cc 27       	eor	r28, r28
	ret |= (uint16_t)spiread(targetspi);
     8ca:	c8 01       	movw	r24, r16
     8cc:	43 d4       	rcall	.+2182   	; 0x1154 <spiread>
	return ret;
}
     8ce:	9e 01       	movw	r18, r28
     8d0:	28 2b       	or	r18, r24
     8d2:	c9 01       	movw	r24, r18
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <read24>:

uint32_t read24(SPI_t* targetspi)
{
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
	uint32_t ret = ((uint32_t)spiread(targetspi)) << 16;
     8ec:	33 d4       	rcall	.+2150   	; 0x1154 <spiread>
     8ee:	c8 2e       	mov	r12, r24
     8f0:	d1 2c       	mov	r13, r1
     8f2:	e1 2c       	mov	r14, r1
     8f4:	f1 2c       	mov	r15, r1
     8f6:	76 01       	movw	r14, r12
     8f8:	dd 24       	eor	r13, r13
     8fa:	cc 24       	eor	r12, r12
	ret |= ((uint32_t)spiread(targetspi)) << 8;
     8fc:	ce 01       	movw	r24, r28
     8fe:	2a d4       	rcall	.+2132   	; 0x1154 <spiread>
     900:	d8 2a       	or	r13, r24
	ret |= (uint32_t)spiread(targetspi);
     902:	ce 01       	movw	r24, r28
     904:	27 d4       	rcall	.+2126   	; 0x1154 <spiread>
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	28 2b       	or	r18, r24
     90c:	ca 01       	movw	r24, r20
     90e:	b9 01       	movw	r22, r18
	return ret;
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	08 95       	ret

0000091e <define_new_MS56XX>:
{
	MS56XX_t pressure_sensor;
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	return pressure_sensor;
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	41 83       	std	Z+1, r20	; 0x01
     924:	52 83       	std	Z+2, r21	; 0x02
     926:	63 83       	std	Z+3, r22	; 0x03
}
     928:	08 95       	ret

0000092a <pressureSensorReset>:

void pressureSensorReset(MS56XX_t* sensor)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
	spiselect(sensor->select_pin);
     930:	88 81       	ld	r24, Y
     932:	1e d4       	rcall	.+2108   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b00011110);
     934:	6e e1       	ldi	r22, 0x1E	; 30
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	14 d4       	rcall	.+2088   	; 0x1164 <spiwrite>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	2a 32       	cpi	r18, 0x2A	; 42
     946:	88 e6       	ldi	r24, 0x68	; 104
     948:	38 07       	cpc	r19, r24
     94a:	d1 f7       	brne	.-12     	; 0x940 <pressureSensorReset+0x16>
	delay_ms(5);
	spideselect(sensor->select_pin);
     94c:	88 81       	ld	r24, Y
     94e:	24 d4       	rcall	.+2120   	; 0x1198 <spideselect>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	85 3d       	cpi	r24, 0xD5	; 213
     958:	24 e1       	ldi	r18, 0x14	; 20
     95a:	92 07       	cpc	r25, r18
     95c:	d9 f7       	brne	.-10     	; 0x954 <pressureSensorReset+0x2a>
	delay_ms(1);
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <calibratePressureSensor>:

void calibratePressureSensor(MS56XX_t* sensor)
//Set up the appropriate SPI before calling this
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
	pressureSensorReset(sensor);
     96a:	df df       	rcall	.-66     	; 0x92a <pressureSensorReset>
	
	//Get all the lovely little calibration constants
	
	spiselect(sensor->select_pin);
     96c:	88 81       	ld	r24, Y
     96e:	00 d4       	rcall	.+2048   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10100010); //Bits 1 - 3 are 001, for C1
     970:	62 ea       	ldi	r22, 0xA2	; 162
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	f6 d3       	rcall	.+2028   	; 0x1164 <spiwrite>
	sensor->SENSt1 = read16(sensor->spi);
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	9c df       	rcall	.-200    	; 0x8b6 <read16>
     97e:	8d 87       	std	Y+13, r24	; 0x0d
     980:	9e 87       	std	Y+14, r25	; 0x0e
	spideselect(sensor->select_pin);
     982:	88 81       	ld	r24, Y
     984:	09 d4       	rcall	.+2066   	; 0x1198 <spideselect>

	spiselect(sensor->select_pin);
     986:	88 81       	ld	r24, Y
     988:	f3 d3       	rcall	.+2022   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10100100); //010 = 2, for C2
     98a:	64 ea       	ldi	r22, 0xA4	; 164
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	e9 d3       	rcall	.+2002   	; 0x1164 <spiwrite>
	sensor->OFFt1 = read16(sensor->spi);
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	8f df       	rcall	.-226    	; 0x8b6 <read16>
     998:	8f 87       	std	Y+15, r24	; 0x0f
     99a:	98 8b       	std	Y+16, r25	; 0x10
	spideselect(sensor->select_pin);
     99c:	88 81       	ld	r24, Y
     99e:	fc d3       	rcall	.+2040   	; 0x1198 <spideselect>

	spiselect(sensor->select_pin);
     9a0:	88 81       	ld	r24, Y
     9a2:	e6 d3       	rcall	.+1996   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10100110); // 011 = 3, for C3
     9a4:	66 ea       	ldi	r22, 0xA6	; 166
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	dc d3       	rcall	.+1976   	; 0x1164 <spiwrite>
	sensor->TCS = read16(sensor->spi);
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	82 df       	rcall	.-252    	; 0x8b6 <read16>
     9b2:	89 8b       	std	Y+17, r24	; 0x11
     9b4:	9a 8b       	std	Y+18, r25	; 0x12
	spideselect(sensor->select_pin);
     9b6:	88 81       	ld	r24, Y
     9b8:	ef d3       	rcall	.+2014   	; 0x1198 <spideselect>

	spiselect(sensor->select_pin);
     9ba:	88 81       	ld	r24, Y
     9bc:	d9 d3       	rcall	.+1970   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10101000); // 100 = 4
     9be:	68 ea       	ldi	r22, 0xA8	; 168
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	cf d3       	rcall	.+1950   	; 0x1164 <spiwrite>
	sensor->TCO = read16(sensor->spi);
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	75 df       	rcall	.-278    	; 0x8b6 <read16>
     9cc:	8b 8b       	std	Y+19, r24	; 0x13
     9ce:	9c 8b       	std	Y+20, r25	; 0x14
	spideselect(sensor->select_pin);
     9d0:	88 81       	ld	r24, Y
     9d2:	e2 d3       	rcall	.+1988   	; 0x1198 <spideselect>

	spiselect(sensor->select_pin);
     9d4:	88 81       	ld	r24, Y
     9d6:	cc d3       	rcall	.+1944   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10101010); // 101 = 5
     9d8:	6a ea       	ldi	r22, 0xAA	; 170
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	c2 d3       	rcall	.+1924   	; 0x1164 <spiwrite>
	sensor->Tref = read16(sensor->spi);
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	68 df       	rcall	.-304    	; 0x8b6 <read16>
     9e6:	8d 8b       	std	Y+21, r24	; 0x15
     9e8:	9e 8b       	std	Y+22, r25	; 0x16
	spideselect(sensor->select_pin);
     9ea:	88 81       	ld	r24, Y
     9ec:	d5 d3       	rcall	.+1962   	; 0x1198 <spideselect>


	spiselect(sensor->select_pin);
     9ee:	88 81       	ld	r24, Y
     9f0:	bf d3       	rcall	.+1918   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0b10101100); // 110 = 6
     9f2:	6c ea       	ldi	r22, 0xAC	; 172
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	b5 d3       	rcall	.+1898   	; 0x1164 <spiwrite>
	sensor->TEMPSENS = read16(sensor->spi);
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	5b df       	rcall	.-330    	; 0x8b6 <read16>
     a00:	8f 8b       	std	Y+23, r24	; 0x17
     a02:	98 8f       	std	Y+24, r25	; 0x18
	spideselect(sensor->select_pin);
     a04:	88 81       	ld	r24, Y
     a06:	c8 d3       	rcall	.+1936   	; 0x1198 <spideselect>
			sensor->OFFt1, 
			sensor->TCS, 
			sensor->TCO, 
			sensor->Tref, 
			sensor->TEMPSENS);*/
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <readMS56XX>:


void readMS56XX(MS56XX_t* sensor)
 {
     a0e:	2f 92       	push	r2
     a10:	3f 92       	push	r3
     a12:	4f 92       	push	r4
     a14:	5f 92       	push	r5
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	e6 97       	sbiw	r28, 0x36	; 54
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	8d ab       	std	Y+53, r24	; 0x35
     a3e:	9e ab       	std	Y+54, r25	; 0x36
	uint32_t rawPressure = 0; //D1
	uint32_t rawTemp = 0; //D2

	//Ask for raw pressure, 4096 OSR
	spiselect(sensor->select_pin);
     a40:	dc 01       	movw	r26, r24
     a42:	8c 91       	ld	r24, X
     a44:	95 d3       	rcall	.+1834   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0x48); //OSR = 4096
     a46:	68 e4       	ldi	r22, 0x48	; 72
     a48:	ed a9       	ldd	r30, Y+53	; 0x35
     a4a:	fe a9       	ldd	r31, Y+54	; 0x36
     a4c:	81 81       	ldd	r24, Z+1	; 0x01
     a4e:	92 81       	ldd	r25, Z+2	; 0x02
     a50:	89 d3       	rcall	.+1810   	; 0x1164 <spiwrite>
	spideselect(sensor->select_pin);
     a52:	ad a9       	ldd	r26, Y+53	; 0x35
     a54:	be a9       	ldd	r27, Y+54	; 0x36
     a56:	8c 91       	ld	r24, X
     a58:	9f d3       	rcall	.+1854   	; 0x1198 <spideselect>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	4d a9       	ldd	r20, Y+53	; 0x35
     a60:	5e a9       	ldd	r21, Y+54	; 0x36
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	85 35       	cpi	r24, 0x55	; 85
     a66:	b0 ed       	ldi	r27, 0xD0	; 208
     a68:	9b 07       	cpc	r25, r27
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <readMS56XX+0x54>
     a6c:	4d ab       	std	Y+53, r20	; 0x35
     a6e:	5e ab       	std	Y+54, r21	; 0x36

	delay_ms(10);

	//Read off raw pressure (D1)
	spiselect(sensor->select_pin);
     a70:	fa 01       	movw	r30, r20
     a72:	80 81       	ld	r24, Z
     a74:	7d d3       	rcall	.+1786   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0x0);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	ad a9       	ldd	r26, Y+53	; 0x35
     a7a:	be a9       	ldd	r27, Y+54	; 0x36
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	8d 91       	ld	r24, X+
     a80:	9c 91       	ld	r25, X
     a82:	12 97       	sbiw	r26, 0x02	; 2
     a84:	6f d3       	rcall	.+1758   	; 0x1164 <spiwrite>
	rawPressure = read24(sensor->spi);
     a86:	ed a9       	ldd	r30, Y+53	; 0x35
     a88:	fe a9       	ldd	r31, Y+54	; 0x36
     a8a:	81 81       	ldd	r24, Z+1	; 0x01
     a8c:	92 81       	ldd	r25, Z+2	; 0x02
     a8e:	27 df       	rcall	.-434    	; 0x8de <read24>
     a90:	69 a7       	std	Y+41, r22	; 0x29
     a92:	7a a7       	std	Y+42, r23	; 0x2a
     a94:	8b a7       	std	Y+43, r24	; 0x2b
     a96:	9c a7       	std	Y+44, r25	; 0x2c
	spideselect(sensor->select_pin);
     a98:	ad a9       	ldd	r26, Y+53	; 0x35
     a9a:	be a9       	ldd	r27, Y+54	; 0x36
     a9c:	8c 91       	ld	r24, X
     a9e:	7c d3       	rcall	.+1784   	; 0x1198 <spideselect>
	

	//Ask for raw temperature, 4096 OSR
	spiselect(sensor->select_pin);
     aa0:	ed a9       	ldd	r30, Y+53	; 0x35
     aa2:	fe a9       	ldd	r31, Y+54	; 0x36
     aa4:	80 81       	ld	r24, Z
     aa6:	64 d3       	rcall	.+1736   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0x58); //OSR = 4096
     aa8:	68 e5       	ldi	r22, 0x58	; 88
     aaa:	ad a9       	ldd	r26, Y+53	; 0x35
     aac:	be a9       	ldd	r27, Y+54	; 0x36
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	8d 91       	ld	r24, X+
     ab2:	9c 91       	ld	r25, X
     ab4:	12 97       	sbiw	r26, 0x02	; 2
     ab6:	56 d3       	rcall	.+1708   	; 0x1164 <spiwrite>
	spideselect(sensor->select_pin);
     ab8:	ed a9       	ldd	r30, Y+53	; 0x35
     aba:	fe a9       	ldd	r31, Y+54	; 0x36
     abc:	80 81       	ld	r24, Z
     abe:	6c d3       	rcall	.+1752   	; 0x1198 <spideselect>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	4d a9       	ldd	r20, Y+53	; 0x35
     ac6:	5e a9       	ldd	r21, Y+54	; 0x36
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	85 35       	cpi	r24, 0x55	; 85
     acc:	f0 ed       	ldi	r31, 0xD0	; 208
     ace:	9f 07       	cpc	r25, r31
     ad0:	d9 f7       	brne	.-10     	; 0xac8 <readMS56XX+0xba>
     ad2:	4d ab       	std	Y+53, r20	; 0x35
     ad4:	5e ab       	std	Y+54, r21	; 0x36
	
	delay_ms(10);

	//Read off raw temperature (D2)
	spiselect(sensor->select_pin);
     ad6:	da 01       	movw	r26, r20
     ad8:	8c 91       	ld	r24, X
     ada:	4a d3       	rcall	.+1684   	; 0x1170 <spiselect>
	spiwrite(sensor->spi, 0x0);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	ed a9       	ldd	r30, Y+53	; 0x35
     ae0:	fe a9       	ldd	r31, Y+54	; 0x36
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	92 81       	ldd	r25, Z+2	; 0x02
     ae6:	3e d3       	rcall	.+1660   	; 0x1164 <spiwrite>
	rawTemp = read24(sensor->spi);
     ae8:	ad a9       	ldd	r26, Y+53	; 0x35
     aea:	be a9       	ldd	r27, Y+54	; 0x36
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	8d 91       	ld	r24, X+
     af0:	9c 91       	ld	r25, X
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	f4 de       	rcall	.-536    	; 0x8de <read24>
     af6:	6b 01       	movw	r12, r22
     af8:	7c 01       	movw	r14, r24
	spideselect(sensor->select_pin);
     afa:	ed a9       	ldd	r30, Y+53	; 0x35
     afc:	fe a9       	ldd	r31, Y+54	; 0x36
     afe:	80 81       	ld	r24, Z
     b00:	4b d3       	rcall	.+1686   	; 0x1198 <spideselect>
	
	
	int32_t dT = rawTemp - (int32_t)(((int64_t)sensor->Tref) * ((int64_t)256));
     b02:	ad a9       	ldd	r26, Y+53	; 0x35
     b04:	be a9       	ldd	r27, Y+54	; 0x36
     b06:	55 96       	adiw	r26, 0x15	; 21
     b08:	8d 91       	ld	r24, X+
     b0a:	9c 91       	ld	r25, X
     b0c:	56 97       	sbiw	r26, 0x16	; 22
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ba 2f       	mov	r27, r26
     b14:	a9 2f       	mov	r26, r25
     b16:	98 2f       	mov	r25, r24
     b18:	88 27       	eor	r24, r24
     b1a:	97 01       	movw	r18, r14
     b1c:	86 01       	movw	r16, r12
     b1e:	08 1b       	sub	r16, r24
     b20:	19 0b       	sbc	r17, r25
     b22:	2a 0b       	sbc	r18, r26
     b24:	3b 0b       	sbc	r19, r27
     b26:	09 83       	std	Y+1, r16	; 0x01
     b28:	1a 83       	std	Y+2, r17	; 0x02
     b2a:	2b 83       	std	Y+3, r18	; 0x03
     b2c:	3c 83       	std	Y+4, r19	; 0x04
	int32_t TEMP = (int32_t)(((int32_t)2000) + ((int32_t)(((int64_t)dT) * ((int64_t)sensor->TEMPSENS) / ((int64_t)8388608))));
     b2e:	33 0f       	add	r19, r19
     b30:	00 0b       	sbc	r16, r16
     b32:	10 2f       	mov	r17, r16
     b34:	98 01       	movw	r18, r16
     b36:	0d 83       	std	Y+5, r16	; 0x05
     b38:	1e 83       	std	Y+6, r17	; 0x06
     b3a:	2f 83       	std	Y+7, r18	; 0x07
     b3c:	38 87       	std	Y+8, r19	; 0x08
     b3e:	ad a9       	ldd	r26, Y+53	; 0x35
     b40:	be a9       	ldd	r27, Y+54	; 0x36
     b42:	57 96       	adiw	r26, 0x17	; 23
     b44:	0d 91       	ld	r16, X+
     b46:	1c 91       	ld	r17, X
     b48:	58 97       	sbiw	r26, 0x18	; 24
     b4a:	a0 2e       	mov	r10, r16
     b4c:	b1 2e       	mov	r11, r17
     b4e:	c1 2c       	mov	r12, r1
     b50:	d1 2c       	mov	r13, r1
     b52:	e1 2c       	mov	r14, r1
     b54:	f1 2c       	mov	r15, r1
     b56:	00 e0       	ldi	r16, 0x00	; 0
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	4b 81       	ldd	r20, Y+3	; 0x03
     b60:	5c 81       	ldd	r21, Y+4	; 0x04
     b62:	6d 81       	ldd	r22, Y+5	; 0x05
     b64:	76 2f       	mov	r23, r22
     b66:	86 2f       	mov	r24, r22
     b68:	96 2f       	mov	r25, r22
     b6a:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
     b6e:	f2 2e       	mov	r15, r18
     b70:	03 2f       	mov	r16, r19
     b72:	14 2f       	mov	r17, r20
     b74:	b5 2f       	mov	r27, r21
     b76:	f6 2f       	mov	r31, r22
     b78:	e7 2f       	mov	r30, r23
     b7a:	58 2e       	mov	r5, r24
     b7c:	69 2e       	mov	r6, r25
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
     b84:	84 f4       	brge	.+32     	; 0xba6 <readMS56XX+0x198>
     b86:	21 50       	subi	r18, 0x01	; 1
     b88:	31 09       	sbc	r19, r1
     b8a:	40 48       	sbci	r20, 0x80	; 128
     b8c:	5f 4f       	sbci	r21, 0xFF	; 255
     b8e:	6f 4f       	sbci	r22, 0xFF	; 255
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	f2 2e       	mov	r15, r18
     b98:	03 2f       	mov	r16, r19
     b9a:	14 2f       	mov	r17, r20
     b9c:	b5 2f       	mov	r27, r21
     b9e:	f6 2f       	mov	r31, r22
     ba0:	e7 2f       	mov	r30, r23
     ba2:	58 2e       	mov	r5, r24
     ba4:	69 2e       	mov	r6, r25
     ba6:	2f 2d       	mov	r18, r15
     ba8:	30 2f       	mov	r19, r16
     baa:	41 2f       	mov	r20, r17
     bac:	5b 2f       	mov	r21, r27
     bae:	6f 2f       	mov	r22, r31
     bb0:	7e 2f       	mov	r23, r30
     bb2:	85 2d       	mov	r24, r5
     bb4:	96 2d       	mov	r25, r6
     bb6:	07 e1       	ldi	r16, 0x17	; 23
     bb8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
     bbc:	42 2e       	mov	r4, r18
     bbe:	53 2e       	mov	r5, r19
     bc0:	64 2e       	mov	r6, r20
     bc2:	75 2e       	mov	r7, r21
     bc4:	93 01       	movw	r18, r6
     bc6:	82 01       	movw	r16, r4
     bc8:	00 53       	subi	r16, 0x30	; 48
     bca:	18 4f       	sbci	r17, 0xF8	; 248
     bcc:	2f 4f       	sbci	r18, 0xFF	; 255
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	0d 87       	std	Y+13, r16	; 0x0d
     bd2:	1e 87       	std	Y+14, r17	; 0x0e
     bd4:	2f 87       	std	Y+15, r18	; 0x0f
     bd6:	38 8b       	std	Y+16, r19	; 0x10
	
	int32_t T2 = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	if (TEMP < 2000)
     bd8:	00 3d       	cpi	r16, 0xD0	; 208
     bda:	17 40       	sbci	r17, 0x07	; 7
     bdc:	21 05       	cpc	r18, r1
     bde:	31 05       	cpc	r19, r1
     be0:	0c f0       	brlt	.+2      	; 0xbe4 <readMS56XX+0x1d6>
     be2:	9d c0       	rjmp	.+314    	; 0xd1e <readMS56XX+0x310>
	{
		T2 = ((int64_t)dT) * ((int64_t)dT) / ((int64_t)2147483648);
     be4:	a9 80       	ldd	r10, Y+1	; 0x01
     be6:	ba 80       	ldd	r11, Y+2	; 0x02
     be8:	cb 80       	ldd	r12, Y+3	; 0x03
     bea:	dc 80       	ldd	r13, Y+4	; 0x04
     bec:	ed 80       	ldd	r14, Y+5	; 0x05
     bee:	fe 2c       	mov	r15, r14
     bf0:	0e 2d       	mov	r16, r14
     bf2:	1e 2d       	mov	r17, r14
     bf4:	2a 2d       	mov	r18, r10
     bf6:	3b 2d       	mov	r19, r11
     bf8:	4c 2d       	mov	r20, r12
     bfa:	5d 2d       	mov	r21, r13
     bfc:	60 2f       	mov	r22, r16
     bfe:	70 2f       	mov	r23, r16
     c00:	80 2f       	mov	r24, r16
     c02:	9e 2d       	mov	r25, r14
     c04:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
     c08:	a1 2c       	mov	r10, r1
     c0a:	b1 2c       	mov	r11, r1
     c0c:	c1 2c       	mov	r12, r1
     c0e:	68 94       	set
     c10:	dd 24       	eor	r13, r13
     c12:	d7 f8       	bld	r13, 7
     c14:	e1 2c       	mov	r14, r1
     c16:	f1 2c       	mov	r15, r1
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	0e 94 83 10 	call	0x2106	; 0x2106 <__divdi3>
     c20:	2e 8b       	std	Y+22, r18	; 0x16
     c22:	3f 8b       	std	Y+23, r19	; 0x17
     c24:	48 8f       	std	Y+24, r20	; 0x18
     c26:	59 8f       	std	Y+25, r21	; 0x19
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
     c28:	d3 01       	movw	r26, r6
     c2a:	c2 01       	movw	r24, r4
     c2c:	bb 0f       	add	r27, r27
     c2e:	88 0b       	sbc	r24, r24
     c30:	98 2f       	mov	r25, r24
     c32:	dc 01       	movw	r26, r24
     c34:	89 87       	std	Y+9, r24	; 0x09
     c36:	9a 87       	std	Y+10, r25	; 0x0a
     c38:	ab 87       	std	Y+11, r26	; 0x0b
     c3a:	bc 87       	std	Y+12, r27	; 0x0c
     c3c:	a4 2c       	mov	r10, r4
     c3e:	b5 2c       	mov	r11, r5
     c40:	c6 2c       	mov	r12, r6
     c42:	d7 2c       	mov	r13, r7
     c44:	e9 84       	ldd	r14, Y+9	; 0x09
     c46:	fe 2c       	mov	r15, r14
     c48:	0e 2d       	mov	r16, r14
     c4a:	1e 2d       	mov	r17, r14
     c4c:	24 2d       	mov	r18, r4
     c4e:	35 2d       	mov	r19, r5
     c50:	46 2d       	mov	r20, r6
     c52:	57 2d       	mov	r21, r7
     c54:	60 2f       	mov	r22, r16
     c56:	70 2f       	mov	r23, r16
     c58:	80 2f       	mov	r24, r16
     c5a:	9e 2d       	mov	r25, r14
     c5c:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
     c60:	29 8b       	std	Y+17, r18	; 0x11
     c62:	f3 2f       	mov	r31, r19
     c64:	e4 2f       	mov	r30, r20
     c66:	95 2e       	mov	r9, r21
     c68:	86 2e       	mov	r8, r22
     c6a:	77 2e       	mov	r7, r23
     c6c:	68 2e       	mov	r6, r24
     c6e:	59 2e       	mov	r5, r25
     c70:	4e 2f       	mov	r20, r30
     c72:	59 2d       	mov	r21, r9
     c74:	68 2d       	mov	r22, r8
     c76:	77 2d       	mov	r23, r7
     c78:	86 2d       	mov	r24, r6
     c7a:	95 2d       	mov	r25, r5
     c7c:	05 e0       	ldi	r16, 0x05	; 5
     c7e:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     c82:	a9 88       	ldd	r10, Y+17	; 0x11
     c84:	bf 2e       	mov	r11, r31
     c86:	ce 2e       	mov	r12, r30
     c88:	d9 2c       	mov	r13, r9
     c8a:	e8 2c       	mov	r14, r8
     c8c:	f7 2c       	mov	r15, r7
     c8e:	06 2d       	mov	r16, r6
     c90:	15 2d       	mov	r17, r5
     c92:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
     c96:	01 e0       	ldi	r16, 0x01	; 1
     c98:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     c9c:	06 2d       	mov	r16, r6
     c9e:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
     ca2:	22 2e       	mov	r2, r18
     ca4:	b3 2f       	mov	r27, r19
     ca6:	4a 8b       	std	Y+18, r20	; 0x12
     ca8:	5b 8b       	std	Y+19, r21	; 0x13
     caa:	6c 8b       	std	Y+20, r22	; 0x14
     cac:	7d 8b       	std	Y+21, r23	; 0x15
     cae:	48 2e       	mov	r4, r24
     cb0:	39 2e       	mov	r3, r25
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
     cb8:	5c f4       	brge	.+22     	; 0xcd0 <readMS56XX+0x2c2>
     cba:	af e0       	ldi	r26, 0x0F	; 15
     cbc:	0e 94 8b 11 	call	0x2316	; 0x2316 <__adddi3_s8>
     cc0:	22 2e       	mov	r2, r18
     cc2:	b3 2f       	mov	r27, r19
     cc4:	4a 8b       	std	Y+18, r20	; 0x12
     cc6:	5b 8b       	std	Y+19, r21	; 0x13
     cc8:	6c 8b       	std	Y+20, r22	; 0x14
     cca:	7d 8b       	std	Y+21, r23	; 0x15
     ccc:	48 2e       	mov	r4, r24
     cce:	39 2e       	mov	r3, r25
     cd0:	22 2d       	mov	r18, r2
     cd2:	3b 2f       	mov	r19, r27
     cd4:	4a 89       	ldd	r20, Y+18	; 0x12
     cd6:	5b 89       	ldd	r21, Y+19	; 0x13
     cd8:	6c 89       	ldd	r22, Y+20	; 0x14
     cda:	7d 89       	ldd	r23, Y+21	; 0x15
     cdc:	84 2d       	mov	r24, r4
     cde:	93 2d       	mov	r25, r3
     ce0:	04 e0       	ldi	r16, 0x04	; 4
     ce2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
     ce6:	29 87       	std	Y+9, r18	; 0x09
     ce8:	3a 8b       	std	Y+18, r19	; 0x12
     cea:	4b 8b       	std	Y+19, r20	; 0x13
     cec:	5c 8b       	std	Y+20, r21	; 0x14
     cee:	6d 8b       	std	Y+21, r22	; 0x15
     cf0:	7e 8f       	std	Y+30, r23	; 0x1e
     cf2:	8f 8f       	std	Y+31, r24	; 0x1f
     cf4:	98 a3       	std	Y+32, r25	; 0x20
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
     cf6:	29 89       	ldd	r18, Y+17	; 0x11
     cf8:	3f 2f       	mov	r19, r31
     cfa:	4e 2f       	mov	r20, r30
     cfc:	59 2d       	mov	r21, r9
     cfe:	68 2d       	mov	r22, r8
     d00:	77 2d       	mov	r23, r7
     d02:	86 2d       	mov	r24, r6
     d04:	95 2d       	mov	r25, r5
     d06:	01 e0       	ldi	r16, 0x01	; 1
     d08:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     d0c:	29 a3       	std	Y+33, r18	; 0x21
     d0e:	3a a3       	std	Y+34, r19	; 0x22
     d10:	4b a3       	std	Y+35, r20	; 0x23
     d12:	5c a3       	std	Y+36, r21	; 0x24
     d14:	6d a3       	std	Y+37, r22	; 0x25
     d16:	7e a3       	std	Y+38, r23	; 0x26
     d18:	8f a3       	std	Y+39, r24	; 0x27
     d1a:	98 a7       	std	Y+40, r25	; 0x28
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <readMS56XX+0x338>
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
		SENS2 = 0;	
     d1e:	19 a2       	std	Y+33, r1	; 0x21
     d20:	1a a2       	std	Y+34, r1	; 0x22
     d22:	1b a2       	std	Y+35, r1	; 0x23
     d24:	1c a2       	std	Y+36, r1	; 0x24
     d26:	1d a2       	std	Y+37, r1	; 0x25
     d28:	1e a2       	std	Y+38, r1	; 0x26
     d2a:	1f a2       	std	Y+39, r1	; 0x27
     d2c:	18 a6       	std	Y+40, r1	; 0x28
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
     d2e:	19 86       	std	Y+9, r1	; 0x09
     d30:	1a 8a       	std	Y+18, r1	; 0x12
     d32:	1b 8a       	std	Y+19, r1	; 0x13
     d34:	1c 8a       	std	Y+20, r1	; 0x14
     d36:	1d 8a       	std	Y+21, r1	; 0x15
     d38:	1e 8e       	std	Y+30, r1	; 0x1e
     d3a:	1f 8e       	std	Y+31, r1	; 0x1f
     d3c:	18 a2       	std	Y+32, r1	; 0x20
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) / ((int64_t)16);
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
     d3e:	1e 8a       	std	Y+22, r1	; 0x16
     d40:	1f 8a       	std	Y+23, r1	; 0x17
     d42:	18 8e       	std	Y+24, r1	; 0x18
     d44:	19 8e       	std	Y+25, r1	; 0x19
		OFF2 = 0;
		SENS2 = 0;	
	} 
	
	if (TEMP<-1500)
     d46:	ed 84       	ldd	r14, Y+13	; 0x0d
     d48:	fe 84       	ldd	r15, Y+14	; 0x0e
     d4a:	0f 85       	ldd	r16, Y+15	; 0x0f
     d4c:	18 89       	ldd	r17, Y+16	; 0x10
     d4e:	24 e2       	ldi	r18, 0x24	; 36
     d50:	e2 16       	cp	r14, r18
     d52:	2a ef       	ldi	r18, 0xFA	; 250
     d54:	f2 06       	cpc	r15, r18
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	02 07       	cpc	r16, r18
     d5a:	12 07       	cpc	r17, r18
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <readMS56XX+0x352>
     d5e:	5f c0       	rjmp	.+190    	; 0xe1e <readMS56XX+0x410>
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
     d60:	2d 85       	ldd	r18, Y+13	; 0x0d
     d62:	3e 85       	ldd	r19, Y+14	; 0x0e
     d64:	4f 85       	ldd	r20, Y+15	; 0x0f
     d66:	58 89       	ldd	r21, Y+16	; 0x10
     d68:	67 01       	movw	r12, r14
     d6a:	78 01       	movw	r14, r16
     d6c:	ff 0c       	add	r15, r15
     d6e:	cc 08       	sbc	r12, r12
     d70:	dc 2c       	mov	r13, r12
     d72:	76 01       	movw	r14, r12
     d74:	6c 2d       	mov	r22, r12
     d76:	7c 2d       	mov	r23, r12
     d78:	8c 2d       	mov	r24, r12
     d7a:	9c 2d       	mov	r25, r12
     d7c:	24 52       	subi	r18, 0x24	; 36
     d7e:	3a 4f       	sbci	r19, 0xFA	; 250
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	6f 4f       	sbci	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	8f 4f       	sbci	r24, 0xFF	; 255
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	b2 2f       	mov	r27, r18
     d8e:	a3 2f       	mov	r26, r19
     d90:	44 2e       	mov	r4, r20
     d92:	35 2e       	mov	r3, r21
     d94:	96 2e       	mov	r9, r22
     d96:	87 2e       	mov	r8, r23
     d98:	78 2e       	mov	r7, r24
     d9a:	69 2e       	mov	r6, r25
     d9c:	04 e0       	ldi	r16, 0x04	; 4
     d9e:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     da2:	ab 2e       	mov	r10, r27
     da4:	ba 2e       	mov	r11, r26
     da6:	c4 2c       	mov	r12, r4
     da8:	d3 2c       	mov	r13, r3
     daa:	e9 2c       	mov	r14, r9
     dac:	f8 2c       	mov	r15, r8
     dae:	07 2d       	mov	r16, r7
     db0:	16 2d       	mov	r17, r6
     db2:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
     db6:	68 94       	set
     db8:	55 24       	eor	r5, r5
     dba:	51 f8       	bld	r5, 1
     dbc:	25 25       	eor	r18, r5
     dbe:	a9 84       	ldd	r10, Y+9	; 0x09
     dc0:	ba 88       	ldd	r11, Y+18	; 0x12
     dc2:	cb 88       	ldd	r12, Y+19	; 0x13
     dc4:	dc 88       	ldd	r13, Y+20	; 0x14
     dc6:	ed 88       	ldd	r14, Y+21	; 0x15
     dc8:	fe 8c       	ldd	r15, Y+30	; 0x1e
     dca:	0f 8d       	ldd	r16, Y+31	; 0x1f
     dcc:	18 a1       	ldd	r17, Y+32	; 0x20
     dce:	0e 94 82 11 	call	0x2304	; 0x2304 <__adddi3>
     dd2:	29 87       	std	Y+9, r18	; 0x09
     dd4:	3a 8b       	std	Y+18, r19	; 0x12
     dd6:	4b 8b       	std	Y+19, r20	; 0x13
     dd8:	5c 8b       	std	Y+20, r21	; 0x14
     dda:	6d 8b       	std	Y+21, r22	; 0x15
     ddc:	7e 8f       	std	Y+30, r23	; 0x1e
     dde:	8f 8f       	std	Y+31, r24	; 0x1f
     de0:	98 a3       	std	Y+32, r25	; 0x20
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
     de2:	2b 2f       	mov	r18, r27
     de4:	3a 2f       	mov	r19, r26
     de6:	44 2d       	mov	r20, r4
     de8:	53 2d       	mov	r21, r3
     dea:	69 2d       	mov	r22, r9
     dec:	78 2d       	mov	r23, r8
     dee:	87 2d       	mov	r24, r7
     df0:	96 2d       	mov	r25, r6
     df2:	03 e0       	ldi	r16, 0x03	; 3
     df4:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     df8:	25 25       	eor	r18, r5
     dfa:	a9 a0       	ldd	r10, Y+33	; 0x21
     dfc:	ba a0       	ldd	r11, Y+34	; 0x22
     dfe:	cb a0       	ldd	r12, Y+35	; 0x23
     e00:	dc a0       	ldd	r13, Y+36	; 0x24
     e02:	ed a0       	ldd	r14, Y+37	; 0x25
     e04:	fe a0       	ldd	r15, Y+38	; 0x26
     e06:	0f a1       	ldd	r16, Y+39	; 0x27
     e08:	18 a5       	ldd	r17, Y+40	; 0x28
     e0a:	0e 94 82 11 	call	0x2304	; 0x2304 <__adddi3>
     e0e:	29 a3       	std	Y+33, r18	; 0x21
     e10:	3a a3       	std	Y+34, r19	; 0x22
     e12:	4b a3       	std	Y+35, r20	; 0x23
     e14:	5c a3       	std	Y+36, r21	; 0x24
     e16:	6d a3       	std	Y+37, r22	; 0x25
     e18:	7e a3       	std	Y+38, r23	; 0x26
     e1a:	8f a3       	std	Y+39, r24	; 0x27
     e1c:	98 a7       	std	Y+40, r25	; 0x28
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
     e1e:	ad a9       	ldd	r26, Y+53	; 0x35
     e20:	be a9       	ldd	r27, Y+54	; 0x36
     e22:	1f 96       	adiw	r26, 0x0f	; 15
     e24:	8d 90       	ld	r8, X+
     e26:	9c 90       	ld	r9, X
     e28:	50 97       	sbiw	r26, 0x10	; 16
     e2a:	28 2d       	mov	r18, r8
     e2c:	39 2d       	mov	r19, r9
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	01 e1       	ldi	r16, 0x11	; 17
     e3c:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     e40:	42 2e       	mov	r4, r18
     e42:	33 2e       	mov	r3, r19
     e44:	24 2e       	mov	r2, r20
     e46:	59 8b       	std	Y+17, r21	; 0x11
     e48:	6a 8f       	std	Y+26, r22	; 0x1a
     e4a:	7b 8f       	std	Y+27, r23	; 0x1b
     e4c:	8c 8f       	std	Y+28, r24	; 0x1c
     e4e:	9d 8f       	std	Y+29, r25	; 0x1d
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
     e50:	53 96       	adiw	r26, 0x13	; 19
     e52:	0d 91       	ld	r16, X+
     e54:	1c 91       	ld	r17, X
     e56:	54 97       	sbiw	r26, 0x14	; 20
     e58:	a0 2e       	mov	r10, r16
     e5a:	b1 2e       	mov	r11, r17
     e5c:	c1 2c       	mov	r12, r1
     e5e:	d1 2c       	mov	r13, r1
     e60:	e1 2c       	mov	r14, r1
     e62:	f1 2c       	mov	r15, r1
     e64:	00 e0       	ldi	r16, 0x00	; 0
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	29 81       	ldd	r18, Y+1	; 0x01
     e6a:	3a 81       	ldd	r19, Y+2	; 0x02
     e6c:	4b 81       	ldd	r20, Y+3	; 0x03
     e6e:	5c 81       	ldd	r21, Y+4	; 0x04
     e70:	6d 81       	ldd	r22, Y+5	; 0x05
     e72:	76 2f       	mov	r23, r22
     e74:	86 2f       	mov	r24, r22
     e76:	96 2f       	mov	r25, r22
     e78:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
     e7c:	f2 2e       	mov	r15, r18
     e7e:	03 2f       	mov	r16, r19
     e80:	14 2f       	mov	r17, r20
     e82:	b5 2f       	mov	r27, r21
     e84:	f6 2f       	mov	r31, r22
     e86:	e7 2f       	mov	r30, r23
     e88:	58 2e       	mov	r5, r24
     e8a:	69 2e       	mov	r6, r25
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
     e92:	5c f4       	brge	.+22     	; 0xeaa <readMS56XX+0x49c>
     e94:	af e3       	ldi	r26, 0x3F	; 63
     e96:	0e 94 8b 11 	call	0x2316	; 0x2316 <__adddi3_s8>
     e9a:	f2 2e       	mov	r15, r18
     e9c:	03 2f       	mov	r16, r19
     e9e:	14 2f       	mov	r17, r20
     ea0:	b5 2f       	mov	r27, r21
     ea2:	f6 2f       	mov	r31, r22
     ea4:	e7 2f       	mov	r30, r23
     ea6:	58 2e       	mov	r5, r24
     ea8:	69 2e       	mov	r6, r25
     eaa:	2f 2d       	mov	r18, r15
     eac:	30 2f       	mov	r19, r16
     eae:	41 2f       	mov	r20, r17
     eb0:	5b 2f       	mov	r21, r27
     eb2:	6f 2f       	mov	r22, r31
     eb4:	7e 2f       	mov	r23, r30
     eb6:	85 2d       	mov	r24, r5
     eb8:	96 2d       	mov	r25, r6
     eba:	06 e0       	ldi	r16, 0x06	; 6
     ebc:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
     ec0:	a2 2e       	mov	r10, r18
     ec2:	b3 2e       	mov	r11, r19
     ec4:	c4 2e       	mov	r12, r20
     ec6:	d5 2e       	mov	r13, r21
     ec8:	e6 2e       	mov	r14, r22
     eca:	f7 2e       	mov	r15, r23
     ecc:	08 2f       	mov	r16, r24
     ece:	19 2f       	mov	r17, r25
	if (TEMP<-1500)
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
     ed0:	24 2d       	mov	r18, r4
     ed2:	33 2d       	mov	r19, r3
     ed4:	42 2d       	mov	r20, r2
     ed6:	59 89       	ldd	r21, Y+17	; 0x11
     ed8:	6a 8d       	ldd	r22, Y+26	; 0x1a
     eda:	7b 8d       	ldd	r23, Y+27	; 0x1b
     edc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ede:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ee0:	0e 94 82 11 	call	0x2304	; 0x2304 <__adddi3>
     ee4:	29 8b       	std	Y+17, r18	; 0x11
     ee6:	3a 8f       	std	Y+26, r19	; 0x1a
     ee8:	4b 8f       	std	Y+27, r20	; 0x1b
     eea:	5c 8f       	std	Y+28, r21	; 0x1c
     eec:	6d 8f       	std	Y+29, r22	; 0x1d
     eee:	7d a7       	std	Y+45, r23	; 0x2d
     ef0:	8e a7       	std	Y+46, r24	; 0x2e
     ef2:	9f a7       	std	Y+47, r25	; 0x2f
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
	
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
     ef4:	ed a9       	ldd	r30, Y+53	; 0x35
     ef6:	fe a9       	ldd	r31, Y+54	; 0x36
     ef8:	85 84       	ldd	r8, Z+13	; 0x0d
     efa:	96 84       	ldd	r9, Z+14	; 0x0e
     efc:	28 2d       	mov	r18, r8
     efe:	39 2d       	mov	r19, r9
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	00 e1       	ldi	r16, 0x10	; 16
     f0e:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ashldi3>
     f12:	42 2e       	mov	r4, r18
     f14:	33 2e       	mov	r3, r19
     f16:	24 2e       	mov	r2, r20
     f18:	58 ab       	std	Y+48, r21	; 0x30
     f1a:	69 ab       	std	Y+49, r22	; 0x31
     f1c:	7a ab       	std	Y+50, r23	; 0x32
     f1e:	8b ab       	std	Y+51, r24	; 0x33
     f20:	9c ab       	std	Y+52, r25	; 0x34
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
     f22:	01 89       	ldd	r16, Z+17	; 0x11
     f24:	12 89       	ldd	r17, Z+18	; 0x12
     f26:	a0 2e       	mov	r10, r16
     f28:	b1 2e       	mov	r11, r17
     f2a:	c1 2c       	mov	r12, r1
     f2c:	d1 2c       	mov	r13, r1
     f2e:	e1 2c       	mov	r14, r1
     f30:	f1 2c       	mov	r15, r1
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	29 81       	ldd	r18, Y+1	; 0x01
     f38:	3a 81       	ldd	r19, Y+2	; 0x02
     f3a:	4b 81       	ldd	r20, Y+3	; 0x03
     f3c:	5c 81       	ldd	r21, Y+4	; 0x04
     f3e:	6d 81       	ldd	r22, Y+5	; 0x05
     f40:	76 2f       	mov	r23, r22
     f42:	86 2f       	mov	r24, r22
     f44:	96 2f       	mov	r25, r22
     f46:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
		) / ((int64_t)128);
     f4a:	f2 2e       	mov	r15, r18
     f4c:	03 2f       	mov	r16, r19
     f4e:	14 2f       	mov	r17, r20
     f50:	b5 2f       	mov	r27, r21
     f52:	f6 2f       	mov	r31, r22
     f54:	e7 2f       	mov	r30, r23
     f56:	58 2e       	mov	r5, r24
     f58:	69 2e       	mov	r6, r25
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
     f60:	5c f4       	brge	.+22     	; 0xf78 <readMS56XX+0x56a>
     f62:	af e7       	ldi	r26, 0x7F	; 127
     f64:	0e 94 8b 11 	call	0x2316	; 0x2316 <__adddi3_s8>
     f68:	f2 2e       	mov	r15, r18
     f6a:	03 2f       	mov	r16, r19
     f6c:	14 2f       	mov	r17, r20
     f6e:	b5 2f       	mov	r27, r21
     f70:	f6 2f       	mov	r31, r22
     f72:	e7 2f       	mov	r30, r23
     f74:	58 2e       	mov	r5, r24
     f76:	69 2e       	mov	r6, r25
     f78:	2f 2d       	mov	r18, r15
     f7a:	30 2f       	mov	r19, r16
     f7c:	41 2f       	mov	r20, r17
     f7e:	5b 2f       	mov	r21, r27
     f80:	6f 2f       	mov	r22, r31
     f82:	7e 2f       	mov	r23, r30
     f84:	85 2d       	mov	r24, r5
     f86:	96 2d       	mov	r25, r6
     f88:	07 e0       	ldi	r16, 0x07	; 7
     f8a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
     f8e:	a2 2e       	mov	r10, r18
     f90:	b3 2e       	mov	r11, r19
     f92:	c4 2e       	mov	r12, r20
     f94:	d5 2e       	mov	r13, r21
     f96:	e6 2e       	mov	r14, r22
     f98:	f7 2e       	mov	r15, r23
     f9a:	08 2f       	mov	r16, r24
     f9c:	19 2f       	mov	r17, r25
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
	}
	int64_t OFF = ((int64_t)sensor->OFFt1) * ((int64_t)131072) +
	(((int64_t)sensor->TCO) * ((int64_t)dT)) / ((int64_t)64);
	
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
     f9e:	24 2d       	mov	r18, r4
     fa0:	33 2d       	mov	r19, r3
     fa2:	42 2d       	mov	r20, r2
     fa4:	58 a9       	ldd	r21, Y+48	; 0x30
     fa6:	69 a9       	ldd	r22, Y+49	; 0x31
     fa8:	7a a9       	ldd	r23, Y+50	; 0x32
     faa:	8b a9       	ldd	r24, Y+51	; 0x33
     fac:	9c a9       	ldd	r25, Y+52	; 0x34
     fae:	0e 94 82 11 	call	0x2304	; 0x2304 <__adddi3>
		
	TEMP -= T2;
	OFF -= OFF2;
	SENS -= SENS2;
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
     fb2:	e9 a4       	ldd	r14, Y+41	; 0x29
     fb4:	fa a4       	ldd	r15, Y+42	; 0x2a
     fb6:	0b a5       	ldd	r16, Y+43	; 0x2b
     fb8:	1c a5       	ldd	r17, Y+44	; 0x2c
     fba:	17 01       	movw	r2, r14
     fbc:	28 01       	movw	r4, r16
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
	OFF -= OFF2;
	SENS -= SENS2;
     fbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     fc0:	ba a0       	ldd	r11, Y+34	; 0x22
     fc2:	cb a0       	ldd	r12, Y+35	; 0x23
     fc4:	dc a0       	ldd	r13, Y+36	; 0x24
     fc6:	ed a0       	ldd	r14, Y+37	; 0x25
     fc8:	fe a0       	ldd	r15, Y+38	; 0x26
     fca:	0f a1       	ldd	r16, Y+39	; 0x27
     fcc:	18 a5       	ldd	r17, Y+40	; 0x28
     fce:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
     fd2:	a2 2e       	mov	r10, r18
     fd4:	b3 2e       	mov	r11, r19
     fd6:	c4 2e       	mov	r12, r20
     fd8:	d5 2e       	mov	r13, r21
     fda:	e6 2e       	mov	r14, r22
     fdc:	f7 2e       	mov	r15, r23
     fde:	08 2f       	mov	r16, r24
     fe0:	19 2f       	mov	r17, r25
     fe2:	22 2d       	mov	r18, r2
     fe4:	33 2d       	mov	r19, r3
     fe6:	44 2d       	mov	r20, r4
     fe8:	55 2d       	mov	r21, r5
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 30 10 	call	0x2060	; 0x2060 <__muldi3>
     ff6:	f2 2e       	mov	r15, r18
     ff8:	03 2f       	mov	r16, r19
     ffa:	14 2f       	mov	r17, r20
     ffc:	b5 2f       	mov	r27, r21
     ffe:	f6 2f       	mov	r31, r22
    1000:	e7 2f       	mov	r30, r23
    1002:	58 2e       	mov	r5, r24
    1004:	69 2e       	mov	r6, r25
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
    100c:	84 f4       	brge	.+32     	; 0x102e <readMS56XX+0x620>
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	31 09       	sbc	r19, r1
    1012:	40 4e       	sbci	r20, 0xE0	; 224
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	6f 4f       	sbci	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	f2 2e       	mov	r15, r18
    1020:	03 2f       	mov	r16, r19
    1022:	14 2f       	mov	r17, r20
    1024:	b5 2f       	mov	r27, r21
    1026:	f6 2f       	mov	r31, r22
    1028:	e7 2f       	mov	r30, r23
    102a:	58 2e       	mov	r5, r24
    102c:	69 2e       	mov	r6, r25
    102e:	2f 2d       	mov	r18, r15
    1030:	30 2f       	mov	r19, r16
    1032:	41 2f       	mov	r20, r17
    1034:	5b 2f       	mov	r21, r27
    1036:	6f 2f       	mov	r22, r31
    1038:	7e 2f       	mov	r23, r30
    103a:	85 2d       	mov	r24, r5
    103c:	96 2d       	mov	r25, r6
    103e:	05 e1       	ldi	r16, 0x15	; 21
    1040:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
    1044:	62 2e       	mov	r6, r18
    1046:	73 2e       	mov	r7, r19
    1048:	84 2e       	mov	r8, r20
    104a:	95 2e       	mov	r9, r21
    104c:	56 2e       	mov	r5, r22
    104e:	47 2e       	mov	r4, r23
    1050:	f8 2f       	mov	r31, r24
    1052:	e9 2f       	mov	r30, r25
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
	OFF -= OFF2;
    1054:	29 89       	ldd	r18, Y+17	; 0x11
    1056:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1058:	4b 8d       	ldd	r20, Y+27	; 0x1b
    105a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    105c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    105e:	7d a5       	ldd	r23, Y+45	; 0x2d
    1060:	8e a5       	ldd	r24, Y+46	; 0x2e
    1062:	9f a5       	ldd	r25, Y+47	; 0x2f
    1064:	a9 84       	ldd	r10, Y+9	; 0x09
    1066:	ba 88       	ldd	r11, Y+18	; 0x12
    1068:	cb 88       	ldd	r12, Y+19	; 0x13
    106a:	dc 88       	ldd	r13, Y+20	; 0x14
    106c:	ed 88       	ldd	r14, Y+21	; 0x15
    106e:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1070:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1072:	18 a1       	ldd	r17, Y+32	; 0x20
    1074:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
    1078:	a2 2e       	mov	r10, r18
    107a:	b3 2e       	mov	r11, r19
    107c:	c4 2e       	mov	r12, r20
    107e:	d5 2e       	mov	r13, r21
    1080:	e6 2e       	mov	r14, r22
    1082:	f7 2e       	mov	r15, r23
    1084:	08 2f       	mov	r16, r24
    1086:	19 2f       	mov	r17, r25
	SENS -= SENS2;
	
	int64_t PRESSURE = (((int64_t)rawPressure) * SENS / ((int64_t)2097152) - OFF) 
    1088:	26 2d       	mov	r18, r6
    108a:	37 2d       	mov	r19, r7
    108c:	48 2d       	mov	r20, r8
    108e:	59 2d       	mov	r21, r9
    1090:	65 2d       	mov	r22, r5
    1092:	74 2d       	mov	r23, r4
    1094:	8f 2f       	mov	r24, r31
    1096:	9e 2f       	mov	r25, r30
    1098:	0e 94 97 11 	call	0x232e	; 0x232e <__subdi3>
    109c:	f2 2e       	mov	r15, r18
    109e:	03 2f       	mov	r16, r19
    10a0:	14 2f       	mov	r17, r20
    10a2:	b5 2f       	mov	r27, r21
    10a4:	f6 2f       	mov	r31, r22
    10a6:	e7 2f       	mov	r30, r23
    10a8:	58 2e       	mov	r5, r24
    10aa:	69 2e       	mov	r6, r25
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	0e 94 a0 11 	call	0x2340	; 0x2340 <__cmpdi2_s8>
    10b2:	84 f4       	brge	.+32     	; 0x10d4 <readMS56XX+0x6c6>
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	30 48       	sbci	r19, 0x80	; 128
    10b8:	4f 4f       	sbci	r20, 0xFF	; 255
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	6f 4f       	sbci	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	f2 2e       	mov	r15, r18
    10c6:	03 2f       	mov	r16, r19
    10c8:	14 2f       	mov	r17, r20
    10ca:	b5 2f       	mov	r27, r21
    10cc:	f6 2f       	mov	r31, r22
    10ce:	e7 2f       	mov	r30, r23
    10d0:	58 2e       	mov	r5, r24
    10d2:	69 2e       	mov	r6, r25
    10d4:	2f 2d       	mov	r18, r15
    10d6:	30 2f       	mov	r19, r16
    10d8:	41 2f       	mov	r20, r17
    10da:	5b 2f       	mov	r21, r27
    10dc:	6f 2f       	mov	r22, r31
    10de:	7e 2f       	mov	r23, r30
    10e0:	85 2d       	mov	r24, r5
    10e2:	96 2d       	mov	r25, r6
    10e4:	0f e0       	ldi	r16, 0x0F	; 15
    10e6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ashrdi3>
	pressureSensorCalibration.TEMPSENS);*/
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
    10ea:	ad a9       	ldd	r26, Y+53	; 0x35
    10ec:	be a9       	ldd	r27, Y+54	; 0x36
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	2c 93       	st	X, r18
    10f2:	14 97       	sbiw	r26, 0x04	; 4
    10f4:	15 96       	adiw	r26, 0x05	; 5
    10f6:	3c 93       	st	X, r19
    10f8:	15 97       	sbiw	r26, 0x05	; 5
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	4c 93       	st	X, r20
    10fe:	16 97       	sbiw	r26, 0x06	; 6
    1100:	17 96       	adiw	r26, 0x07	; 7
    1102:	5c 93       	st	X, r21
	int64_t SENS = ((int64_t)sensor->SENSt1) * ((int64_t)65536) +
		(
			((int64_t)sensor->TCS) * ((int64_t)dT)
		) / ((int64_t)128);
		
	TEMP -= T2;
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	af 85       	ldd	r26, Y+15	; 0x0f
    110a:	b8 89       	ldd	r27, Y+16	; 0x10
    110c:	ee 88       	ldd	r14, Y+22	; 0x16
    110e:	ff 88       	ldd	r15, Y+23	; 0x17
    1110:	08 8d       	ldd	r16, Y+24	; 0x18
    1112:	19 8d       	ldd	r17, Y+25	; 0x19
    1114:	8e 19       	sub	r24, r14
    1116:	9f 09       	sbc	r25, r15
    1118:	a0 0b       	sbc	r26, r16
    111a:	b1 0b       	sbc	r27, r17
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
    111c:	ed a9       	ldd	r30, Y+53	; 0x35
    111e:	fe a9       	ldd	r31, Y+54	; 0x36
    1120:	80 87       	std	Z+8, r24	; 0x08
    1122:	91 87       	std	Z+9, r25	; 0x09
    1124:	a2 87       	std	Z+10, r26	; 0x0a
    1126:	b3 87       	std	Z+11, r27	; 0x0b
 }
    1128:	e6 96       	adiw	r28, 0x36	; 54
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	9f 90       	pop	r9
    1144:	8f 90       	pop	r8
    1146:	7f 90       	pop	r7
    1148:	6f 90       	pop	r6
    114a:	5f 90       	pop	r5
    114c:	4f 90       	pop	r4
    114e:	3f 90       	pop	r3
    1150:	2f 90       	pop	r2
    1152:	08 95       	ret

00001154 <spiread>:
#include "SPI.h"

void readPressureSensorCalibration(void);

uint8_t spiread(SPI_t* targetspi)
{
    1154:	fc 01       	movw	r30, r24
	//delay_ms(1); //Erroneous data, or no data, from the MS5611 without these delays
	targetspi->DATA = 0xFE;
    1156:	8e ef       	ldi	r24, 0xFE	; 254
    1158:	83 83       	std	Z+3, r24	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait until data actually comes in
    115a:	92 81       	ldd	r25, Z+2	; 0x02
    115c:	99 23       	and	r25, r25
    115e:	ec f7       	brge	.-6      	; 0x115a <spiread+0x6>
	//delay_ms(1);
	return targetspi->DATA;
    1160:	83 81       	ldd	r24, Z+3	; 0x03

}
    1162:	08 95       	ret

00001164 <spiwrite>:

void spiwrite(SPI_t* targetspi, uint8_t data)
{
    1164:	fc 01       	movw	r30, r24
	//delay_ms(1);
	targetspi->DATA = data;
    1166:	63 83       	std	Z+3, r22	; 0x03
	while ( !(targetspi->STATUS >> 7) )
    1168:	92 81       	ldd	r25, Z+2	; 0x02
    116a:	99 23       	and	r25, r25
    116c:	ec f7       	brge	.-6      	; 0x1168 <spiwrite+0x4>
	{} //Wait for data to be sent
	//delay_ms(1);
}
    116e:	08 95       	ret

00001170 <spiselect>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1170:	e8 2f       	mov	r30, r24
    1172:	e6 95       	lsr	r30
    1174:	e6 95       	lsr	r30
    1176:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	e4 9f       	mul	r30, r20
    117c:	f0 01       	movw	r30, r0
    117e:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1180:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1182:	87 70       	andi	r24, 0x07	; 7
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <spiselect+0x20>
    118c:	44 0f       	add	r20, r20
    118e:	55 1f       	adc	r21, r21
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <spiselect+0x1c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1194:	46 83       	std	Z+6, r20	; 0x06
    1196:	08 95       	ret

00001198 <spideselect>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1198:	e8 2f       	mov	r30, r24
    119a:	e6 95       	lsr	r30
    119c:	e6 95       	lsr	r30
    119e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	e4 9f       	mul	r30, r20
    11a4:	f0 01       	movw	r30, r0
    11a6:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11a8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11aa:	87 70       	andi	r24, 0x07	; 7
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <spideselect+0x20>
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <spideselect+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    11bc:	45 83       	std	Z+5, r20	; 0x05
    11be:	08 95       	ret

000011c0 <enable_select_pin>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    11c0:	e8 2f       	mov	r30, r24
    11c2:	e6 95       	lsr	r30
    11c4:	e6 95       	lsr	r30
    11c6:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    11c8:	90 e2       	ldi	r25, 0x20	; 32
    11ca:	e9 9f       	mul	r30, r25
    11cc:	f0 01       	movw	r30, r0
    11ce:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11d0:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11d2:	98 2f       	mov	r25, r24
    11d4:	97 70       	andi	r25, 0x07	; 7
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <enable_select_pin+0x20>
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	9a 95       	dec	r25
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <enable_select_pin+0x1c>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    11e4:	21 83       	std	Z+1, r18	; 0x01

void enable_select_pin(ioport_pin_t pin)
{
	//ioport_set_pin_dir(IOPORT_CREATE_PIN(PORTF, 4), IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	spideselect(pin);
    11e6:	d8 cf       	rjmp	.-80     	; 0x1198 <spideselect>
    11e8:	08 95       	ret

000011ea <initializespi>:
}

void initializespi(SPI_t* targetspi, PORT_t* port)
{
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
    11f4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	09 f4       	brne	.+2      	; 0x11fc <initializespi+0x12>
    11fa:	18 c1       	rjmp	.+560    	; 0x142c <initializespi+0x242>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    11fc:	80 3c       	cpi	r24, 0xC0	; 192
    11fe:	91 05       	cpc	r25, r1
    1200:	21 f4       	brne	.+8      	; 0x120a <initializespi+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1202:	60 e1       	ldi	r22, 0x10	; 16
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	ba d8       	rcall	.-3724   	; 0x37c <sysclk_enable_module>
    1208:	11 c1       	rjmp	.+546    	; 0x142c <initializespi+0x242>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    120a:	c1 15       	cp	r28, r1
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	d8 07       	cpc	r29, r24
    1210:	21 f4       	brne	.+8      	; 0x121a <initializespi+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1212:	64 e0       	ldi	r22, 0x04	; 4
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	b2 d8       	rcall	.-3740   	; 0x37c <sysclk_enable_module>
    1218:	09 c1       	rjmp	.+530    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    121a:	c0 38       	cpi	r28, 0x80	; 128
    121c:	e1 e0       	ldi	r30, 0x01	; 1
    121e:	de 07       	cpc	r29, r30
    1220:	21 f4       	brne	.+8      	; 0x122a <initializespi+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	aa d8       	rcall	.-3756   	; 0x37c <sysclk_enable_module>
    1228:	01 c1       	rjmp	.+514    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    122a:	c1 15       	cp	r28, r1
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	df 07       	cpc	r29, r31
    1230:	21 f4       	brne	.+8      	; 0x123a <initializespi+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	a2 d8       	rcall	.-3772   	; 0x37c <sysclk_enable_module>
    1238:	f9 c0       	rjmp	.+498    	; 0x142c <initializespi+0x242>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    123a:	c0 38       	cpi	r28, 0x80	; 128
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	d8 07       	cpc	r29, r24
    1240:	21 f4       	brne	.+8      	; 0x124a <initializespi+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	9a d8       	rcall	.-3788   	; 0x37c <sysclk_enable_module>
    1248:	f1 c0       	rjmp	.+482    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    124a:	c0 39       	cpi	r28, 0x90	; 144
    124c:	e3 e0       	ldi	r30, 0x03	; 3
    124e:	de 07       	cpc	r29, r30
    1250:	21 f4       	brne	.+8      	; 0x125a <initializespi+0x70>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	92 d8       	rcall	.-3804   	; 0x37c <sysclk_enable_module>
    1258:	e9 c0       	rjmp	.+466    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    125a:	c1 15       	cp	r28, r1
    125c:	f2 e0       	ldi	r31, 0x02	; 2
    125e:	df 07       	cpc	r29, r31
    1260:	21 f4       	brne	.+8      	; 0x126a <initializespi+0x80>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	8a d8       	rcall	.-3820   	; 0x37c <sysclk_enable_module>
    1268:	e1 c0       	rjmp	.+450    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    126a:	c0 34       	cpi	r28, 0x40	; 64
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	d8 07       	cpc	r29, r24
    1270:	21 f4       	brne	.+8      	; 0x127a <initializespi+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1272:	62 e0       	ldi	r22, 0x02	; 2
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	82 d8       	rcall	.-3836   	; 0x37c <sysclk_enable_module>
    1278:	d9 c0       	rjmp	.+434    	; 0x142c <initializespi+0x242>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    127a:	c0 32       	cpi	r28, 0x20	; 32
    127c:	e3 e0       	ldi	r30, 0x03	; 3
    127e:	de 07       	cpc	r29, r30
    1280:	21 f4       	brne	.+8      	; 0x128a <initializespi+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	7a d8       	rcall	.-3852   	; 0x37c <sysclk_enable_module>
    1288:	d1 c0       	rjmp	.+418    	; 0x142c <initializespi+0x242>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    128a:	c1 15       	cp	r28, r1
    128c:	f8 e0       	ldi	r31, 0x08	; 8
    128e:	df 07       	cpc	r29, r31
    1290:	21 f4       	brne	.+8      	; 0x129a <initializespi+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	72 d8       	rcall	.-3868   	; 0x37c <sysclk_enable_module>
    1298:	c9 c0       	rjmp	.+402    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    129a:	c1 15       	cp	r28, r1
    129c:	89 e0       	ldi	r24, 0x09	; 9
    129e:	d8 07       	cpc	r29, r24
    12a0:	21 f4       	brne	.+8      	; 0x12aa <initializespi+0xc0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	6a d8       	rcall	.-3884   	; 0x37c <sysclk_enable_module>
    12a8:	c1 c0       	rjmp	.+386    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    12aa:	c1 15       	cp	r28, r1
    12ac:	ea e0       	ldi	r30, 0x0A	; 10
    12ae:	de 07       	cpc	r29, r30
    12b0:	21 f4       	brne	.+8      	; 0x12ba <initializespi+0xd0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	85 e0       	ldi	r24, 0x05	; 5
    12b6:	62 d8       	rcall	.-3900   	; 0x37c <sysclk_enable_module>
    12b8:	b9 c0       	rjmp	.+370    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    12ba:	c1 15       	cp	r28, r1
    12bc:	fb e0       	ldi	r31, 0x0B	; 11
    12be:	df 07       	cpc	r29, r31
    12c0:	21 f4       	brne	.+8      	; 0x12ca <initializespi+0xe0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	86 e0       	ldi	r24, 0x06	; 6
    12c6:	5a d8       	rcall	.-3916   	; 0x37c <sysclk_enable_module>
    12c8:	b1 c0       	rjmp	.+354    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    12ca:	c0 34       	cpi	r28, 0x40	; 64
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	d8 07       	cpc	r29, r24
    12d0:	21 f4       	brne	.+8      	; 0x12da <initializespi+0xf0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	52 d8       	rcall	.-3932   	; 0x37c <sysclk_enable_module>
    12d8:	a9 c0       	rjmp	.+338    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    12da:	c0 34       	cpi	r28, 0x40	; 64
    12dc:	e9 e0       	ldi	r30, 0x09	; 9
    12de:	de 07       	cpc	r29, r30
    12e0:	21 f4       	brne	.+8      	; 0x12ea <initializespi+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	4a d8       	rcall	.-3948   	; 0x37c <sysclk_enable_module>
    12e8:	a1 c0       	rjmp	.+322    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    12ea:	c0 34       	cpi	r28, 0x40	; 64
    12ec:	fa e0       	ldi	r31, 0x0A	; 10
    12ee:	df 07       	cpc	r29, r31
    12f0:	21 f4       	brne	.+8      	; 0x12fa <initializespi+0x110>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	85 e0       	ldi	r24, 0x05	; 5
    12f6:	42 d8       	rcall	.-3964   	; 0x37c <sysclk_enable_module>
    12f8:	99 c0       	rjmp	.+306    	; 0x142c <initializespi+0x242>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    12fa:	c0 39       	cpi	r28, 0x90	; 144
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	d8 07       	cpc	r29, r24
    1300:	21 f4       	brne	.+8      	; 0x130a <initializespi+0x120>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	3a d8       	rcall	.-3980   	; 0x37c <sysclk_enable_module>
    1308:	91 c0       	rjmp	.+290    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    130a:	c0 39       	cpi	r28, 0x90	; 144
    130c:	e9 e0       	ldi	r30, 0x09	; 9
    130e:	de 07       	cpc	r29, r30
    1310:	21 f4       	brne	.+8      	; 0x131a <initializespi+0x130>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1312:	64 e0       	ldi	r22, 0x04	; 4
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	32 d8       	rcall	.-3996   	; 0x37c <sysclk_enable_module>
    1318:	89 c0       	rjmp	.+274    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    131a:	c0 39       	cpi	r28, 0x90	; 144
    131c:	fa e0       	ldi	r31, 0x0A	; 10
    131e:	df 07       	cpc	r29, r31
    1320:	21 f4       	brne	.+8      	; 0x132a <initializespi+0x140>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1322:	64 e0       	ldi	r22, 0x04	; 4
    1324:	85 e0       	ldi	r24, 0x05	; 5
    1326:	2a d8       	rcall	.-4012   	; 0x37c <sysclk_enable_module>
    1328:	81 c0       	rjmp	.+258    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    132a:	c0 39       	cpi	r28, 0x90	; 144
    132c:	8b e0       	ldi	r24, 0x0B	; 11
    132e:	d8 07       	cpc	r29, r24
    1330:	21 f4       	brne	.+8      	; 0x133a <initializespi+0x150>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1332:	64 e0       	ldi	r22, 0x04	; 4
    1334:	86 e0       	ldi	r24, 0x06	; 6
    1336:	22 d8       	rcall	.-4028   	; 0x37c <sysclk_enable_module>
    1338:	79 c0       	rjmp	.+242    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    133a:	c0 3c       	cpi	r28, 0xC0	; 192
    133c:	e8 e0       	ldi	r30, 0x08	; 8
    133e:	de 07       	cpc	r29, r30
    1340:	21 f4       	brne	.+8      	; 0x134a <initializespi+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1342:	68 e0       	ldi	r22, 0x08	; 8
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	1a d8       	rcall	.-4044   	; 0x37c <sysclk_enable_module>
    1348:	71 c0       	rjmp	.+226    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    134a:	c0 3c       	cpi	r28, 0xC0	; 192
    134c:	f9 e0       	ldi	r31, 0x09	; 9
    134e:	df 07       	cpc	r29, r31
    1350:	21 f4       	brne	.+8      	; 0x135a <initializespi+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1352:	68 e0       	ldi	r22, 0x08	; 8
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	12 d8       	rcall	.-4060   	; 0x37c <sysclk_enable_module>
    1358:	69 c0       	rjmp	.+210    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    135a:	c0 3c       	cpi	r28, 0xC0	; 192
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	d8 07       	cpc	r29, r24
    1360:	21 f4       	brne	.+8      	; 0x136a <initializespi+0x180>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1362:	68 e0       	ldi	r22, 0x08	; 8
    1364:	85 e0       	ldi	r24, 0x05	; 5
    1366:	0a d8       	rcall	.-4076   	; 0x37c <sysclk_enable_module>
    1368:	61 c0       	rjmp	.+194    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    136a:	c0 3c       	cpi	r28, 0xC0	; 192
    136c:	eb e0       	ldi	r30, 0x0B	; 11
    136e:	de 07       	cpc	r29, r30
    1370:	21 f4       	brne	.+8      	; 0x137a <initializespi+0x190>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1372:	68 e0       	ldi	r22, 0x08	; 8
    1374:	86 e0       	ldi	r24, 0x06	; 6
    1376:	02 d8       	rcall	.-4092   	; 0x37c <sysclk_enable_module>
    1378:	59 c0       	rjmp	.+178    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    137a:	c0 3a       	cpi	r28, 0xA0	; 160
    137c:	f8 e0       	ldi	r31, 0x08	; 8
    137e:	df 07       	cpc	r29, r31
    1380:	29 f4       	brne	.+10     	; 0x138c <initializespi+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1382:	60 e1       	ldi	r22, 0x10	; 16
    1384:	83 e0       	ldi	r24, 0x03	; 3
    1386:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    138a:	50 c0       	rjmp	.+160    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    138c:	c0 3a       	cpi	r28, 0xA0	; 160
    138e:	89 e0       	ldi	r24, 0x09	; 9
    1390:	d8 07       	cpc	r29, r24
    1392:	29 f4       	brne	.+10     	; 0x139e <initializespi+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1394:	60 e1       	ldi	r22, 0x10	; 16
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    139c:	47 c0       	rjmp	.+142    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    139e:	c0 3a       	cpi	r28, 0xA0	; 160
    13a0:	ea e0       	ldi	r30, 0x0A	; 10
    13a2:	de 07       	cpc	r29, r30
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <initializespi+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    13a6:	60 e1       	ldi	r22, 0x10	; 16
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13ae:	3e c0       	rjmp	.+124    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    13b0:	c0 3a       	cpi	r28, 0xA0	; 160
    13b2:	fb e0       	ldi	r31, 0x0B	; 11
    13b4:	df 07       	cpc	r29, r31
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <initializespi+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    13b8:	60 e1       	ldi	r22, 0x10	; 16
    13ba:	86 e0       	ldi	r24, 0x06	; 6
    13bc:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13c0:	35 c0       	rjmp	.+106    	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    13c2:	c0 3b       	cpi	r28, 0xB0	; 176
    13c4:	88 e0       	ldi	r24, 0x08	; 8
    13c6:	d8 07       	cpc	r29, r24
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <initializespi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    13ca:	60 e2       	ldi	r22, 0x20	; 32
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13d2:	2c c0       	rjmp	.+88     	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    13d4:	c0 3b       	cpi	r28, 0xB0	; 176
    13d6:	e9 e0       	ldi	r30, 0x09	; 9
    13d8:	de 07       	cpc	r29, r30
    13da:	29 f4       	brne	.+10     	; 0x13e6 <initializespi+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    13dc:	60 e2       	ldi	r22, 0x20	; 32
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13e4:	23 c0       	rjmp	.+70     	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    13e6:	c0 3b       	cpi	r28, 0xB0	; 176
    13e8:	fa e0       	ldi	r31, 0x0A	; 10
    13ea:	df 07       	cpc	r29, r31
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <initializespi+0x20e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    13ee:	60 e2       	ldi	r22, 0x20	; 32
    13f0:	85 e0       	ldi	r24, 0x05	; 5
    13f2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    13f6:	1a c0       	rjmp	.+52     	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    13f8:	c0 3b       	cpi	r28, 0xB0	; 176
    13fa:	8b e0       	ldi	r24, 0x0B	; 11
    13fc:	d8 07       	cpc	r29, r24
    13fe:	29 f4       	brne	.+10     	; 0x140a <initializespi+0x220>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1400:	60 e2       	ldi	r22, 0x20	; 32
    1402:	86 e0       	ldi	r24, 0x06	; 6
    1404:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1408:	11 c0       	rjmp	.+34     	; 0x142c <initializespi+0x242>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    140a:	c0 38       	cpi	r28, 0x80	; 128
    140c:	e4 e0       	ldi	r30, 0x04	; 4
    140e:	de 07       	cpc	r29, r30
    1410:	29 f4       	brne	.+10     	; 0x141c <initializespi+0x232>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1412:	60 e4       	ldi	r22, 0x40	; 64
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    141a:	08 c0       	rjmp	.+16     	; 0x142c <initializespi+0x242>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    141c:	c0 3a       	cpi	r28, 0xA0	; 160
    141e:	f4 e0       	ldi	r31, 0x04	; 4
    1420:	df 07       	cpc	r29, r31
    1422:	21 f4       	brne	.+8      	; 0x142c <initializespi+0x242>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1424:	60 e4       	ldi	r22, 0x40	; 64
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
	*	Initialize pins
	*		MOSI direction to out (Master out, slave in) (pin 5)
	*		MISO direction to in (Master in, slave out) (pin 6)
	*		SCK direction to out? (clock) (pin 7)
	*/
	port->DIRSET |= 0b10110000;  //4 (default SS), 5 (MOSI) & 7 (SCK) to out
    142c:	f8 01       	movw	r30, r16
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	80 6b       	ori	r24, 0xB0	; 176
    1432:	81 83       	std	Z+1, r24	; 0x01
	port->DIRSET &= 0b10111111; //6 (MISO) in
    1434:	81 81       	ldd	r24, Z+1	; 0x01
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	81 83       	std	Z+1, r24	; 0x01
	port->OUT |= 0b10110000; //Setting 4 to high deselects it, in case it isn't the select we're using
    143a:	84 81       	ldd	r24, Z+4	; 0x04
    143c:	80 6b       	ori	r24, 0xB0	; 176
    143e:	84 83       	std	Z+4, r24	; 0x04
	port->IN &= 0b10111111;
    1440:	80 85       	ldd	r24, Z+8	; 0x08
    1442:	8f 7b       	andi	r24, 0xBF	; 191
    1444:	80 87       	std	Z+8, r24	; 0x08
	*	6 coefficients are stored in PROM, use them for converting data from D1 and D2 into accurate temperature and pressure
	*	Clock polarity and phase modes 0 and 3 are both acceptable
	*
	*/

	targetspi->CTRL = 0b11010000;
    1446:	80 ed       	ldi	r24, 0xD0	; 208
    1448:	88 83       	st	Y, r24
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	08 95       	ret

00001454 <board_init>:
#include <conf_board.h>
#include <board.h>
#include <ioport.h>

void board_init(void)
{
    1454:	08 95       	ret

00001456 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    145c:	0e 94 03 02 	call	0x406	; 0x406 <usart_getchar>
    1460:	88 83       	st	Y, r24
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1468:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <usart_putchar>
}
    146c:	08 95       	ret

0000146e <UART_computer_init>:

void UART_computer_init(USART_t* comms_usart, PORT_t* comms_port)
/* This sets up the UART pins that are used by the XBee (if plugged into a one month board), and by the computer during debugging
Call during startup.
Based on Adam's code template for one month, but with RX pin configuration. */
{
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	27 97       	sbiw	r28, 0x07	; 7
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	8c 01       	movw	r16, r24
    1486:	fb 01       	movw	r30, r22
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	//FIXME: should take explicit pins instead of assuming a USARTX0 (USARTX1 has different pins)
	comms_port->DIR |= 0b00001000; //TX pin out
    1488:	80 81       	ld	r24, Z
    148a:	88 60       	ori	r24, 0x08	; 8
    148c:	80 83       	st	Z, r24
	comms_port->DIR &= 0b11111011; //RX pin in
    148e:	80 81       	ld	r24, Z
    1490:	8b 7f       	andi	r24, 0xFB	; 251
    1492:	80 83       	st	Z, r24
	comms_port->OUT |= 0b00001000;
    1494:	84 81       	ldd	r24, Z+4	; 0x04
    1496:	88 60       	ori	r24, 0x08	; 8
    1498:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    149a:	01 15       	cp	r16, r1
    149c:	11 05       	cpc	r17, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <UART_computer_init+0x34>
    14a0:	d4 c1       	rjmp	.+936    	; 0x184a <UART_computer_init+0x3dc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    14a2:	00 3c       	cpi	r16, 0xC0	; 192
    14a4:	11 05       	cpc	r17, r1
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <UART_computer_init+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    14a8:	60 e1       	ldi	r22, 0x10	; 16
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14b0:	cc c1       	rjmp	.+920    	; 0x184a <UART_computer_init+0x3dc>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    14b2:	01 15       	cp	r16, r1
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	18 07       	cpc	r17, r24
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <UART_computer_init+0x56>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14c2:	c3 c1       	rjmp	.+902    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    14c4:	00 38       	cpi	r16, 0x80	; 128
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	18 07       	cpc	r17, r24
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <UART_computer_init+0x68>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    14cc:	62 e0       	ldi	r22, 0x02	; 2
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14d4:	ba c1       	rjmp	.+884    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    14d6:	01 15       	cp	r16, r1
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	18 07       	cpc	r17, r24
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <UART_computer_init+0x7a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14e6:	b1 c1       	rjmp	.+866    	; 0x184a <UART_computer_init+0x3dc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    14e8:	00 38       	cpi	r16, 0x80	; 128
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	18 07       	cpc	r17, r24
    14ee:	29 f4       	brne	.+10     	; 0x14fa <UART_computer_init+0x8c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    14f8:	a8 c1       	rjmp	.+848    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    14fa:	00 39       	cpi	r16, 0x90	; 144
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	18 07       	cpc	r17, r24
    1500:	29 f4       	brne	.+10     	; 0x150c <UART_computer_init+0x9e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    150a:	9f c1       	rjmp	.+830    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    150c:	01 15       	cp	r16, r1
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	18 07       	cpc	r17, r24
    1512:	29 f4       	brne	.+10     	; 0x151e <UART_computer_init+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    151c:	96 c1       	rjmp	.+812    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    151e:	00 34       	cpi	r16, 0x40	; 64
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	18 07       	cpc	r17, r24
    1524:	29 f4       	brne	.+10     	; 0x1530 <UART_computer_init+0xc2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1526:	62 e0       	ldi	r22, 0x02	; 2
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    152e:	8d c1       	rjmp	.+794    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1530:	00 32       	cpi	r16, 0x20	; 32
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	18 07       	cpc	r17, r24
    1536:	29 f4       	brne	.+10     	; 0x1542 <UART_computer_init+0xd4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1538:	64 e0       	ldi	r22, 0x04	; 4
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1540:	84 c1       	rjmp	.+776    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1542:	01 15       	cp	r16, r1
    1544:	88 e0       	ldi	r24, 0x08	; 8
    1546:	18 07       	cpc	r17, r24
    1548:	29 f4       	brne	.+10     	; 0x1554 <UART_computer_init+0xe6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1552:	7b c1       	rjmp	.+758    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1554:	01 15       	cp	r16, r1
    1556:	89 e0       	ldi	r24, 0x09	; 9
    1558:	18 07       	cpc	r17, r24
    155a:	29 f4       	brne	.+10     	; 0x1566 <UART_computer_init+0xf8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	84 e0       	ldi	r24, 0x04	; 4
    1560:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1564:	72 c1       	rjmp	.+740    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1566:	01 15       	cp	r16, r1
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	18 07       	cpc	r17, r24
    156c:	29 f4       	brne	.+10     	; 0x1578 <UART_computer_init+0x10a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	85 e0       	ldi	r24, 0x05	; 5
    1572:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1576:	69 c1       	rjmp	.+722    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1578:	01 15       	cp	r16, r1
    157a:	8b e0       	ldi	r24, 0x0B	; 11
    157c:	18 07       	cpc	r17, r24
    157e:	29 f4       	brne	.+10     	; 0x158a <UART_computer_init+0x11c>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1588:	60 c1       	rjmp	.+704    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    158a:	00 34       	cpi	r16, 0x40	; 64
    158c:	88 e0       	ldi	r24, 0x08	; 8
    158e:	18 07       	cpc	r17, r24
    1590:	29 f4       	brne	.+10     	; 0x159c <UART_computer_init+0x12e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    159a:	57 c1       	rjmp	.+686    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    159c:	00 34       	cpi	r16, 0x40	; 64
    159e:	89 e0       	ldi	r24, 0x09	; 9
    15a0:	18 07       	cpc	r17, r24
    15a2:	29 f4       	brne	.+10     	; 0x15ae <UART_computer_init+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15ac:	4e c1       	rjmp	.+668    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    15ae:	00 34       	cpi	r16, 0x40	; 64
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	18 07       	cpc	r17, r24
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <UART_computer_init+0x152>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	85 e0       	ldi	r24, 0x05	; 5
    15ba:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15be:	45 c1       	rjmp	.+650    	; 0x184a <UART_computer_init+0x3dc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    15c0:	00 39       	cpi	r16, 0x90	; 144
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	18 07       	cpc	r17, r24
    15c6:	29 f4       	brne	.+10     	; 0x15d2 <UART_computer_init+0x164>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    15c8:	64 e0       	ldi	r22, 0x04	; 4
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15d0:	3c c1       	rjmp	.+632    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    15d2:	00 39       	cpi	r16, 0x90	; 144
    15d4:	89 e0       	ldi	r24, 0x09	; 9
    15d6:	18 07       	cpc	r17, r24
    15d8:	29 f4       	brne	.+10     	; 0x15e4 <UART_computer_init+0x176>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    15da:	64 e0       	ldi	r22, 0x04	; 4
    15dc:	84 e0       	ldi	r24, 0x04	; 4
    15de:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15e2:	33 c1       	rjmp	.+614    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    15e4:	00 39       	cpi	r16, 0x90	; 144
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	18 07       	cpc	r17, r24
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <UART_computer_init+0x188>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    15ec:	64 e0       	ldi	r22, 0x04	; 4
    15ee:	85 e0       	ldi	r24, 0x05	; 5
    15f0:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    15f4:	2a c1       	rjmp	.+596    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    15f6:	00 39       	cpi	r16, 0x90	; 144
    15f8:	8b e0       	ldi	r24, 0x0B	; 11
    15fa:	18 07       	cpc	r17, r24
    15fc:	29 f4       	brne	.+10     	; 0x1608 <UART_computer_init+0x19a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    15fe:	64 e0       	ldi	r22, 0x04	; 4
    1600:	86 e0       	ldi	r24, 0x06	; 6
    1602:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1606:	21 c1       	rjmp	.+578    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1608:	00 3c       	cpi	r16, 0xC0	; 192
    160a:	88 e0       	ldi	r24, 0x08	; 8
    160c:	18 07       	cpc	r17, r24
    160e:	29 f4       	brne	.+10     	; 0x161a <UART_computer_init+0x1ac>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1610:	68 e0       	ldi	r22, 0x08	; 8
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1618:	18 c1       	rjmp	.+560    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    161a:	00 3c       	cpi	r16, 0xC0	; 192
    161c:	89 e0       	ldi	r24, 0x09	; 9
    161e:	18 07       	cpc	r17, r24
    1620:	29 f4       	brne	.+10     	; 0x162c <UART_computer_init+0x1be>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1622:	68 e0       	ldi	r22, 0x08	; 8
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    162a:	0f c1       	rjmp	.+542    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    162c:	00 3c       	cpi	r16, 0xC0	; 192
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	18 07       	cpc	r17, r24
    1632:	29 f4       	brne	.+10     	; 0x163e <UART_computer_init+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1634:	68 e0       	ldi	r22, 0x08	; 8
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    163c:	06 c1       	rjmp	.+524    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    163e:	00 3c       	cpi	r16, 0xC0	; 192
    1640:	8b e0       	ldi	r24, 0x0B	; 11
    1642:	18 07       	cpc	r17, r24
    1644:	29 f4       	brne	.+10     	; 0x1650 <UART_computer_init+0x1e2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1646:	68 e0       	ldi	r22, 0x08	; 8
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    164e:	fd c0       	rjmp	.+506    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1650:	00 3a       	cpi	r16, 0xA0	; 160
    1652:	88 e0       	ldi	r24, 0x08	; 8
    1654:	18 07       	cpc	r17, r24
    1656:	39 f5       	brne	.+78     	; 0x16a6 <UART_computer_init+0x238>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1658:	60 e1       	ldi	r22, 0x10	; 16
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1660:	80 ea       	ldi	r24, 0xA0	; 160
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <stdio_base>
    1668:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    166c:	84 e3       	ldi	r24, 0x34	; 52
    166e:	9a e0       	ldi	r25, 0x0A	; 10
    1670:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    1674:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1678:	8b e2       	ldi	r24, 0x2B	; 43
    167a:	9a e0       	ldi	r25, 0x0A	; 10
    167c:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    1680:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1684:	e6 e0       	ldi	r30, 0x06	; 6
    1686:	f0 e2       	ldi	r31, 0x20	; 32
    1688:	84 81       	ldd	r24, Z+4	; 0x04
    168a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    168c:	85 81       	ldd	r24, Z+5	; 0x05
    168e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1690:	86 81       	ldd	r24, Z+6	; 0x06
    1692:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	a2 81       	ldd	r26, Z+2	; 0x02
    169a:	b3 81       	ldd	r27, Z+3	; 0x03
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	ab 83       	std	Y+3, r26	; 0x03
    16a2:	bc 83       	std	Y+4, r27	; 0x04
    16a4:	76 c0       	rjmp	.+236    	; 0x1792 <UART_computer_init+0x324>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16a6:	00 3a       	cpi	r16, 0xA0	; 160
    16a8:	89 e0       	ldi	r24, 0x09	; 9
    16aa:	18 07       	cpc	r17, r24
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <UART_computer_init+0x24a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    16ae:	60 e1       	ldi	r22, 0x10	; 16
    16b0:	84 e0       	ldi	r24, 0x04	; 4
    16b2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16b6:	c9 c0       	rjmp	.+402    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    16b8:	00 3a       	cpi	r16, 0xA0	; 160
    16ba:	8a e0       	ldi	r24, 0x0A	; 10
    16bc:	18 07       	cpc	r17, r24
    16be:	29 f4       	brne	.+10     	; 0x16ca <UART_computer_init+0x25c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    16c0:	60 e1       	ldi	r22, 0x10	; 16
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16c8:	c0 c0       	rjmp	.+384    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    16ca:	00 3a       	cpi	r16, 0xA0	; 160
    16cc:	8b e0       	ldi	r24, 0x0B	; 11
    16ce:	18 07       	cpc	r17, r24
    16d0:	29 f4       	brne	.+10     	; 0x16dc <UART_computer_init+0x26e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    16d2:	60 e1       	ldi	r22, 0x10	; 16
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16da:	b7 c0       	rjmp	.+366    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    16dc:	00 3b       	cpi	r16, 0xB0	; 176
    16de:	88 e0       	ldi	r24, 0x08	; 8
    16e0:	18 07       	cpc	r17, r24
    16e2:	29 f4       	brne	.+10     	; 0x16ee <UART_computer_init+0x280>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    16e4:	60 e2       	ldi	r22, 0x20	; 32
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16ec:	ae c0       	rjmp	.+348    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    16ee:	00 3b       	cpi	r16, 0xB0	; 176
    16f0:	89 e0       	ldi	r24, 0x09	; 9
    16f2:	18 07       	cpc	r17, r24
    16f4:	29 f4       	brne	.+10     	; 0x1700 <UART_computer_init+0x292>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    16f6:	60 e2       	ldi	r22, 0x20	; 32
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    16fe:	a5 c0       	rjmp	.+330    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1700:	00 3b       	cpi	r16, 0xB0	; 176
    1702:	8a e0       	ldi	r24, 0x0A	; 10
    1704:	18 07       	cpc	r17, r24
    1706:	29 f4       	brne	.+10     	; 0x1712 <UART_computer_init+0x2a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1708:	60 e2       	ldi	r22, 0x20	; 32
    170a:	85 e0       	ldi	r24, 0x05	; 5
    170c:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1710:	9c c0       	rjmp	.+312    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1712:	00 3b       	cpi	r16, 0xB0	; 176
    1714:	8b e0       	ldi	r24, 0x0B	; 11
    1716:	18 07       	cpc	r17, r24
    1718:	29 f4       	brne	.+10     	; 0x1724 <UART_computer_init+0x2b6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    171a:	60 e2       	ldi	r22, 0x20	; 32
    171c:	86 e0       	ldi	r24, 0x06	; 6
    171e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1722:	93 c0       	rjmp	.+294    	; 0x184a <UART_computer_init+0x3dc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1724:	00 38       	cpi	r16, 0x80	; 128
    1726:	84 e0       	ldi	r24, 0x04	; 4
    1728:	18 07       	cpc	r17, r24
    172a:	29 f4       	brne	.+10     	; 0x1736 <UART_computer_init+0x2c8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    172c:	60 e4       	ldi	r22, 0x40	; 64
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1734:	8a c0       	rjmp	.+276    	; 0x184a <UART_computer_init+0x3dc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1736:	00 3a       	cpi	r16, 0xA0	; 160
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	18 07       	cpc	r17, r24
    173c:	29 f4       	brne	.+10     	; 0x1748 <UART_computer_init+0x2da>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    173e:	60 e4       	ldi	r22, 0x40	; 64
    1740:	85 e0       	ldi	r24, 0x05	; 5
    1742:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    1746:	81 c0       	rjmp	.+258    	; 0x184a <UART_computer_init+0x3dc>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1748:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <stdio_base>
    174c:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1750:	84 e3       	ldi	r24, 0x34	; 52
    1752:	9a e0       	ldi	r25, 0x0A	; 10
    1754:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    1758:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    175c:	8b e2       	ldi	r24, 0x2B	; 43
    175e:	9a e0       	ldi	r25, 0x0A	; 10
    1760:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    1764:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1768:	e6 e0       	ldi	r30, 0x06	; 6
    176a:	f0 e2       	ldi	r31, 0x20	; 32
    176c:	84 81       	ldd	r24, Z+4	; 0x04
    176e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1770:	85 81       	ldd	r24, Z+5	; 0x05
    1772:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1774:	86 81       	ldd	r24, Z+6	; 0x06
    1776:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	a2 81       	ldd	r26, Z+2	; 0x02
    177e:	b3 81       	ldd	r27, Z+3	; 0x03
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	ab 83       	std	Y+3, r26	; 0x03
    1786:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1788:	78 01       	movw	r14, r16
    178a:	00 3a       	cpi	r16, 0xA0	; 160
    178c:	88 e0       	ldi	r24, 0x08	; 8
    178e:	18 07       	cpc	r17, r24
    1790:	59 f4       	brne	.+22     	; 0x17a8 <UART_computer_init+0x33a>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1792:	60 e1       	ldi	r22, 0x10	; 16
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    179a:	0f 2e       	mov	r0, r31
    179c:	f0 ea       	ldi	r31, 0xA0	; 160
    179e:	ef 2e       	mov	r14, r31
    17a0:	f8 e0       	ldi	r31, 0x08	; 8
    17a2:	ff 2e       	mov	r15, r31
    17a4:	f0 2d       	mov	r31, r0
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <UART_computer_init+0x362>
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    17a8:	80 eb       	ldi	r24, 0xB0	; 176
    17aa:	e8 16       	cp	r14, r24
    17ac:	88 e0       	ldi	r24, 0x08	; 8
    17ae:	f8 06       	cpc	r15, r24
    17b0:	29 f4       	brne	.+10     	; 0x17bc <UART_computer_init+0x34e>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    17b2:	60 e2       	ldi	r22, 0x20	; 32
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <UART_computer_init+0x376>
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    17bc:	80 ea       	ldi	r24, 0xA0	; 160
    17be:	e8 16       	cp	r14, r24
    17c0:	89 e0       	ldi	r24, 0x09	; 9
    17c2:	f8 06       	cpc	r15, r24
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <UART_computer_init+0x362>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    17c6:	60 e1       	ldi	r22, 0x10	; 16
    17c8:	84 e0       	ldi	r24, 0x04	; 4
    17ca:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <UART_computer_init+0x38a>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    17d0:	80 eb       	ldi	r24, 0xB0	; 176
    17d2:	e8 16       	cp	r14, r24
    17d4:	89 e0       	ldi	r24, 0x09	; 9
    17d6:	f8 06       	cpc	r15, r24
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <UART_computer_init+0x376>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    17da:	60 e2       	ldi	r22, 0x20	; 32
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <UART_computer_init+0x39e>
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    17e4:	80 ea       	ldi	r24, 0xA0	; 160
    17e6:	e8 16       	cp	r14, r24
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	f8 06       	cpc	r15, r24
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <UART_computer_init+0x38a>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    17ee:	60 e1       	ldi	r22, 0x10	; 16
    17f0:	85 e0       	ldi	r24, 0x05	; 5
    17f2:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <UART_computer_init+0x3b2>
	}
#endif
#ifdef USARTE1
	if((uint16_t)usart == (uint16_t)&USARTE1) {
    17f8:	80 eb       	ldi	r24, 0xB0	; 176
    17fa:	e8 16       	cp	r14, r24
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	f8 06       	cpc	r15, r24
    1800:	29 f4       	brne	.+10     	; 0x180c <UART_computer_init+0x39e>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
    1802:	60 e2       	ldi	r22, 0x20	; 32
    1804:	85 e0       	ldi	r24, 0x05	; 5
    1806:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    180a:	13 c0       	rjmp	.+38     	; 0x1832 <UART_computer_init+0x3c4>
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    180c:	80 ea       	ldi	r24, 0xA0	; 160
    180e:	e8 16       	cp	r14, r24
    1810:	8b e0       	ldi	r24, 0x0B	; 11
    1812:	f8 06       	cpc	r15, r24
    1814:	29 f4       	brne	.+10     	; 0x1820 <UART_computer_init+0x3b2>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    1816:	60 e1       	ldi	r22, 0x10	; 16
    1818:	86 e0       	ldi	r24, 0x06	; 6
    181a:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <UART_computer_init+0x3c4>
	}
#endif
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
    1820:	80 eb       	ldi	r24, 0xB0	; 176
    1822:	e8 16       	cp	r14, r24
    1824:	8b e0       	ldi	r24, 0x0B	; 11
    1826:	f8 06       	cpc	r15, r24
    1828:	21 f4       	brne	.+8      	; 0x1832 <UART_computer_init+0x3c4>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
    182a:	60 e2       	ldi	r22, 0x20	; 32
    182c:	86 e0       	ldi	r24, 0x06	; 6
    182e:	0e 94 be 01 	call	0x37c	; 0x37c <sysclk_enable_module>
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1832:	be 01       	movw	r22, r28
    1834:	6f 5f       	subi	r22, 0xFF	; 255
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	c8 01       	movw	r24, r16
    183a:	0e 94 22 03 	call	0x644	; 0x644 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    183e:	6a ec       	ldi	r22, 0xCA	; 202
    1840:	71 e0       	ldi	r23, 0x01	; 1
    1842:	83 ee       	ldi	r24, 0xE3	; 227
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	85 d6       	rcall	.+3338   	; 0x2552 <fdevopen>
    1848:	22 c0       	rjmp	.+68     	; 0x188e <UART_computer_init+0x420>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    184a:	00 93 36 20 	sts	0x2036, r16	; 0x802036 <stdio_base>
    184e:	10 93 37 20 	sts	0x2037, r17	; 0x802037 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1852:	84 e3       	ldi	r24, 0x34	; 52
    1854:	9a e0       	ldi	r25, 0x0A	; 10
    1856:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <ptr_put>
    185a:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    185e:	8b e2       	ldi	r24, 0x2B	; 43
    1860:	9a e0       	ldi	r25, 0x0A	; 10
    1862:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <__data_end>
    1866:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    186a:	e6 e0       	ldi	r30, 0x06	; 6
    186c:	f0 e2       	ldi	r31, 0x20	; 32
    186e:	84 81       	ldd	r24, Z+4	; 0x04
    1870:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1872:	85 81       	ldd	r24, Z+5	; 0x05
    1874:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1876:	86 81       	ldd	r24, Z+6	; 0x06
    1878:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	a2 81       	ldd	r26, Z+2	; 0x02
    1880:	b3 81       	ldd	r27, Z+3	; 0x03
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	ab 83       	std	Y+3, r26	; 0x03
    1888:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    188a:	78 01       	movw	r14, r16
    188c:	8d cf       	rjmp	.-230    	; 0x17a8 <UART_computer_init+0x33a>
	sysclk_enable_peripheral_clock(comms_usart); 
	stdio_serial_init(comms_usart, &options);
    188e:	27 96       	adiw	r28, 0x07	; 7
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <main>:
#define COMMS_USART				USARTC0


//Example usage of MS5611/07 driver for One Monthers
int main (void)
{
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	69 97       	sbiw	r28, 0x19	; 25
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	de bf       	out	0x3e, r29	; 62
	board_init();
    18b0:	d1 dd       	rcall	.-1118   	; 0x1454 <board_init>
	sysclk_init();
    18b2:	0e 94 97 01 	call	0x32e	; 0x32e <sysclk_init>
	UART_computer_init(&COMMS_USART, &PORTC);
    18b6:	60 e4       	ldi	r22, 0x40	; 64
    18b8:	76 e0       	ldi	r23, 0x06	; 6
    18ba:	80 ea       	ldi	r24, 0xA0	; 160
    18bc:	98 e0       	ldi	r25, 0x08	; 8
    18be:	d7 dd       	rcall	.-1106   	; 0x146e <UART_computer_init>
	
	MS56XX_t pressure_sensor = define_new_MS56XX(MS5607, &SPIC, IOPORT_CREATE_PIN(PORTC, 4));
    18c0:	24 e1       	ldi	r18, 0x14	; 20
    18c2:	40 ec       	ldi	r20, 0xC0	; 192
    18c4:	58 e0       	ldi	r21, 0x08	; 8
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	28 d8       	rcall	.-4016   	; 0x91e <define_new_MS56XX>
	
	initializespi(&SPIC, &PORTC);
    18ce:	60 e4       	ldi	r22, 0x40	; 64
    18d0:	76 e0       	ldi	r23, 0x06	; 6
    18d2:	80 ec       	ldi	r24, 0xC0	; 192
    18d4:	98 e0       	ldi	r25, 0x08	; 8
    18d6:	89 dc       	rcall	.-1774   	; 0x11ea <initializespi>
	enable_select_pin(pressure_sensor.select_pin);
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	72 dc       	rcall	.-1820   	; 0x11c0 <enable_select_pin>
	
	//Pressure sensor initialization routine, also reads calibration data from sensor
	calibratePressureSensor(&pressure_sensor);
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	41 d8       	rcall	.-3966   	; 0x964 <calibratePressureSensor>
	
	readMS56XX(&pressure_sensor);
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	93 d8       	rcall	.-3802   	; 0xa0e <readMS56XX>
	printf("Pressure is %" PRIi32 ", temperature is %" PRIi32 "\n", pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    18e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ea:	8f 93       	push	r24
    18ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ee:	8f 93       	push	r24
    18f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f2:	8f 93       	push	r24
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	8f 93       	push	r24
    18f8:	88 85       	ldd	r24, Y+8	; 0x08
    18fa:	8f 93       	push	r24
    18fc:	8f 81       	ldd	r24, Y+7	; 0x07
    18fe:	8f 93       	push	r24
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	8f 93       	push	r24
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	8f 93       	push	r24
    1908:	8d e0       	ldi	r24, 0x0D	; 13
    190a:	90 e2       	ldi	r25, 0x20	; 32
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	a2 d6       	rcall	.+3396   	; 0x2656 <printf>
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	de bf       	out	0x3e, r29	; 62
	
	while (1)
	{
			
	}	
    1916:	ff cf       	rjmp	.-2      	; 0x1916 <main+0x74>

00001918 <vfprintf>:
    1918:	2f 92       	push	r2
    191a:	3f 92       	push	r3
    191c:	4f 92       	push	r4
    191e:	5f 92       	push	r5
    1920:	6f 92       	push	r6
    1922:	7f 92       	push	r7
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	63 97       	sbiw	r28, 0x13	; 19
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	6c 01       	movw	r12, r24
    1948:	4b 01       	movw	r8, r22
    194a:	2a 01       	movw	r4, r20
    194c:	fc 01       	movw	r30, r24
    194e:	16 82       	std	Z+6, r1	; 0x06
    1950:	17 82       	std	Z+7, r1	; 0x07
    1952:	83 81       	ldd	r24, Z+3	; 0x03
    1954:	81 ff       	sbrs	r24, 1
    1956:	29 c3       	rjmp	.+1618   	; 0x1faa <vfprintf+0x692>
    1958:	ae 01       	movw	r20, r28
    195a:	4f 5f       	subi	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	3a 01       	movw	r6, r20
    1960:	f6 01       	movw	r30, r12
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	f4 01       	movw	r30, r8
    1966:	93 fd       	sbrc	r25, 3
    1968:	85 91       	lpm	r24, Z+
    196a:	93 ff       	sbrs	r25, 3
    196c:	81 91       	ld	r24, Z+
    196e:	4f 01       	movw	r8, r30
    1970:	88 23       	and	r24, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <vfprintf+0x5e>
    1974:	16 c3       	rjmp	.+1580   	; 0x1fa2 <vfprintf+0x68a>
    1976:	85 32       	cpi	r24, 0x25	; 37
    1978:	39 f4       	brne	.+14     	; 0x1988 <vfprintf+0x70>
    197a:	93 fd       	sbrc	r25, 3
    197c:	85 91       	lpm	r24, Z+
    197e:	93 ff       	sbrs	r25, 3
    1980:	81 91       	ld	r24, Z+
    1982:	4f 01       	movw	r8, r30
    1984:	85 32       	cpi	r24, 0x25	; 37
    1986:	31 f4       	brne	.+12     	; 0x1994 <vfprintf+0x7c>
    1988:	b6 01       	movw	r22, r12
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	2c d6       	rcall	.+3160   	; 0x25e6 <fputc>
    198e:	52 01       	movw	r10, r4
    1990:	25 01       	movw	r4, r10
    1992:	e6 cf       	rjmp	.-52     	; 0x1960 <vfprintf+0x48>
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	f1 2c       	mov	r15, r1
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	20 32       	cpi	r18, 0x20	; 32
    199c:	a0 f4       	brcc	.+40     	; 0x19c6 <vfprintf+0xae>
    199e:	8b 32       	cpi	r24, 0x2B	; 43
    19a0:	69 f0       	breq	.+26     	; 0x19bc <vfprintf+0xa4>
    19a2:	30 f4       	brcc	.+12     	; 0x19b0 <vfprintf+0x98>
    19a4:	80 32       	cpi	r24, 0x20	; 32
    19a6:	59 f0       	breq	.+22     	; 0x19be <vfprintf+0xa6>
    19a8:	83 32       	cpi	r24, 0x23	; 35
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <vfprintf+0xae>
    19ac:	20 61       	ori	r18, 0x10	; 16
    19ae:	2c c0       	rjmp	.+88     	; 0x1a08 <vfprintf+0xf0>
    19b0:	8d 32       	cpi	r24, 0x2D	; 45
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <vfprintf+0xaa>
    19b4:	80 33       	cpi	r24, 0x30	; 48
    19b6:	39 f4       	brne	.+14     	; 0x19c6 <vfprintf+0xae>
    19b8:	21 60       	ori	r18, 0x01	; 1
    19ba:	26 c0       	rjmp	.+76     	; 0x1a08 <vfprintf+0xf0>
    19bc:	22 60       	ori	r18, 0x02	; 2
    19be:	24 60       	ori	r18, 0x04	; 4
    19c0:	23 c0       	rjmp	.+70     	; 0x1a08 <vfprintf+0xf0>
    19c2:	28 60       	ori	r18, 0x08	; 8
    19c4:	21 c0       	rjmp	.+66     	; 0x1a08 <vfprintf+0xf0>
    19c6:	27 fd       	sbrc	r18, 7
    19c8:	27 c0       	rjmp	.+78     	; 0x1a18 <vfprintf+0x100>
    19ca:	30 ed       	ldi	r19, 0xD0	; 208
    19cc:	38 0f       	add	r19, r24
    19ce:	3a 30       	cpi	r19, 0x0A	; 10
    19d0:	78 f4       	brcc	.+30     	; 0x19f0 <vfprintf+0xd8>
    19d2:	26 ff       	sbrs	r18, 6
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <vfprintf+0xca>
    19d6:	fa e0       	ldi	r31, 0x0A	; 10
    19d8:	1f 9f       	mul	r17, r31
    19da:	30 0d       	add	r19, r0
    19dc:	11 24       	eor	r1, r1
    19de:	13 2f       	mov	r17, r19
    19e0:	13 c0       	rjmp	.+38     	; 0x1a08 <vfprintf+0xf0>
    19e2:	4a e0       	ldi	r20, 0x0A	; 10
    19e4:	f4 9e       	mul	r15, r20
    19e6:	30 0d       	add	r19, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	f3 2e       	mov	r15, r19
    19ec:	20 62       	ori	r18, 0x20	; 32
    19ee:	0c c0       	rjmp	.+24     	; 0x1a08 <vfprintf+0xf0>
    19f0:	8e 32       	cpi	r24, 0x2E	; 46
    19f2:	21 f4       	brne	.+8      	; 0x19fc <vfprintf+0xe4>
    19f4:	26 fd       	sbrc	r18, 6
    19f6:	d5 c2       	rjmp	.+1450   	; 0x1fa2 <vfprintf+0x68a>
    19f8:	20 64       	ori	r18, 0x40	; 64
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <vfprintf+0xf0>
    19fc:	8c 36       	cpi	r24, 0x6C	; 108
    19fe:	11 f4       	brne	.+4      	; 0x1a04 <vfprintf+0xec>
    1a00:	20 68       	ori	r18, 0x80	; 128
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <vfprintf+0xf0>
    1a04:	88 36       	cpi	r24, 0x68	; 104
    1a06:	41 f4       	brne	.+16     	; 0x1a18 <vfprintf+0x100>
    1a08:	f4 01       	movw	r30, r8
    1a0a:	93 fd       	sbrc	r25, 3
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	93 ff       	sbrs	r25, 3
    1a10:	81 91       	ld	r24, Z+
    1a12:	4f 01       	movw	r8, r30
    1a14:	81 11       	cpse	r24, r1
    1a16:	c1 cf       	rjmp	.-126    	; 0x199a <vfprintf+0x82>
    1a18:	9b eb       	ldi	r25, 0xBB	; 187
    1a1a:	98 0f       	add	r25, r24
    1a1c:	93 30       	cpi	r25, 0x03	; 3
    1a1e:	18 f4       	brcc	.+6      	; 0x1a26 <vfprintf+0x10e>
    1a20:	20 61       	ori	r18, 0x10	; 16
    1a22:	80 5e       	subi	r24, 0xE0	; 224
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfprintf+0x11a>
    1a26:	9b e9       	ldi	r25, 0x9B	; 155
    1a28:	98 0f       	add	r25, r24
    1a2a:	93 30       	cpi	r25, 0x03	; 3
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <vfprintf+0x118>
    1a2e:	64 c1       	rjmp	.+712    	; 0x1cf8 <vfprintf+0x3e0>
    1a30:	2f 7e       	andi	r18, 0xEF	; 239
    1a32:	26 ff       	sbrs	r18, 6
    1a34:	16 e0       	ldi	r17, 0x06	; 6
    1a36:	2f 73       	andi	r18, 0x3F	; 63
    1a38:	32 2e       	mov	r3, r18
    1a3a:	85 36       	cpi	r24, 0x65	; 101
    1a3c:	19 f4       	brne	.+6      	; 0x1a44 <vfprintf+0x12c>
    1a3e:	20 64       	ori	r18, 0x40	; 64
    1a40:	32 2e       	mov	r3, r18
    1a42:	08 c0       	rjmp	.+16     	; 0x1a54 <vfprintf+0x13c>
    1a44:	86 36       	cpi	r24, 0x66	; 102
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <vfprintf+0x138>
    1a48:	f2 2f       	mov	r31, r18
    1a4a:	f0 68       	ori	r31, 0x80	; 128
    1a4c:	3f 2e       	mov	r3, r31
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <vfprintf+0x13c>
    1a50:	11 11       	cpse	r17, r1
    1a52:	11 50       	subi	r17, 0x01	; 1
    1a54:	37 fe       	sbrs	r3, 7
    1a56:	07 c0       	rjmp	.+14     	; 0x1a66 <vfprintf+0x14e>
    1a58:	1c 33       	cpi	r17, 0x3C	; 60
    1a5a:	50 f4       	brcc	.+20     	; 0x1a70 <vfprintf+0x158>
    1a5c:	ee 24       	eor	r14, r14
    1a5e:	e3 94       	inc	r14
    1a60:	e1 0e       	add	r14, r17
    1a62:	27 e0       	ldi	r18, 0x07	; 7
    1a64:	0b c0       	rjmp	.+22     	; 0x1a7c <vfprintf+0x164>
    1a66:	18 30       	cpi	r17, 0x08	; 8
    1a68:	38 f0       	brcs	.+14     	; 0x1a78 <vfprintf+0x160>
    1a6a:	27 e0       	ldi	r18, 0x07	; 7
    1a6c:	17 e0       	ldi	r17, 0x07	; 7
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <vfprintf+0x162>
    1a70:	27 e0       	ldi	r18, 0x07	; 7
    1a72:	4c e3       	ldi	r20, 0x3C	; 60
    1a74:	e4 2e       	mov	r14, r20
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x164>
    1a78:	21 2f       	mov	r18, r17
    1a7a:	e1 2c       	mov	r14, r1
    1a7c:	52 01       	movw	r10, r4
    1a7e:	44 e0       	ldi	r20, 0x04	; 4
    1a80:	a4 0e       	add	r10, r20
    1a82:	b1 1c       	adc	r11, r1
    1a84:	f2 01       	movw	r30, r4
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 2d       	mov	r16, r14
    1a90:	a3 01       	movw	r20, r6
    1a92:	71 d4       	rcall	.+2274   	; 0x2376 <__ftoa_engine>
    1a94:	2c 01       	movw	r4, r24
    1a96:	09 81       	ldd	r16, Y+1	; 0x01
    1a98:	00 ff       	sbrs	r16, 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x188>
    1a9c:	03 ff       	sbrs	r16, 3
    1a9e:	07 c0       	rjmp	.+14     	; 0x1aae <vfprintf+0x196>
    1aa0:	31 fc       	sbrc	r3, 1
    1aa2:	08 c0       	rjmp	.+16     	; 0x1ab4 <vfprintf+0x19c>
    1aa4:	32 fe       	sbrs	r3, 2
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <vfprintf+0x1a2>
    1aa8:	30 e2       	ldi	r19, 0x20	; 32
    1aaa:	23 2e       	mov	r2, r19
    1aac:	07 c0       	rjmp	.+14     	; 0x1abc <vfprintf+0x1a4>
    1aae:	2d e2       	ldi	r18, 0x2D	; 45
    1ab0:	22 2e       	mov	r2, r18
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <vfprintf+0x1a4>
    1ab4:	9b e2       	ldi	r25, 0x2B	; 43
    1ab6:	29 2e       	mov	r2, r25
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <vfprintf+0x1a4>
    1aba:	21 2c       	mov	r2, r1
    1abc:	80 2f       	mov	r24, r16
    1abe:	8c 70       	andi	r24, 0x0C	; 12
    1ac0:	19 f0       	breq	.+6      	; 0x1ac8 <vfprintf+0x1b0>
    1ac2:	21 10       	cpse	r2, r1
    1ac4:	51 c2       	rjmp	.+1186   	; 0x1f68 <vfprintf+0x650>
    1ac6:	8d c2       	rjmp	.+1306   	; 0x1fe2 <vfprintf+0x6ca>
    1ac8:	37 fe       	sbrs	r3, 7
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <vfprintf+0x1d2>
    1acc:	e4 0c       	add	r14, r4
    1ace:	04 ff       	sbrs	r16, 4
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <vfprintf+0x1c2>
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	81 33       	cpi	r24, 0x31	; 49
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <vfprintf+0x1c2>
    1ad8:	ea 94       	dec	r14
    1ada:	1e 14       	cp	r1, r14
    1adc:	74 f5       	brge	.+92     	; 0x1b3a <vfprintf+0x222>
    1ade:	f8 e0       	ldi	r31, 0x08	; 8
    1ae0:	fe 15       	cp	r31, r14
    1ae2:	78 f5       	brcc	.+94     	; 0x1b42 <vfprintf+0x22a>
    1ae4:	88 e0       	ldi	r24, 0x08	; 8
    1ae6:	e8 2e       	mov	r14, r24
    1ae8:	2c c0       	rjmp	.+88     	; 0x1b42 <vfprintf+0x22a>
    1aea:	36 fc       	sbrc	r3, 6
    1aec:	2a c0       	rjmp	.+84     	; 0x1b42 <vfprintf+0x22a>
    1aee:	81 2f       	mov	r24, r17
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	84 15       	cp	r24, r4
    1af4:	95 05       	cpc	r25, r5
    1af6:	9c f0       	brlt	.+38     	; 0x1b1e <vfprintf+0x206>
    1af8:	2c ef       	ldi	r18, 0xFC	; 252
    1afa:	42 16       	cp	r4, r18
    1afc:	2f ef       	ldi	r18, 0xFF	; 255
    1afe:	52 06       	cpc	r5, r18
    1b00:	74 f0       	brlt	.+28     	; 0x1b1e <vfprintf+0x206>
    1b02:	43 2d       	mov	r20, r3
    1b04:	40 68       	ori	r20, 0x80	; 128
    1b06:	34 2e       	mov	r3, r20
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <vfprintf+0x206>
    1b0a:	e2 e0       	ldi	r30, 0x02	; 2
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	ec 0f       	add	r30, r28
    1b10:	fd 1f       	adc	r31, r29
    1b12:	e1 0f       	add	r30, r17
    1b14:	f1 1d       	adc	r31, r1
    1b16:	80 81       	ld	r24, Z
    1b18:	80 33       	cpi	r24, 0x30	; 48
    1b1a:	19 f4       	brne	.+6      	; 0x1b22 <vfprintf+0x20a>
    1b1c:	11 50       	subi	r17, 0x01	; 1
    1b1e:	11 11       	cpse	r17, r1
    1b20:	f4 cf       	rjmp	.-24     	; 0x1b0a <vfprintf+0x1f2>
    1b22:	37 fe       	sbrs	r3, 7
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <vfprintf+0x22a>
    1b26:	ee 24       	eor	r14, r14
    1b28:	e3 94       	inc	r14
    1b2a:	e1 0e       	add	r14, r17
    1b2c:	81 2f       	mov	r24, r17
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	48 16       	cp	r4, r24
    1b32:	59 06       	cpc	r5, r25
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <vfprintf+0x228>
    1b36:	14 19       	sub	r17, r4
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <vfprintf+0x22a>
    1b3a:	ee 24       	eor	r14, r14
    1b3c:	e3 94       	inc	r14
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <vfprintf+0x22a>
    1b40:	10 e0       	ldi	r17, 0x00	; 0
    1b42:	37 fe       	sbrs	r3, 7
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <vfprintf+0x23a>
    1b46:	14 14       	cp	r1, r4
    1b48:	15 04       	cpc	r1, r5
    1b4a:	34 f4       	brge	.+12     	; 0x1b58 <vfprintf+0x240>
    1b4c:	c2 01       	movw	r24, r4
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x244>
    1b52:	85 e0       	ldi	r24, 0x05	; 5
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x244>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	21 10       	cpse	r2, r1
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	11 23       	and	r17, r17
    1b62:	31 f0       	breq	.+12     	; 0x1b70 <vfprintf+0x258>
    1b64:	21 2f       	mov	r18, r17
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	2f 5f       	subi	r18, 0xFF	; 255
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	2f 2d       	mov	r18, r15
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	82 17       	cp	r24, r18
    1b76:	93 07       	cpc	r25, r19
    1b78:	14 f4       	brge	.+4      	; 0x1b7e <vfprintf+0x266>
    1b7a:	f8 1a       	sub	r15, r24
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <vfprintf+0x268>
    1b7e:	f1 2c       	mov	r15, r1
    1b80:	83 2d       	mov	r24, r3
    1b82:	89 70       	andi	r24, 0x09	; 9
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <vfprintf+0x27e>
    1b86:	ff 20       	and	r15, r15
    1b88:	31 f0       	breq	.+12     	; 0x1b96 <vfprintf+0x27e>
    1b8a:	b6 01       	movw	r22, r12
    1b8c:	80 e2       	ldi	r24, 0x20	; 32
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	2a d5       	rcall	.+2644   	; 0x25e6 <fputc>
    1b92:	fa 94       	dec	r15
    1b94:	f8 cf       	rjmp	.-16     	; 0x1b86 <vfprintf+0x26e>
    1b96:	22 20       	and	r2, r2
    1b98:	21 f0       	breq	.+8      	; 0x1ba2 <vfprintf+0x28a>
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	82 2d       	mov	r24, r2
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	22 d5       	rcall	.+2628   	; 0x25e6 <fputc>
    1ba2:	33 fc       	sbrc	r3, 3
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <vfprintf+0x29e>
    1ba6:	ff 20       	and	r15, r15
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <vfprintf+0x29e>
    1baa:	b6 01       	movw	r22, r12
    1bac:	80 e3       	ldi	r24, 0x30	; 48
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	1a d5       	rcall	.+2612   	; 0x25e6 <fputc>
    1bb2:	fa 94       	dec	r15
    1bb4:	f8 cf       	rjmp	.-16     	; 0x1ba6 <vfprintf+0x28e>
    1bb6:	37 fe       	sbrs	r3, 7
    1bb8:	58 c0       	rjmp	.+176    	; 0x1c6a <vfprintf+0x352>
    1bba:	94 2d       	mov	r25, r4
    1bbc:	85 2d       	mov	r24, r5
    1bbe:	57 fe       	sbrs	r5, 7
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <vfprintf+0x2ae>
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	29 2e       	mov	r2, r25
    1bc8:	38 2e       	mov	r3, r24
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a2 01       	movw	r20, r4
    1bd0:	4e 19       	sub	r20, r14
    1bd2:	51 09       	sbc	r21, r1
    1bd4:	4c 87       	std	Y+12, r20	; 0x0c
    1bd6:	5d 87       	std	Y+13, r21	; 0x0d
    1bd8:	a2 01       	movw	r20, r4
    1bda:	42 19       	sub	r20, r2
    1bdc:	53 09       	sbc	r21, r3
    1bde:	4e 87       	std	Y+14, r20	; 0x0e
    1be0:	5f 87       	std	Y+15, r21	; 0x0f
    1be2:	61 2f       	mov	r22, r17
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	44 27       	eor	r20, r20
    1be8:	55 27       	eor	r21, r21
    1bea:	46 1b       	sub	r20, r22
    1bec:	57 0b       	sbc	r21, r23
    1bee:	48 8b       	std	Y+16, r20	; 0x10
    1bf0:	59 8b       	std	Y+17, r21	; 0x11
    1bf2:	5f ef       	ldi	r21, 0xFF	; 255
    1bf4:	25 16       	cp	r2, r21
    1bf6:	35 06       	cpc	r3, r21
    1bf8:	41 f4       	brne	.+16     	; 0x1c0a <vfprintf+0x2f2>
    1bfa:	b6 01       	movw	r22, r12
    1bfc:	8e e2       	ldi	r24, 0x2E	; 46
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	2a 8b       	std	Y+18, r18	; 0x12
    1c02:	3b 8b       	std	Y+19, r19	; 0x13
    1c04:	f0 d4       	rcall	.+2528   	; 0x25e6 <fputc>
    1c06:	3b 89       	ldd	r19, Y+19	; 0x13
    1c08:	2a 89       	ldd	r18, Y+18	; 0x12
    1c0a:	42 14       	cp	r4, r2
    1c0c:	53 04       	cpc	r5, r3
    1c0e:	6c f0       	brlt	.+26     	; 0x1c2a <vfprintf+0x312>
    1c10:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c12:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c14:	42 15       	cp	r20, r2
    1c16:	53 05       	cpc	r21, r3
    1c18:	44 f4       	brge	.+16     	; 0x1c2a <vfprintf+0x312>
    1c1a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c1c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c1e:	e2 0f       	add	r30, r18
    1c20:	f3 1f       	adc	r31, r19
    1c22:	e6 0d       	add	r30, r6
    1c24:	f7 1d       	adc	r31, r7
    1c26:	81 81       	ldd	r24, Z+1	; 0x01
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <vfprintf+0x314>
    1c2a:	80 e3       	ldi	r24, 0x30	; 48
    1c2c:	51 e0       	ldi	r21, 0x01	; 1
    1c2e:	25 1a       	sub	r2, r21
    1c30:	31 08       	sbc	r3, r1
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	48 89       	ldd	r20, Y+16	; 0x10
    1c38:	59 89       	ldd	r21, Y+17	; 0x11
    1c3a:	24 16       	cp	r2, r20
    1c3c:	35 06       	cpc	r3, r21
    1c3e:	44 f0       	brlt	.+16     	; 0x1c50 <vfprintf+0x338>
    1c40:	b6 01       	movw	r22, r12
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	2a 8b       	std	Y+18, r18	; 0x12
    1c46:	3b 8b       	std	Y+19, r19	; 0x13
    1c48:	ce d4       	rcall	.+2460   	; 0x25e6 <fputc>
    1c4a:	2a 89       	ldd	r18, Y+18	; 0x12
    1c4c:	3b 89       	ldd	r19, Y+19	; 0x13
    1c4e:	d1 cf       	rjmp	.-94     	; 0x1bf2 <vfprintf+0x2da>
    1c50:	24 14       	cp	r2, r4
    1c52:	35 04       	cpc	r3, r5
    1c54:	39 f4       	brne	.+14     	; 0x1c64 <vfprintf+0x34c>
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	96 33       	cpi	r25, 0x36	; 54
    1c5a:	18 f4       	brcc	.+6      	; 0x1c62 <vfprintf+0x34a>
    1c5c:	95 33       	cpi	r25, 0x35	; 53
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <vfprintf+0x34c>
    1c60:	04 ff       	sbrs	r16, 4
    1c62:	81 e3       	ldi	r24, 0x31	; 49
    1c64:	b6 01       	movw	r22, r12
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	45 c0       	rjmp	.+138    	; 0x1cf4 <vfprintf+0x3dc>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	81 33       	cpi	r24, 0x31	; 49
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <vfprintf+0x35a>
    1c70:	0f 7e       	andi	r16, 0xEF	; 239
    1c72:	b6 01       	movw	r22, r12
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	b7 d4       	rcall	.+2414   	; 0x25e6 <fputc>
    1c78:	11 11       	cpse	r17, r1
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <vfprintf+0x36e>
    1c7c:	34 fc       	sbrc	r3, 4
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <vfprintf+0x394>
    1c80:	85 e6       	ldi	r24, 0x65	; 101
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	15 c0       	rjmp	.+42     	; 0x1cb0 <vfprintf+0x398>
    1c86:	b6 01       	movw	r22, r12
    1c88:	8e e2       	ldi	r24, 0x2E	; 46
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	ac d4       	rcall	.+2392   	; 0x25e6 <fputc>
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	ee 24       	eor	r14, r14
    1c92:	e3 94       	inc	r14
    1c94:	e8 0e       	add	r14, r24
    1c96:	f3 01       	movw	r30, r6
    1c98:	e8 0f       	add	r30, r24
    1c9a:	f1 1d       	adc	r31, r1
    1c9c:	80 81       	ld	r24, Z
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a1 d4       	rcall	.+2370   	; 0x25e6 <fputc>
    1ca4:	11 50       	subi	r17, 0x01	; 1
    1ca6:	8e 2d       	mov	r24, r14
    1ca8:	99 f7       	brne	.-26     	; 0x1c90 <vfprintf+0x378>
    1caa:	e8 cf       	rjmp	.-48     	; 0x1c7c <vfprintf+0x364>
    1cac:	85 e4       	ldi	r24, 0x45	; 69
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	99 d4       	rcall	.+2354   	; 0x25e6 <fputc>
    1cb4:	57 fc       	sbrc	r5, 7
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <vfprintf+0x3aa>
    1cb8:	41 14       	cp	r4, r1
    1cba:	51 04       	cpc	r5, r1
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <vfprintf+0x3b4>
    1cbe:	04 ff       	sbrs	r16, 4
    1cc0:	05 c0       	rjmp	.+10     	; 0x1ccc <vfprintf+0x3b4>
    1cc2:	51 94       	neg	r5
    1cc4:	41 94       	neg	r4
    1cc6:	51 08       	sbc	r5, r1
    1cc8:	8d e2       	ldi	r24, 0x2D	; 45
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <vfprintf+0x3b6>
    1ccc:	8b e2       	ldi	r24, 0x2B	; 43
    1cce:	b6 01       	movw	r22, r12
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	89 d4       	rcall	.+2322   	; 0x25e6 <fputc>
    1cd4:	80 e3       	ldi	r24, 0x30	; 48
    1cd6:	9a e0       	ldi	r25, 0x0A	; 10
    1cd8:	49 16       	cp	r4, r25
    1cda:	51 04       	cpc	r5, r1
    1cdc:	2c f0       	brlt	.+10     	; 0x1ce8 <vfprintf+0x3d0>
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	5a e0       	ldi	r21, 0x0A	; 10
    1ce2:	45 1a       	sub	r4, r21
    1ce4:	51 08       	sbc	r5, r1
    1ce6:	f7 cf       	rjmp	.-18     	; 0x1cd6 <vfprintf+0x3be>
    1ce8:	b6 01       	movw	r22, r12
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	7c d4       	rcall	.+2296   	; 0x25e6 <fputc>
    1cee:	b6 01       	movw	r22, r12
    1cf0:	c2 01       	movw	r24, r4
    1cf2:	c0 96       	adiw	r24, 0x30	; 48
    1cf4:	78 d4       	rcall	.+2288   	; 0x25e6 <fputc>
    1cf6:	4c c1       	rjmp	.+664    	; 0x1f90 <vfprintf+0x678>
    1cf8:	83 36       	cpi	r24, 0x63	; 99
    1cfa:	31 f0       	breq	.+12     	; 0x1d08 <vfprintf+0x3f0>
    1cfc:	83 37       	cpi	r24, 0x73	; 115
    1cfe:	79 f0       	breq	.+30     	; 0x1d1e <vfprintf+0x406>
    1d00:	83 35       	cpi	r24, 0x53	; 83
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <vfprintf+0x3ee>
    1d04:	54 c0       	rjmp	.+168    	; 0x1dae <vfprintf+0x496>
    1d06:	20 c0       	rjmp	.+64     	; 0x1d48 <vfprintf+0x430>
    1d08:	52 01       	movw	r10, r4
    1d0a:	e2 e0       	ldi	r30, 0x02	; 2
    1d0c:	ae 0e       	add	r10, r30
    1d0e:	b1 1c       	adc	r11, r1
    1d10:	f2 01       	movw	r30, r4
    1d12:	80 81       	ld	r24, Z
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	01 e0       	ldi	r16, 0x01	; 1
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	23 01       	movw	r4, r6
    1d1c:	13 c0       	rjmp	.+38     	; 0x1d44 <vfprintf+0x42c>
    1d1e:	52 01       	movw	r10, r4
    1d20:	f2 e0       	ldi	r31, 0x02	; 2
    1d22:	af 0e       	add	r10, r31
    1d24:	b1 1c       	adc	r11, r1
    1d26:	f2 01       	movw	r30, r4
    1d28:	40 80       	ld	r4, Z
    1d2a:	51 80       	ldd	r5, Z+1	; 0x01
    1d2c:	26 ff       	sbrs	r18, 6
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <vfprintf+0x41e>
    1d30:	61 2f       	mov	r22, r17
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <vfprintf+0x422>
    1d36:	6f ef       	ldi	r22, 0xFF	; 255
    1d38:	7f ef       	ldi	r23, 0xFF	; 255
    1d3a:	c2 01       	movw	r24, r4
    1d3c:	2a 8b       	std	Y+18, r18	; 0x12
    1d3e:	fe d3       	rcall	.+2044   	; 0x253c <strnlen>
    1d40:	8c 01       	movw	r16, r24
    1d42:	2a 89       	ldd	r18, Y+18	; 0x12
    1d44:	2f 77       	andi	r18, 0x7F	; 127
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <vfprintf+0x458>
    1d48:	52 01       	movw	r10, r4
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	af 0e       	add	r10, r31
    1d4e:	b1 1c       	adc	r11, r1
    1d50:	f2 01       	movw	r30, r4
    1d52:	40 80       	ld	r4, Z
    1d54:	51 80       	ldd	r5, Z+1	; 0x01
    1d56:	26 ff       	sbrs	r18, 6
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <vfprintf+0x448>
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x44c>
    1d60:	6f ef       	ldi	r22, 0xFF	; 255
    1d62:	7f ef       	ldi	r23, 0xFF	; 255
    1d64:	c2 01       	movw	r24, r4
    1d66:	2a 8b       	std	Y+18, r18	; 0x12
    1d68:	de d3       	rcall	.+1980   	; 0x2526 <strnlen_P>
    1d6a:	8c 01       	movw	r16, r24
    1d6c:	2a 89       	ldd	r18, Y+18	; 0x12
    1d6e:	20 68       	ori	r18, 0x80	; 128
    1d70:	32 2e       	mov	r3, r18
    1d72:	23 fd       	sbrc	r18, 3
    1d74:	18 c0       	rjmp	.+48     	; 0x1da6 <vfprintf+0x48e>
    1d76:	8f 2d       	mov	r24, r15
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	08 17       	cp	r16, r24
    1d7c:	19 07       	cpc	r17, r25
    1d7e:	98 f4       	brcc	.+38     	; 0x1da6 <vfprintf+0x48e>
    1d80:	b6 01       	movw	r22, r12
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	2f d4       	rcall	.+2142   	; 0x25e6 <fputc>
    1d88:	fa 94       	dec	r15
    1d8a:	f5 cf       	rjmp	.-22     	; 0x1d76 <vfprintf+0x45e>
    1d8c:	f2 01       	movw	r30, r4
    1d8e:	37 fc       	sbrc	r3, 7
    1d90:	85 91       	lpm	r24, Z+
    1d92:	37 fe       	sbrs	r3, 7
    1d94:	81 91       	ld	r24, Z+
    1d96:	2f 01       	movw	r4, r30
    1d98:	b6 01       	movw	r22, r12
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	24 d4       	rcall	.+2120   	; 0x25e6 <fputc>
    1d9e:	f1 10       	cpse	r15, r1
    1da0:	fa 94       	dec	r15
    1da2:	01 50       	subi	r16, 0x01	; 1
    1da4:	11 09       	sbc	r17, r1
    1da6:	01 15       	cp	r16, r1
    1da8:	11 05       	cpc	r17, r1
    1daa:	81 f7       	brne	.-32     	; 0x1d8c <vfprintf+0x474>
    1dac:	f1 c0       	rjmp	.+482    	; 0x1f90 <vfprintf+0x678>
    1dae:	84 36       	cpi	r24, 0x64	; 100
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <vfprintf+0x49e>
    1db2:	89 36       	cpi	r24, 0x69	; 105
    1db4:	51 f5       	brne	.+84     	; 0x1e0a <vfprintf+0x4f2>
    1db6:	52 01       	movw	r10, r4
    1db8:	27 ff       	sbrs	r18, 7
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <vfprintf+0x4b6>
    1dbc:	f4 e0       	ldi	r31, 0x04	; 4
    1dbe:	af 0e       	add	r10, r31
    1dc0:	b1 1c       	adc	r11, r1
    1dc2:	f2 01       	movw	r30, r4
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <vfprintf+0x4ca>
    1dce:	f2 e0       	ldi	r31, 0x02	; 2
    1dd0:	af 0e       	add	r10, r31
    1dd2:	b1 1c       	adc	r11, r1
    1dd4:	f2 01       	movw	r30, r4
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	07 2e       	mov	r0, r23
    1ddc:	00 0c       	add	r0, r0
    1dde:	88 0b       	sbc	r24, r24
    1de0:	99 0b       	sbc	r25, r25
    1de2:	2f 76       	andi	r18, 0x6F	; 111
    1de4:	32 2e       	mov	r3, r18
    1de6:	97 ff       	sbrs	r25, 7
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <vfprintf+0x4e4>
    1dea:	90 95       	com	r25
    1dec:	80 95       	com	r24
    1dee:	70 95       	com	r23
    1df0:	61 95       	neg	r22
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	20 68       	ori	r18, 0x80	; 128
    1dfa:	32 2e       	mov	r3, r18
    1dfc:	2a e0       	ldi	r18, 0x0A	; 10
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	a3 01       	movw	r20, r6
    1e02:	3c d4       	rcall	.+2168   	; 0x267c <__ultoa_invert>
    1e04:	e8 2e       	mov	r14, r24
    1e06:	e6 18       	sub	r14, r6
    1e08:	3e c0       	rjmp	.+124    	; 0x1e86 <vfprintf+0x56e>
    1e0a:	02 2f       	mov	r16, r18
    1e0c:	85 37       	cpi	r24, 0x75	; 117
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <vfprintf+0x500>
    1e10:	0f 7e       	andi	r16, 0xEF	; 239
    1e12:	2a e0       	ldi	r18, 0x0A	; 10
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	1d c0       	rjmp	.+58     	; 0x1e52 <vfprintf+0x53a>
    1e18:	09 7f       	andi	r16, 0xF9	; 249
    1e1a:	8f 36       	cpi	r24, 0x6F	; 111
    1e1c:	91 f0       	breq	.+36     	; 0x1e42 <vfprintf+0x52a>
    1e1e:	18 f4       	brcc	.+6      	; 0x1e26 <vfprintf+0x50e>
    1e20:	88 35       	cpi	r24, 0x58	; 88
    1e22:	59 f0       	breq	.+22     	; 0x1e3a <vfprintf+0x522>
    1e24:	be c0       	rjmp	.+380    	; 0x1fa2 <vfprintf+0x68a>
    1e26:	80 37       	cpi	r24, 0x70	; 112
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <vfprintf+0x518>
    1e2a:	88 37       	cpi	r24, 0x78	; 120
    1e2c:	11 f0       	breq	.+4      	; 0x1e32 <vfprintf+0x51a>
    1e2e:	b9 c0       	rjmp	.+370    	; 0x1fa2 <vfprintf+0x68a>
    1e30:	00 61       	ori	r16, 0x10	; 16
    1e32:	04 ff       	sbrs	r16, 4
    1e34:	09 c0       	rjmp	.+18     	; 0x1e48 <vfprintf+0x530>
    1e36:	04 60       	ori	r16, 0x04	; 4
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <vfprintf+0x530>
    1e3a:	24 ff       	sbrs	r18, 4
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0x536>
    1e3e:	06 60       	ori	r16, 0x06	; 6
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <vfprintf+0x536>
    1e42:	28 e0       	ldi	r18, 0x08	; 8
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	05 c0       	rjmp	.+10     	; 0x1e52 <vfprintf+0x53a>
    1e48:	20 e1       	ldi	r18, 0x10	; 16
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <vfprintf+0x53a>
    1e4e:	20 e1       	ldi	r18, 0x10	; 16
    1e50:	32 e0       	ldi	r19, 0x02	; 2
    1e52:	52 01       	movw	r10, r4
    1e54:	07 ff       	sbrs	r16, 7
    1e56:	09 c0       	rjmp	.+18     	; 0x1e6a <vfprintf+0x552>
    1e58:	f4 e0       	ldi	r31, 0x04	; 4
    1e5a:	af 0e       	add	r10, r31
    1e5c:	b1 1c       	adc	r11, r1
    1e5e:	f2 01       	movw	r30, r4
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	08 c0       	rjmp	.+16     	; 0x1e7a <vfprintf+0x562>
    1e6a:	f2 e0       	ldi	r31, 0x02	; 2
    1e6c:	af 0e       	add	r10, r31
    1e6e:	b1 1c       	adc	r11, r1
    1e70:	f2 01       	movw	r30, r4
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a3 01       	movw	r20, r6
    1e7c:	ff d3       	rcall	.+2046   	; 0x267c <__ultoa_invert>
    1e7e:	e8 2e       	mov	r14, r24
    1e80:	e6 18       	sub	r14, r6
    1e82:	0f 77       	andi	r16, 0x7F	; 127
    1e84:	30 2e       	mov	r3, r16
    1e86:	36 fe       	sbrs	r3, 6
    1e88:	0b c0       	rjmp	.+22     	; 0x1ea0 <vfprintf+0x588>
    1e8a:	33 2d       	mov	r19, r3
    1e8c:	3e 7f       	andi	r19, 0xFE	; 254
    1e8e:	e1 16       	cp	r14, r17
    1e90:	50 f4       	brcc	.+20     	; 0x1ea6 <vfprintf+0x58e>
    1e92:	34 fe       	sbrs	r3, 4
    1e94:	0a c0       	rjmp	.+20     	; 0x1eaa <vfprintf+0x592>
    1e96:	32 fc       	sbrc	r3, 2
    1e98:	08 c0       	rjmp	.+16     	; 0x1eaa <vfprintf+0x592>
    1e9a:	33 2d       	mov	r19, r3
    1e9c:	3e 7e       	andi	r19, 0xEE	; 238
    1e9e:	05 c0       	rjmp	.+10     	; 0x1eaa <vfprintf+0x592>
    1ea0:	0e 2d       	mov	r16, r14
    1ea2:	33 2d       	mov	r19, r3
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <vfprintf+0x594>
    1ea6:	0e 2d       	mov	r16, r14
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <vfprintf+0x594>
    1eaa:	01 2f       	mov	r16, r17
    1eac:	34 ff       	sbrs	r19, 4
    1eae:	0c c0       	rjmp	.+24     	; 0x1ec8 <vfprintf+0x5b0>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ee 0d       	add	r30, r14
    1eb4:	f1 1d       	adc	r31, r1
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 33       	cpi	r24, 0x30	; 48
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <vfprintf+0x5a8>
    1ebc:	39 7e       	andi	r19, 0xE9	; 233
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <vfprintf+0x5b8>
    1ec0:	32 ff       	sbrs	r19, 2
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <vfprintf+0x5b6>
    1ec4:	0e 5f       	subi	r16, 0xFE	; 254
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <vfprintf+0x5b8>
    1ec8:	83 2f       	mov	r24, r19
    1eca:	86 78       	andi	r24, 0x86	; 134
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <vfprintf+0x5b8>
    1ece:	0f 5f       	subi	r16, 0xFF	; 255
    1ed0:	33 fd       	sbrc	r19, 3
    1ed2:	12 c0       	rjmp	.+36     	; 0x1ef8 <vfprintf+0x5e0>
    1ed4:	30 ff       	sbrs	r19, 0
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <vfprintf+0x5cc>
    1ed8:	1e 2d       	mov	r17, r14
    1eda:	0f 15       	cp	r16, r15
    1edc:	18 f4       	brcc	.+6      	; 0x1ee4 <vfprintf+0x5cc>
    1ede:	1f 0d       	add	r17, r15
    1ee0:	10 1b       	sub	r17, r16
    1ee2:	0f 2d       	mov	r16, r15
    1ee4:	0f 15       	cp	r16, r15
    1ee6:	60 f4       	brcc	.+24     	; 0x1f00 <vfprintf+0x5e8>
    1ee8:	b6 01       	movw	r22, r12
    1eea:	80 e2       	ldi	r24, 0x20	; 32
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	3b 8b       	std	Y+19, r19	; 0x13
    1ef0:	7a d3       	rcall	.+1780   	; 0x25e6 <fputc>
    1ef2:	0f 5f       	subi	r16, 0xFF	; 255
    1ef4:	3b 89       	ldd	r19, Y+19	; 0x13
    1ef6:	f6 cf       	rjmp	.-20     	; 0x1ee4 <vfprintf+0x5cc>
    1ef8:	0f 15       	cp	r16, r15
    1efa:	10 f4       	brcc	.+4      	; 0x1f00 <vfprintf+0x5e8>
    1efc:	f0 1a       	sub	r15, r16
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <vfprintf+0x5ea>
    1f00:	f1 2c       	mov	r15, r1
    1f02:	34 ff       	sbrs	r19, 4
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <vfprintf+0x610>
    1f06:	b6 01       	movw	r22, r12
    1f08:	80 e3       	ldi	r24, 0x30	; 48
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	3b 8b       	std	Y+19, r19	; 0x13
    1f0e:	6b d3       	rcall	.+1750   	; 0x25e6 <fputc>
    1f10:	3b 89       	ldd	r19, Y+19	; 0x13
    1f12:	32 ff       	sbrs	r19, 2
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <vfprintf+0x62a>
    1f16:	31 fd       	sbrc	r19, 1
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <vfprintf+0x608>
    1f1a:	88 e7       	ldi	r24, 0x78	; 120
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <vfprintf+0x60c>
    1f20:	88 e5       	ldi	r24, 0x58	; 88
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	b6 01       	movw	r22, r12
    1f26:	0c c0       	rjmp	.+24     	; 0x1f40 <vfprintf+0x628>
    1f28:	83 2f       	mov	r24, r19
    1f2a:	86 78       	andi	r24, 0x86	; 134
    1f2c:	51 f0       	breq	.+20     	; 0x1f42 <vfprintf+0x62a>
    1f2e:	31 ff       	sbrs	r19, 1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <vfprintf+0x61e>
    1f32:	8b e2       	ldi	r24, 0x2B	; 43
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <vfprintf+0x620>
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	37 fd       	sbrc	r19, 7
    1f3a:	8d e2       	ldi	r24, 0x2D	; 45
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	52 d3       	rcall	.+1700   	; 0x25e6 <fputc>
    1f42:	e1 16       	cp	r14, r17
    1f44:	30 f4       	brcc	.+12     	; 0x1f52 <vfprintf+0x63a>
    1f46:	b6 01       	movw	r22, r12
    1f48:	80 e3       	ldi	r24, 0x30	; 48
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	4c d3       	rcall	.+1688   	; 0x25e6 <fputc>
    1f4e:	11 50       	subi	r17, 0x01	; 1
    1f50:	f8 cf       	rjmp	.-16     	; 0x1f42 <vfprintf+0x62a>
    1f52:	ea 94       	dec	r14
    1f54:	f3 01       	movw	r30, r6
    1f56:	ee 0d       	add	r30, r14
    1f58:	f1 1d       	adc	r31, r1
    1f5a:	80 81       	ld	r24, Z
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	42 d3       	rcall	.+1668   	; 0x25e6 <fputc>
    1f62:	e1 10       	cpse	r14, r1
    1f64:	f6 cf       	rjmp	.-20     	; 0x1f52 <vfprintf+0x63a>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <vfprintf+0x678>
    1f68:	f4 e0       	ldi	r31, 0x04	; 4
    1f6a:	ff 15       	cp	r31, r15
    1f6c:	48 f5       	brcc	.+82     	; 0x1fc0 <vfprintf+0x6a8>
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	f8 1a       	sub	r15, r24
    1f72:	33 fe       	sbrs	r3, 3
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <vfprintf+0x698>
    1f76:	21 10       	cpse	r2, r1
    1f78:	24 c0       	rjmp	.+72     	; 0x1fc2 <vfprintf+0x6aa>
    1f7a:	03 ff       	sbrs	r16, 3
    1f7c:	27 c0       	rjmp	.+78     	; 0x1fcc <vfprintf+0x6b4>
    1f7e:	08 ee       	ldi	r16, 0xE8	; 232
    1f80:	11 e0       	ldi	r17, 0x01	; 1
    1f82:	f3 2d       	mov	r31, r3
    1f84:	f0 71       	andi	r31, 0x10	; 16
    1f86:	3f 2e       	mov	r3, r31
    1f88:	f8 01       	movw	r30, r16
    1f8a:	84 91       	lpm	r24, Z
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	21 c0       	rjmp	.+66     	; 0x1fd2 <vfprintf+0x6ba>
    1f90:	ff 20       	and	r15, r15
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <vfprintf+0x67e>
    1f94:	fd cc       	rjmp	.-1542   	; 0x1990 <vfprintf+0x78>
    1f96:	b6 01       	movw	r22, r12
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	24 d3       	rcall	.+1608   	; 0x25e6 <fputc>
    1f9e:	fa 94       	dec	r15
    1fa0:	f7 cf       	rjmp	.-18     	; 0x1f90 <vfprintf+0x678>
    1fa2:	f6 01       	movw	r30, r12
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	97 81       	ldd	r25, Z+7	; 0x07
    1fa8:	23 c0       	rjmp	.+70     	; 0x1ff0 <vfprintf+0x6d8>
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	9f ef       	ldi	r25, 0xFF	; 255
    1fae:	20 c0       	rjmp	.+64     	; 0x1ff0 <vfprintf+0x6d8>
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	17 d3       	rcall	.+1582   	; 0x25e6 <fputc>
    1fb8:	fa 94       	dec	r15
    1fba:	f1 10       	cpse	r15, r1
    1fbc:	f9 cf       	rjmp	.-14     	; 0x1fb0 <vfprintf+0x698>
    1fbe:	db cf       	rjmp	.-74     	; 0x1f76 <vfprintf+0x65e>
    1fc0:	f1 2c       	mov	r15, r1
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	82 2d       	mov	r24, r2
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e d3       	rcall	.+1564   	; 0x25e6 <fputc>
    1fca:	d7 cf       	rjmp	.-82     	; 0x1f7a <vfprintf+0x662>
    1fcc:	0c ee       	ldi	r16, 0xEC	; 236
    1fce:	11 e0       	ldi	r17, 0x01	; 1
    1fd0:	d8 cf       	rjmp	.-80     	; 0x1f82 <vfprintf+0x66a>
    1fd2:	31 10       	cpse	r3, r1
    1fd4:	80 52       	subi	r24, 0x20	; 32
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	05 d3       	rcall	.+1546   	; 0x25e6 <fputc>
    1fdc:	0f 5f       	subi	r16, 0xFF	; 255
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	d3 cf       	rjmp	.-90     	; 0x1f88 <vfprintf+0x670>
    1fe2:	23 e0       	ldi	r18, 0x03	; 3
    1fe4:	2f 15       	cp	r18, r15
    1fe6:	10 f4       	brcc	.+4      	; 0x1fec <vfprintf+0x6d4>
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	c2 cf       	rjmp	.-124    	; 0x1f70 <vfprintf+0x658>
    1fec:	f1 2c       	mov	r15, r1
    1fee:	c5 cf       	rjmp	.-118    	; 0x1f7a <vfprintf+0x662>
    1ff0:	63 96       	adiw	r28, 0x13	; 19
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	9f 90       	pop	r9
    200c:	8f 90       	pop	r8
    200e:	7f 90       	pop	r7
    2010:	6f 90       	pop	r6
    2012:	5f 90       	pop	r5
    2014:	4f 90       	pop	r4
    2016:	3f 90       	pop	r3
    2018:	2f 90       	pop	r2
    201a:	08 95       	ret

0000201c <__udivmodsi4>:
    201c:	a1 e2       	ldi	r26, 0x21	; 33
    201e:	1a 2e       	mov	r1, r26
    2020:	aa 1b       	sub	r26, r26
    2022:	bb 1b       	sub	r27, r27
    2024:	fd 01       	movw	r30, r26
    2026:	0d c0       	rjmp	.+26     	; 0x2042 <__udivmodsi4_ep>

00002028 <__udivmodsi4_loop>:
    2028:	aa 1f       	adc	r26, r26
    202a:	bb 1f       	adc	r27, r27
    202c:	ee 1f       	adc	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	a2 17       	cp	r26, r18
    2032:	b3 07       	cpc	r27, r19
    2034:	e4 07       	cpc	r30, r20
    2036:	f5 07       	cpc	r31, r21
    2038:	20 f0       	brcs	.+8      	; 0x2042 <__udivmodsi4_ep>
    203a:	a2 1b       	sub	r26, r18
    203c:	b3 0b       	sbc	r27, r19
    203e:	e4 0b       	sbc	r30, r20
    2040:	f5 0b       	sbc	r31, r21

00002042 <__udivmodsi4_ep>:
    2042:	66 1f       	adc	r22, r22
    2044:	77 1f       	adc	r23, r23
    2046:	88 1f       	adc	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	1a 94       	dec	r1
    204c:	69 f7       	brne	.-38     	; 0x2028 <__udivmodsi4_loop>
    204e:	60 95       	com	r22
    2050:	70 95       	com	r23
    2052:	80 95       	com	r24
    2054:	90 95       	com	r25
    2056:	9b 01       	movw	r18, r22
    2058:	ac 01       	movw	r20, r24
    205a:	bd 01       	movw	r22, r26
    205c:	cf 01       	movw	r24, r30
    205e:	08 95       	ret

00002060 <__muldi3>:
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	1f 93       	push	r17
    2066:	0f 93       	push	r16
    2068:	9a 9d       	mul	r25, r10
    206a:	f0 2d       	mov	r31, r0
    206c:	21 9f       	mul	r18, r17
    206e:	f0 0d       	add	r31, r0
    2070:	8b 9d       	mul	r24, r11
    2072:	f0 0d       	add	r31, r0
    2074:	8a 9d       	mul	r24, r10
    2076:	e0 2d       	mov	r30, r0
    2078:	f1 0d       	add	r31, r1
    207a:	03 9f       	mul	r16, r19
    207c:	f0 0d       	add	r31, r0
    207e:	02 9f       	mul	r16, r18
    2080:	e0 0d       	add	r30, r0
    2082:	f1 1d       	adc	r31, r1
    2084:	4e 9d       	mul	r20, r14
    2086:	e0 0d       	add	r30, r0
    2088:	f1 1d       	adc	r31, r1
    208a:	5e 9d       	mul	r21, r14
    208c:	f0 0d       	add	r31, r0
    208e:	4f 9d       	mul	r20, r15
    2090:	f0 0d       	add	r31, r0
    2092:	7f 93       	push	r23
    2094:	6f 93       	push	r22
    2096:	bf 92       	push	r11
    2098:	af 92       	push	r10
    209a:	5f 93       	push	r21
    209c:	4f 93       	push	r20
    209e:	d5 01       	movw	r26, r10
    20a0:	5b d1       	rcall	.+694    	; 0x2358 <__umulhisi3>
    20a2:	8b 01       	movw	r16, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	d7 01       	movw	r26, r14
    20a8:	57 d1       	rcall	.+686    	; 0x2358 <__umulhisi3>
    20aa:	eb 01       	movw	r28, r22
    20ac:	e8 0f       	add	r30, r24
    20ae:	f9 1f       	adc	r31, r25
    20b0:	d6 01       	movw	r26, r12
    20b2:	1f d0       	rcall	.+62     	; 0x20f2 <__muldi3_6>
    20b4:	2f 91       	pop	r18
    20b6:	3f 91       	pop	r19
    20b8:	d6 01       	movw	r26, r12
    20ba:	4e d1       	rcall	.+668    	; 0x2358 <__umulhisi3>
    20bc:	c6 0f       	add	r28, r22
    20be:	d7 1f       	adc	r29, r23
    20c0:	e8 1f       	adc	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	af 91       	pop	r26
    20c6:	bf 91       	pop	r27
    20c8:	14 d0       	rcall	.+40     	; 0x20f2 <__muldi3_6>
    20ca:	2f 91       	pop	r18
    20cc:	3f 91       	pop	r19
    20ce:	44 d1       	rcall	.+648    	; 0x2358 <__umulhisi3>
    20d0:	c6 0f       	add	r28, r22
    20d2:	d7 1f       	adc	r29, r23
    20d4:	e8 1f       	adc	r30, r24
    20d6:	f9 1f       	adc	r31, r25
    20d8:	d6 01       	movw	r26, r12
    20da:	3e d1       	rcall	.+636    	; 0x2358 <__umulhisi3>
    20dc:	e6 0f       	add	r30, r22
    20de:	f7 1f       	adc	r31, r23
    20e0:	98 01       	movw	r18, r16
    20e2:	be 01       	movw	r22, r28
    20e4:	cf 01       	movw	r24, r30
    20e6:	11 24       	eor	r1, r1
    20e8:	0f 91       	pop	r16
    20ea:	1f 91       	pop	r17
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <__muldi3_6>:
    20f2:	32 d1       	rcall	.+612    	; 0x2358 <__umulhisi3>
    20f4:	46 0f       	add	r20, r22
    20f6:	57 1f       	adc	r21, r23
    20f8:	c8 1f       	adc	r28, r24
    20fa:	d9 1f       	adc	r29, r25
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <__muldi3_6+0xe>
    20fe:	31 96       	adiw	r30, 0x01	; 1
    2100:	08 95       	ret

00002102 <__moddi3>:
    2102:	68 94       	set
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <__divdi3_moddi3>

00002106 <__divdi3>:
    2106:	e8 94       	clt

00002108 <__divdi3_moddi3>:
    2108:	f9 2f       	mov	r31, r25
    210a:	f1 2b       	or	r31, r17
    210c:	0a f0       	brmi	.+2      	; 0x2110 <__divdi3_moddi3+0x8>
    210e:	27 c0       	rjmp	.+78     	; 0x215e <__udivdi3_umoddi3>
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ed e8       	ldi	r30, 0x8D	; 141
    2116:	f0 e1       	ldi	r31, 0x10	; 16
    2118:	93 c0       	rjmp	.+294    	; 0x2240 <__prologue_saves__+0xc>
    211a:	09 2e       	mov	r0, r25
    211c:	05 94       	asr	r0
    211e:	1a f4       	brpl	.+6      	; 0x2126 <__divdi3_moddi3+0x1e>
    2120:	79 d0       	rcall	.+242    	; 0x2214 <__negdi2>
    2122:	11 23       	and	r17, r17
    2124:	92 f4       	brpl	.+36     	; 0x214a <__divdi3_moddi3+0x42>
    2126:	f0 e8       	ldi	r31, 0x80	; 128
    2128:	0f 26       	eor	r0, r31
    212a:	ff ef       	ldi	r31, 0xFF	; 255
    212c:	e0 94       	com	r14
    212e:	f0 94       	com	r15
    2130:	00 95       	com	r16
    2132:	10 95       	com	r17
    2134:	b0 94       	com	r11
    2136:	c0 94       	com	r12
    2138:	d0 94       	com	r13
    213a:	a1 94       	neg	r10
    213c:	bf 0a       	sbc	r11, r31
    213e:	cf 0a       	sbc	r12, r31
    2140:	df 0a       	sbc	r13, r31
    2142:	ef 0a       	sbc	r14, r31
    2144:	ff 0a       	sbc	r15, r31
    2146:	0f 0b       	sbc	r16, r31
    2148:	1f 0b       	sbc	r17, r31
    214a:	13 d0       	rcall	.+38     	; 0x2172 <__udivmod64>
    214c:	07 fc       	sbrc	r0, 7
    214e:	62 d0       	rcall	.+196    	; 0x2214 <__negdi2>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	ec e0       	ldi	r30, 0x0C	; 12
    2156:	8d c0       	rjmp	.+282    	; 0x2272 <__epilogue_restores__+0xc>

00002158 <__umoddi3>:
    2158:	68 94       	set
    215a:	01 c0       	rjmp	.+2      	; 0x215e <__udivdi3_umoddi3>

0000215c <__udivdi3>:
    215c:	e8 94       	clt

0000215e <__udivdi3_umoddi3>:
    215e:	8f 92       	push	r8
    2160:	9f 92       	push	r9
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	05 d0       	rcall	.+10     	; 0x2172 <__udivmod64>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	9f 90       	pop	r9
    216e:	8f 90       	pop	r8
    2170:	08 95       	ret

00002172 <__udivmod64>:
    2172:	88 24       	eor	r8, r8
    2174:	99 24       	eor	r9, r9
    2176:	f4 01       	movw	r30, r8
    2178:	e4 01       	movw	r28, r8
    217a:	b0 e4       	ldi	r27, 0x40	; 64
    217c:	9f 93       	push	r25
    217e:	aa 27       	eor	r26, r26
    2180:	9a 15       	cp	r25, r10
    2182:	8b 04       	cpc	r8, r11
    2184:	9c 04       	cpc	r9, r12
    2186:	ed 05       	cpc	r30, r13
    2188:	fe 05       	cpc	r31, r14
    218a:	cf 05       	cpc	r28, r15
    218c:	d0 07       	cpc	r29, r16
    218e:	a1 07       	cpc	r26, r17
    2190:	98 f4       	brcc	.+38     	; 0x21b8 <__udivmod64+0x46>
    2192:	ad 2f       	mov	r26, r29
    2194:	dc 2f       	mov	r29, r28
    2196:	cf 2f       	mov	r28, r31
    2198:	fe 2f       	mov	r31, r30
    219a:	e9 2d       	mov	r30, r9
    219c:	98 2c       	mov	r9, r8
    219e:	89 2e       	mov	r8, r25
    21a0:	98 2f       	mov	r25, r24
    21a2:	87 2f       	mov	r24, r23
    21a4:	76 2f       	mov	r23, r22
    21a6:	65 2f       	mov	r22, r21
    21a8:	54 2f       	mov	r21, r20
    21aa:	43 2f       	mov	r20, r19
    21ac:	32 2f       	mov	r19, r18
    21ae:	22 27       	eor	r18, r18
    21b0:	b8 50       	subi	r27, 0x08	; 8
    21b2:	31 f7       	brne	.-52     	; 0x2180 <__udivmod64+0xe>
    21b4:	bf 91       	pop	r27
    21b6:	27 c0       	rjmp	.+78     	; 0x2206 <__udivmod64+0x94>
    21b8:	1b 2e       	mov	r1, r27
    21ba:	bf 91       	pop	r27
    21bc:	bb 27       	eor	r27, r27
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	44 1f       	adc	r20, r20
    21c4:	55 1f       	adc	r21, r21
    21c6:	66 1f       	adc	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	88 1f       	adc	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	88 1c       	adc	r8, r8
    21d0:	99 1c       	adc	r9, r9
    21d2:	ee 1f       	adc	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	cc 1f       	adc	r28, r28
    21d8:	dd 1f       	adc	r29, r29
    21da:	aa 1f       	adc	r26, r26
    21dc:	bb 1f       	adc	r27, r27
    21de:	8a 14       	cp	r8, r10
    21e0:	9b 04       	cpc	r9, r11
    21e2:	ec 05       	cpc	r30, r12
    21e4:	fd 05       	cpc	r31, r13
    21e6:	ce 05       	cpc	r28, r14
    21e8:	df 05       	cpc	r29, r15
    21ea:	a0 07       	cpc	r26, r16
    21ec:	b1 07       	cpc	r27, r17
    21ee:	48 f0       	brcs	.+18     	; 0x2202 <__udivmod64+0x90>
    21f0:	8a 18       	sub	r8, r10
    21f2:	9b 08       	sbc	r9, r11
    21f4:	ec 09       	sbc	r30, r12
    21f6:	fd 09       	sbc	r31, r13
    21f8:	ce 09       	sbc	r28, r14
    21fa:	df 09       	sbc	r29, r15
    21fc:	a0 0b       	sbc	r26, r16
    21fe:	b1 0b       	sbc	r27, r17
    2200:	21 60       	ori	r18, 0x01	; 1
    2202:	1a 94       	dec	r1
    2204:	e1 f6       	brne	.-72     	; 0x21be <__udivmod64+0x4c>
    2206:	2e f4       	brtc	.+10     	; 0x2212 <__udivmod64+0xa0>
    2208:	94 01       	movw	r18, r8
    220a:	af 01       	movw	r20, r30
    220c:	be 01       	movw	r22, r28
    220e:	cd 01       	movw	r24, r26
    2210:	00 0c       	add	r0, r0
    2212:	08 95       	ret

00002214 <__negdi2>:
    2214:	60 95       	com	r22
    2216:	70 95       	com	r23
    2218:	80 95       	com	r24
    221a:	90 95       	com	r25
    221c:	30 95       	com	r19
    221e:	40 95       	com	r20
    2220:	50 95       	com	r21
    2222:	21 95       	neg	r18
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	4f 4f       	sbci	r20, 0xFF	; 255
    2228:	5f 4f       	sbci	r21, 0xFF	; 255
    222a:	6f 4f       	sbci	r22, 0xFF	; 255
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <__prologue_saves__>:
    2234:	2f 92       	push	r2
    2236:	3f 92       	push	r3
    2238:	4f 92       	push	r4
    223a:	5f 92       	push	r5
    223c:	6f 92       	push	r6
    223e:	7f 92       	push	r7
    2240:	8f 92       	push	r8
    2242:	9f 92       	push	r9
    2244:	af 92       	push	r10
    2246:	bf 92       	push	r11
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	ca 1b       	sub	r28, r26
    225e:	db 0b       	sbc	r29, r27
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	19 94       	eijmp

00002266 <__epilogue_restores__>:
    2266:	2a 88       	ldd	r2, Y+18	; 0x12
    2268:	39 88       	ldd	r3, Y+17	; 0x11
    226a:	48 88       	ldd	r4, Y+16	; 0x10
    226c:	5f 84       	ldd	r5, Y+15	; 0x0f
    226e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2270:	7d 84       	ldd	r7, Y+13	; 0x0d
    2272:	8c 84       	ldd	r8, Y+12	; 0x0c
    2274:	9b 84       	ldd	r9, Y+11	; 0x0b
    2276:	aa 84       	ldd	r10, Y+10	; 0x0a
    2278:	b9 84       	ldd	r11, Y+9	; 0x09
    227a:	c8 84       	ldd	r12, Y+8	; 0x08
    227c:	df 80       	ldd	r13, Y+7	; 0x07
    227e:	ee 80       	ldd	r14, Y+6	; 0x06
    2280:	fd 80       	ldd	r15, Y+5	; 0x05
    2282:	0c 81       	ldd	r16, Y+4	; 0x04
    2284:	1b 81       	ldd	r17, Y+3	; 0x03
    2286:	aa 81       	ldd	r26, Y+2	; 0x02
    2288:	b9 81       	ldd	r27, Y+1	; 0x01
    228a:	ce 0f       	add	r28, r30
    228c:	d1 1d       	adc	r29, r1
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	ed 01       	movw	r28, r26
    2294:	08 95       	ret

00002296 <__ashldi3>:
    2296:	0f 93       	push	r16
    2298:	08 30       	cpi	r16, 0x08	; 8
    229a:	90 f0       	brcs	.+36     	; 0x22c0 <__ashldi3+0x2a>
    229c:	98 2f       	mov	r25, r24
    229e:	87 2f       	mov	r24, r23
    22a0:	76 2f       	mov	r23, r22
    22a2:	65 2f       	mov	r22, r21
    22a4:	54 2f       	mov	r21, r20
    22a6:	43 2f       	mov	r20, r19
    22a8:	32 2f       	mov	r19, r18
    22aa:	22 27       	eor	r18, r18
    22ac:	08 50       	subi	r16, 0x08	; 8
    22ae:	f4 cf       	rjmp	.-24     	; 0x2298 <__ashldi3+0x2>
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	44 1f       	adc	r20, r20
    22b6:	55 1f       	adc	r21, r21
    22b8:	66 1f       	adc	r22, r22
    22ba:	77 1f       	adc	r23, r23
    22bc:	88 1f       	adc	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 95       	dec	r16
    22c2:	b2 f7       	brpl	.-20     	; 0x22b0 <__ashldi3+0x1a>
    22c4:	0f 91       	pop	r16
    22c6:	08 95       	ret

000022c8 <__ashrdi3>:
    22c8:	97 fb       	bst	r25, 7
    22ca:	10 f8       	bld	r1, 0

000022cc <__lshrdi3>:
    22cc:	16 94       	lsr	r1
    22ce:	00 08       	sbc	r0, r0
    22d0:	0f 93       	push	r16
    22d2:	08 30       	cpi	r16, 0x08	; 8
    22d4:	98 f0       	brcs	.+38     	; 0x22fc <__lshrdi3+0x30>
    22d6:	08 50       	subi	r16, 0x08	; 8
    22d8:	23 2f       	mov	r18, r19
    22da:	34 2f       	mov	r19, r20
    22dc:	45 2f       	mov	r20, r21
    22de:	56 2f       	mov	r21, r22
    22e0:	67 2f       	mov	r22, r23
    22e2:	78 2f       	mov	r23, r24
    22e4:	89 2f       	mov	r24, r25
    22e6:	90 2d       	mov	r25, r0
    22e8:	f4 cf       	rjmp	.-24     	; 0x22d2 <__lshrdi3+0x6>
    22ea:	05 94       	asr	r0
    22ec:	97 95       	ror	r25
    22ee:	87 95       	ror	r24
    22f0:	77 95       	ror	r23
    22f2:	67 95       	ror	r22
    22f4:	57 95       	ror	r21
    22f6:	47 95       	ror	r20
    22f8:	37 95       	ror	r19
    22fa:	27 95       	ror	r18
    22fc:	0a 95       	dec	r16
    22fe:	aa f7       	brpl	.-22     	; 0x22ea <__lshrdi3+0x1e>
    2300:	0f 91       	pop	r16
    2302:	08 95       	ret

00002304 <__adddi3>:
    2304:	2a 0d       	add	r18, r10
    2306:	3b 1d       	adc	r19, r11
    2308:	4c 1d       	adc	r20, r12
    230a:	5d 1d       	adc	r21, r13
    230c:	6e 1d       	adc	r22, r14
    230e:	7f 1d       	adc	r23, r15
    2310:	80 1f       	adc	r24, r16
    2312:	91 1f       	adc	r25, r17
    2314:	08 95       	ret

00002316 <__adddi3_s8>:
    2316:	00 24       	eor	r0, r0
    2318:	a7 fd       	sbrc	r26, 7
    231a:	00 94       	com	r0
    231c:	2a 0f       	add	r18, r26
    231e:	30 1d       	adc	r19, r0
    2320:	40 1d       	adc	r20, r0
    2322:	50 1d       	adc	r21, r0
    2324:	60 1d       	adc	r22, r0
    2326:	70 1d       	adc	r23, r0
    2328:	80 1d       	adc	r24, r0
    232a:	90 1d       	adc	r25, r0
    232c:	08 95       	ret

0000232e <__subdi3>:
    232e:	2a 19       	sub	r18, r10
    2330:	3b 09       	sbc	r19, r11
    2332:	4c 09       	sbc	r20, r12
    2334:	5d 09       	sbc	r21, r13
    2336:	6e 09       	sbc	r22, r14
    2338:	7f 09       	sbc	r23, r15
    233a:	80 0b       	sbc	r24, r16
    233c:	91 0b       	sbc	r25, r17
    233e:	08 95       	ret

00002340 <__cmpdi2_s8>:
    2340:	00 24       	eor	r0, r0
    2342:	a7 fd       	sbrc	r26, 7
    2344:	00 94       	com	r0
    2346:	2a 17       	cp	r18, r26
    2348:	30 05       	cpc	r19, r0
    234a:	40 05       	cpc	r20, r0
    234c:	50 05       	cpc	r21, r0
    234e:	60 05       	cpc	r22, r0
    2350:	70 05       	cpc	r23, r0
    2352:	80 05       	cpc	r24, r0
    2354:	90 05       	cpc	r25, r0
    2356:	08 95       	ret

00002358 <__umulhisi3>:
    2358:	a2 9f       	mul	r26, r18
    235a:	b0 01       	movw	r22, r0
    235c:	b3 9f       	mul	r27, r19
    235e:	c0 01       	movw	r24, r0
    2360:	a3 9f       	mul	r26, r19
    2362:	70 0d       	add	r23, r0
    2364:	81 1d       	adc	r24, r1
    2366:	11 24       	eor	r1, r1
    2368:	91 1d       	adc	r25, r1
    236a:	b2 9f       	mul	r27, r18
    236c:	70 0d       	add	r23, r0
    236e:	81 1d       	adc	r24, r1
    2370:	11 24       	eor	r1, r1
    2372:	91 1d       	adc	r25, r1
    2374:	08 95       	ret

00002376 <__ftoa_engine>:
    2376:	28 30       	cpi	r18, 0x08	; 8
    2378:	08 f0       	brcs	.+2      	; 0x237c <__ftoa_engine+0x6>
    237a:	27 e0       	ldi	r18, 0x07	; 7
    237c:	33 27       	eor	r19, r19
    237e:	da 01       	movw	r26, r20
    2380:	99 0f       	add	r25, r25
    2382:	31 1d       	adc	r19, r1
    2384:	87 fd       	sbrc	r24, 7
    2386:	91 60       	ori	r25, 0x01	; 1
    2388:	00 96       	adiw	r24, 0x00	; 0
    238a:	61 05       	cpc	r22, r1
    238c:	71 05       	cpc	r23, r1
    238e:	39 f4       	brne	.+14     	; 0x239e <__ftoa_engine+0x28>
    2390:	32 60       	ori	r19, 0x02	; 2
    2392:	2e 5f       	subi	r18, 0xFE	; 254
    2394:	3d 93       	st	X+, r19
    2396:	30 e3       	ldi	r19, 0x30	; 48
    2398:	2a 95       	dec	r18
    239a:	e1 f7       	brne	.-8      	; 0x2394 <__ftoa_engine+0x1e>
    239c:	08 95       	ret
    239e:	9f 3f       	cpi	r25, 0xFF	; 255
    23a0:	30 f0       	brcs	.+12     	; 0x23ae <__ftoa_engine+0x38>
    23a2:	80 38       	cpi	r24, 0x80	; 128
    23a4:	71 05       	cpc	r23, r1
    23a6:	61 05       	cpc	r22, r1
    23a8:	09 f0       	breq	.+2      	; 0x23ac <__ftoa_engine+0x36>
    23aa:	3c 5f       	subi	r19, 0xFC	; 252
    23ac:	3c 5f       	subi	r19, 0xFC	; 252
    23ae:	3d 93       	st	X+, r19
    23b0:	91 30       	cpi	r25, 0x01	; 1
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <__ftoa_engine+0x40>
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	91 1d       	adc	r25, r1
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	1f 93       	push	r17
    23be:	0f 93       	push	r16
    23c0:	ff 92       	push	r15
    23c2:	ef 92       	push	r14
    23c4:	19 2f       	mov	r17, r25
    23c6:	98 7f       	andi	r25, 0xF8	; 248
    23c8:	96 95       	lsr	r25
    23ca:	e9 2f       	mov	r30, r25
    23cc:	96 95       	lsr	r25
    23ce:	96 95       	lsr	r25
    23d0:	e9 0f       	add	r30, r25
    23d2:	ff 27       	eor	r31, r31
    23d4:	e6 5b       	subi	r30, 0xB6	; 182
    23d6:	fd 4f       	sbci	r31, 0xFD	; 253
    23d8:	99 27       	eor	r25, r25
    23da:	33 27       	eor	r19, r19
    23dc:	ee 24       	eor	r14, r14
    23de:	ff 24       	eor	r15, r15
    23e0:	a7 01       	movw	r20, r14
    23e2:	e7 01       	movw	r28, r14
    23e4:	05 90       	lpm	r0, Z+
    23e6:	08 94       	sec
    23e8:	07 94       	ror	r0
    23ea:	28 f4       	brcc	.+10     	; 0x23f6 <__ftoa_engine+0x80>
    23ec:	36 0f       	add	r19, r22
    23ee:	e7 1e       	adc	r14, r23
    23f0:	f8 1e       	adc	r15, r24
    23f2:	49 1f       	adc	r20, r25
    23f4:	51 1d       	adc	r21, r1
    23f6:	66 0f       	add	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	06 94       	lsr	r0
    2400:	a1 f7       	brne	.-24     	; 0x23ea <__ftoa_engine+0x74>
    2402:	05 90       	lpm	r0, Z+
    2404:	07 94       	ror	r0
    2406:	28 f4       	brcc	.+10     	; 0x2412 <__ftoa_engine+0x9c>
    2408:	e7 0e       	add	r14, r23
    240a:	f8 1e       	adc	r15, r24
    240c:	49 1f       	adc	r20, r25
    240e:	56 1f       	adc	r21, r22
    2410:	c1 1d       	adc	r28, r1
    2412:	77 0f       	add	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	66 1f       	adc	r22, r22
    241a:	06 94       	lsr	r0
    241c:	a1 f7       	brne	.-24     	; 0x2406 <__ftoa_engine+0x90>
    241e:	05 90       	lpm	r0, Z+
    2420:	07 94       	ror	r0
    2422:	28 f4       	brcc	.+10     	; 0x242e <__ftoa_engine+0xb8>
    2424:	f8 0e       	add	r15, r24
    2426:	49 1f       	adc	r20, r25
    2428:	56 1f       	adc	r21, r22
    242a:	c7 1f       	adc	r28, r23
    242c:	d1 1d       	adc	r29, r1
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	66 1f       	adc	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	06 94       	lsr	r0
    2438:	a1 f7       	brne	.-24     	; 0x2422 <__ftoa_engine+0xac>
    243a:	05 90       	lpm	r0, Z+
    243c:	07 94       	ror	r0
    243e:	20 f4       	brcc	.+8      	; 0x2448 <__ftoa_engine+0xd2>
    2440:	49 0f       	add	r20, r25
    2442:	56 1f       	adc	r21, r22
    2444:	c7 1f       	adc	r28, r23
    2446:	d8 1f       	adc	r29, r24
    2448:	99 0f       	add	r25, r25
    244a:	66 1f       	adc	r22, r22
    244c:	77 1f       	adc	r23, r23
    244e:	88 1f       	adc	r24, r24
    2450:	06 94       	lsr	r0
    2452:	a9 f7       	brne	.-22     	; 0x243e <__ftoa_engine+0xc8>
    2454:	84 91       	lpm	r24, Z
    2456:	10 95       	com	r17
    2458:	17 70       	andi	r17, 0x07	; 7
    245a:	41 f0       	breq	.+16     	; 0x246c <__ftoa_engine+0xf6>
    245c:	d6 95       	lsr	r29
    245e:	c7 95       	ror	r28
    2460:	57 95       	ror	r21
    2462:	47 95       	ror	r20
    2464:	f7 94       	ror	r15
    2466:	e7 94       	ror	r14
    2468:	1a 95       	dec	r17
    246a:	c1 f7       	brne	.-16     	; 0x245c <__ftoa_engine+0xe6>
    246c:	e0 ef       	ldi	r30, 0xF0	; 240
    246e:	f1 e0       	ldi	r31, 0x01	; 1
    2470:	68 94       	set
    2472:	15 90       	lpm	r1, Z+
    2474:	15 91       	lpm	r17, Z+
    2476:	35 91       	lpm	r19, Z+
    2478:	65 91       	lpm	r22, Z+
    247a:	95 91       	lpm	r25, Z+
    247c:	05 90       	lpm	r0, Z+
    247e:	7f e2       	ldi	r23, 0x2F	; 47
    2480:	73 95       	inc	r23
    2482:	e1 18       	sub	r14, r1
    2484:	f1 0a       	sbc	r15, r17
    2486:	43 0b       	sbc	r20, r19
    2488:	56 0b       	sbc	r21, r22
    248a:	c9 0b       	sbc	r28, r25
    248c:	d0 09       	sbc	r29, r0
    248e:	c0 f7       	brcc	.-16     	; 0x2480 <__ftoa_engine+0x10a>
    2490:	e1 0c       	add	r14, r1
    2492:	f1 1e       	adc	r15, r17
    2494:	43 1f       	adc	r20, r19
    2496:	56 1f       	adc	r21, r22
    2498:	c9 1f       	adc	r28, r25
    249a:	d0 1d       	adc	r29, r0
    249c:	7e f4       	brtc	.+30     	; 0x24bc <__ftoa_engine+0x146>
    249e:	70 33       	cpi	r23, 0x30	; 48
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <__ftoa_engine+0x130>
    24a2:	8a 95       	dec	r24
    24a4:	e6 cf       	rjmp	.-52     	; 0x2472 <__ftoa_engine+0xfc>
    24a6:	e8 94       	clt
    24a8:	01 50       	subi	r16, 0x01	; 1
    24aa:	30 f0       	brcs	.+12     	; 0x24b8 <__ftoa_engine+0x142>
    24ac:	08 0f       	add	r16, r24
    24ae:	0a f4       	brpl	.+2      	; 0x24b2 <__ftoa_engine+0x13c>
    24b0:	00 27       	eor	r16, r16
    24b2:	02 17       	cp	r16, r18
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <__ftoa_engine+0x142>
    24b6:	20 2f       	mov	r18, r16
    24b8:	23 95       	inc	r18
    24ba:	02 2f       	mov	r16, r18
    24bc:	7a 33       	cpi	r23, 0x3A	; 58
    24be:	28 f0       	brcs	.+10     	; 0x24ca <__ftoa_engine+0x154>
    24c0:	79 e3       	ldi	r23, 0x39	; 57
    24c2:	7d 93       	st	X+, r23
    24c4:	2a 95       	dec	r18
    24c6:	e9 f7       	brne	.-6      	; 0x24c2 <__ftoa_engine+0x14c>
    24c8:	10 c0       	rjmp	.+32     	; 0x24ea <__ftoa_engine+0x174>
    24ca:	7d 93       	st	X+, r23
    24cc:	2a 95       	dec	r18
    24ce:	89 f6       	brne	.-94     	; 0x2472 <__ftoa_engine+0xfc>
    24d0:	06 94       	lsr	r0
    24d2:	97 95       	ror	r25
    24d4:	67 95       	ror	r22
    24d6:	37 95       	ror	r19
    24d8:	17 95       	ror	r17
    24da:	17 94       	ror	r1
    24dc:	e1 18       	sub	r14, r1
    24de:	f1 0a       	sbc	r15, r17
    24e0:	43 0b       	sbc	r20, r19
    24e2:	56 0b       	sbc	r21, r22
    24e4:	c9 0b       	sbc	r28, r25
    24e6:	d0 09       	sbc	r29, r0
    24e8:	98 f0       	brcs	.+38     	; 0x2510 <__ftoa_engine+0x19a>
    24ea:	23 95       	inc	r18
    24ec:	7e 91       	ld	r23, -X
    24ee:	73 95       	inc	r23
    24f0:	7a 33       	cpi	r23, 0x3A	; 58
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <__ftoa_engine+0x180>
    24f4:	70 e3       	ldi	r23, 0x30	; 48
    24f6:	7c 93       	st	X, r23
    24f8:	20 13       	cpse	r18, r16
    24fa:	b8 f7       	brcc	.-18     	; 0x24ea <__ftoa_engine+0x174>
    24fc:	7e 91       	ld	r23, -X
    24fe:	70 61       	ori	r23, 0x10	; 16
    2500:	7d 93       	st	X+, r23
    2502:	30 f0       	brcs	.+12     	; 0x2510 <__ftoa_engine+0x19a>
    2504:	83 95       	inc	r24
    2506:	71 e3       	ldi	r23, 0x31	; 49
    2508:	7d 93       	st	X+, r23
    250a:	70 e3       	ldi	r23, 0x30	; 48
    250c:	2a 95       	dec	r18
    250e:	e1 f7       	brne	.-8      	; 0x2508 <__ftoa_engine+0x192>
    2510:	11 24       	eor	r1, r1
    2512:	ef 90       	pop	r14
    2514:	ff 90       	pop	r15
    2516:	0f 91       	pop	r16
    2518:	1f 91       	pop	r17
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	99 27       	eor	r25, r25
    2520:	87 fd       	sbrc	r24, 7
    2522:	90 95       	com	r25
    2524:	08 95       	ret

00002526 <strnlen_P>:
    2526:	fc 01       	movw	r30, r24
    2528:	05 90       	lpm	r0, Z+
    252a:	61 50       	subi	r22, 0x01	; 1
    252c:	70 40       	sbci	r23, 0x00	; 0
    252e:	01 10       	cpse	r0, r1
    2530:	d8 f7       	brcc	.-10     	; 0x2528 <strnlen_P+0x2>
    2532:	80 95       	com	r24
    2534:	90 95       	com	r25
    2536:	8e 0f       	add	r24, r30
    2538:	9f 1f       	adc	r25, r31
    253a:	08 95       	ret

0000253c <strnlen>:
    253c:	fc 01       	movw	r30, r24
    253e:	61 50       	subi	r22, 0x01	; 1
    2540:	70 40       	sbci	r23, 0x00	; 0
    2542:	01 90       	ld	r0, Z+
    2544:	01 10       	cpse	r0, r1
    2546:	d8 f7       	brcc	.-10     	; 0x253e <strnlen+0x2>
    2548:	80 95       	com	r24
    254a:	90 95       	com	r25
    254c:	8e 0f       	add	r24, r30
    254e:	9f 1f       	adc	r25, r31
    2550:	08 95       	ret

00002552 <fdevopen>:
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	31 f4       	brne	.+12     	; 0x256a <fdevopen+0x18>
    255e:	61 15       	cp	r22, r1
    2560:	71 05       	cpc	r23, r1
    2562:	19 f4       	brne	.+6      	; 0x256a <fdevopen+0x18>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	39 c0       	rjmp	.+114    	; 0x25dc <fdevopen+0x8a>
    256a:	8b 01       	movw	r16, r22
    256c:	ec 01       	movw	r28, r24
    256e:	6e e0       	ldi	r22, 0x0E	; 14
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	e0 d0       	rcall	.+448    	; 0x2738 <calloc>
    2578:	fc 01       	movw	r30, r24
    257a:	89 2b       	or	r24, r25
    257c:	99 f3       	breq	.-26     	; 0x2564 <fdevopen+0x12>
    257e:	80 e8       	ldi	r24, 0x80	; 128
    2580:	83 83       	std	Z+3, r24	; 0x03
    2582:	01 15       	cp	r16, r1
    2584:	11 05       	cpc	r17, r1
    2586:	71 f0       	breq	.+28     	; 0x25a4 <fdevopen+0x52>
    2588:	02 87       	std	Z+10, r16	; 0x0a
    258a:	13 87       	std	Z+11, r17	; 0x0b
    258c:	81 e8       	ldi	r24, 0x81	; 129
    258e:	83 83       	std	Z+3, r24	; 0x03
    2590:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <__iob>
    2594:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <__iob+0x1>
    2598:	89 2b       	or	r24, r25
    259a:	21 f4       	brne	.+8      	; 0x25a4 <fdevopen+0x52>
    259c:	e0 93 38 20 	sts	0x2038, r30	; 0x802038 <__iob>
    25a0:	f0 93 39 20 	sts	0x2039, r31	; 0x802039 <__iob+0x1>
    25a4:	20 97       	sbiw	r28, 0x00	; 0
    25a6:	c9 f0       	breq	.+50     	; 0x25da <fdevopen+0x88>
    25a8:	c0 87       	std	Z+8, r28	; 0x08
    25aa:	d1 87       	std	Z+9, r29	; 0x09
    25ac:	83 81       	ldd	r24, Z+3	; 0x03
    25ae:	82 60       	ori	r24, 0x02	; 2
    25b0:	83 83       	std	Z+3, r24	; 0x03
    25b2:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__iob+0x2>
    25b6:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <__iob+0x3>
    25ba:	89 2b       	or	r24, r25
    25bc:	71 f4       	brne	.+28     	; 0x25da <fdevopen+0x88>
    25be:	e0 93 3a 20 	sts	0x203A, r30	; 0x80203a <__iob+0x2>
    25c2:	f0 93 3b 20 	sts	0x203B, r31	; 0x80203b <__iob+0x3>
    25c6:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <__iob+0x4>
    25ca:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <__iob+0x5>
    25ce:	89 2b       	or	r24, r25
    25d0:	21 f4       	brne	.+8      	; 0x25da <fdevopen+0x88>
    25d2:	e0 93 3c 20 	sts	0x203C, r30	; 0x80203c <__iob+0x4>
    25d6:	f0 93 3d 20 	sts	0x203D, r31	; 0x80203d <__iob+0x5>
    25da:	cf 01       	movw	r24, r30
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <fputc>:
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	fb 01       	movw	r30, r22
    25f0:	23 81       	ldd	r18, Z+3	; 0x03
    25f2:	21 fd       	sbrc	r18, 1
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <fputc+0x16>
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	9f ef       	ldi	r25, 0xFF	; 255
    25fa:	28 c0       	rjmp	.+80     	; 0x264c <fputc+0x66>
    25fc:	22 ff       	sbrs	r18, 2
    25fe:	16 c0       	rjmp	.+44     	; 0x262c <fputc+0x46>
    2600:	46 81       	ldd	r20, Z+6	; 0x06
    2602:	57 81       	ldd	r21, Z+7	; 0x07
    2604:	24 81       	ldd	r18, Z+4	; 0x04
    2606:	35 81       	ldd	r19, Z+5	; 0x05
    2608:	42 17       	cp	r20, r18
    260a:	53 07       	cpc	r21, r19
    260c:	44 f4       	brge	.+16     	; 0x261e <fputc+0x38>
    260e:	a0 81       	ld	r26, Z
    2610:	b1 81       	ldd	r27, Z+1	; 0x01
    2612:	9d 01       	movw	r18, r26
    2614:	2f 5f       	subi	r18, 0xFF	; 255
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	20 83       	st	Z, r18
    261a:	31 83       	std	Z+1, r19	; 0x01
    261c:	8c 93       	st	X, r24
    261e:	26 81       	ldd	r18, Z+6	; 0x06
    2620:	37 81       	ldd	r19, Z+7	; 0x07
    2622:	2f 5f       	subi	r18, 0xFF	; 255
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	26 83       	std	Z+6, r18	; 0x06
    2628:	37 83       	std	Z+7, r19	; 0x07
    262a:	10 c0       	rjmp	.+32     	; 0x264c <fputc+0x66>
    262c:	eb 01       	movw	r28, r22
    262e:	09 2f       	mov	r16, r25
    2630:	18 2f       	mov	r17, r24
    2632:	00 84       	ldd	r0, Z+8	; 0x08
    2634:	f1 85       	ldd	r31, Z+9	; 0x09
    2636:	e0 2d       	mov	r30, r0
    2638:	19 95       	eicall
    263a:	89 2b       	or	r24, r25
    263c:	e1 f6       	brne	.-72     	; 0x25f6 <fputc+0x10>
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	8e 83       	std	Y+6, r24	; 0x06
    2646:	9f 83       	std	Y+7, r25	; 0x07
    2648:	81 2f       	mov	r24, r17
    264a:	90 2f       	mov	r25, r16
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	08 95       	ret

00002656 <printf>:
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	ae 01       	movw	r20, r28
    2660:	4a 5f       	subi	r20, 0xFA	; 250
    2662:	5f 4f       	sbci	r21, 0xFF	; 255
    2664:	fa 01       	movw	r30, r20
    2666:	61 91       	ld	r22, Z+
    2668:	71 91       	ld	r23, Z+
    266a:	af 01       	movw	r20, r30
    266c:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__iob+0x2>
    2670:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <__iob+0x3>
    2674:	51 d9       	rcall	.-3422   	; 0x1918 <vfprintf>
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	08 95       	ret

0000267c <__ultoa_invert>:
    267c:	fa 01       	movw	r30, r20
    267e:	aa 27       	eor	r26, r26
    2680:	28 30       	cpi	r18, 0x08	; 8
    2682:	51 f1       	breq	.+84     	; 0x26d8 <__ultoa_invert+0x5c>
    2684:	20 31       	cpi	r18, 0x10	; 16
    2686:	81 f1       	breq	.+96     	; 0x26e8 <__ultoa_invert+0x6c>
    2688:	e8 94       	clt
    268a:	6f 93       	push	r22
    268c:	6e 7f       	andi	r22, 0xFE	; 254
    268e:	6e 5f       	subi	r22, 0xFE	; 254
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	af 4f       	sbci	r26, 0xFF	; 255
    2698:	b1 e0       	ldi	r27, 0x01	; 1
    269a:	3e d0       	rcall	.+124    	; 0x2718 <__ultoa_invert+0x9c>
    269c:	b4 e0       	ldi	r27, 0x04	; 4
    269e:	3c d0       	rcall	.+120    	; 0x2718 <__ultoa_invert+0x9c>
    26a0:	67 0f       	add	r22, r23
    26a2:	78 1f       	adc	r23, r24
    26a4:	89 1f       	adc	r24, r25
    26a6:	9a 1f       	adc	r25, r26
    26a8:	a1 1d       	adc	r26, r1
    26aa:	68 0f       	add	r22, r24
    26ac:	79 1f       	adc	r23, r25
    26ae:	8a 1f       	adc	r24, r26
    26b0:	91 1d       	adc	r25, r1
    26b2:	a1 1d       	adc	r26, r1
    26b4:	6a 0f       	add	r22, r26
    26b6:	71 1d       	adc	r23, r1
    26b8:	81 1d       	adc	r24, r1
    26ba:	91 1d       	adc	r25, r1
    26bc:	a1 1d       	adc	r26, r1
    26be:	20 d0       	rcall	.+64     	; 0x2700 <__ultoa_invert+0x84>
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <__ultoa_invert+0x48>
    26c2:	68 94       	set
    26c4:	3f 91       	pop	r19
    26c6:	2a e0       	ldi	r18, 0x0A	; 10
    26c8:	26 9f       	mul	r18, r22
    26ca:	11 24       	eor	r1, r1
    26cc:	30 19       	sub	r19, r0
    26ce:	30 5d       	subi	r19, 0xD0	; 208
    26d0:	31 93       	st	Z+, r19
    26d2:	de f6       	brtc	.-74     	; 0x268a <__ultoa_invert+0xe>
    26d4:	cf 01       	movw	r24, r30
    26d6:	08 95       	ret
    26d8:	46 2f       	mov	r20, r22
    26da:	47 70       	andi	r20, 0x07	; 7
    26dc:	40 5d       	subi	r20, 0xD0	; 208
    26de:	41 93       	st	Z+, r20
    26e0:	b3 e0       	ldi	r27, 0x03	; 3
    26e2:	0f d0       	rcall	.+30     	; 0x2702 <__ultoa_invert+0x86>
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0x5c>
    26e6:	f6 cf       	rjmp	.-20     	; 0x26d4 <__ultoa_invert+0x58>
    26e8:	46 2f       	mov	r20, r22
    26ea:	4f 70       	andi	r20, 0x0F	; 15
    26ec:	40 5d       	subi	r20, 0xD0	; 208
    26ee:	4a 33       	cpi	r20, 0x3A	; 58
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <__ultoa_invert+0x7c>
    26f2:	49 5d       	subi	r20, 0xD9	; 217
    26f4:	31 fd       	sbrc	r19, 1
    26f6:	40 52       	subi	r20, 0x20	; 32
    26f8:	41 93       	st	Z+, r20
    26fa:	02 d0       	rcall	.+4      	; 0x2700 <__ultoa_invert+0x84>
    26fc:	a9 f7       	brne	.-22     	; 0x26e8 <__ultoa_invert+0x6c>
    26fe:	ea cf       	rjmp	.-44     	; 0x26d4 <__ultoa_invert+0x58>
    2700:	b4 e0       	ldi	r27, 0x04	; 4
    2702:	a6 95       	lsr	r26
    2704:	97 95       	ror	r25
    2706:	87 95       	ror	r24
    2708:	77 95       	ror	r23
    270a:	67 95       	ror	r22
    270c:	ba 95       	dec	r27
    270e:	c9 f7       	brne	.-14     	; 0x2702 <__ultoa_invert+0x86>
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	61 05       	cpc	r22, r1
    2714:	71 05       	cpc	r23, r1
    2716:	08 95       	ret
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
    271c:	0a 2e       	mov	r0, r26
    271e:	06 94       	lsr	r0
    2720:	57 95       	ror	r21
    2722:	47 95       	ror	r20
    2724:	37 95       	ror	r19
    2726:	27 95       	ror	r18
    2728:	ba 95       	dec	r27
    272a:	c9 f7       	brne	.-14     	; 0x271e <__ultoa_invert+0xa2>
    272c:	62 0f       	add	r22, r18
    272e:	73 1f       	adc	r23, r19
    2730:	84 1f       	adc	r24, r20
    2732:	95 1f       	adc	r25, r21
    2734:	a0 1d       	adc	r26, r0
    2736:	08 95       	ret

00002738 <calloc>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	86 9f       	mul	r24, r22
    2742:	80 01       	movw	r16, r0
    2744:	87 9f       	mul	r24, r23
    2746:	10 0d       	add	r17, r0
    2748:	96 9f       	mul	r25, r22
    274a:	10 0d       	add	r17, r0
    274c:	11 24       	eor	r1, r1
    274e:	c8 01       	movw	r24, r16
    2750:	0d d0       	rcall	.+26     	; 0x276c <malloc>
    2752:	ec 01       	movw	r28, r24
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	21 f0       	breq	.+8      	; 0x2760 <calloc+0x28>
    2758:	a8 01       	movw	r20, r16
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	33 d1       	rcall	.+614    	; 0x29c6 <memset>
    2760:	ce 01       	movw	r24, r28
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	08 95       	ret

0000276c <malloc>:
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	91 05       	cpc	r25, r1
    2774:	10 f4       	brcc	.+4      	; 0x277a <malloc+0xe>
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <__flp>
    277e:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <__flp+0x1>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	c0 e0       	ldi	r28, 0x00	; 0
    2788:	d0 e0       	ldi	r29, 0x00	; 0
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	11 f1       	breq	.+68     	; 0x27d2 <malloc+0x66>
    278e:	40 81       	ld	r20, Z
    2790:	51 81       	ldd	r21, Z+1	; 0x01
    2792:	48 17       	cp	r20, r24
    2794:	59 07       	cpc	r21, r25
    2796:	c0 f0       	brcs	.+48     	; 0x27c8 <malloc+0x5c>
    2798:	48 17       	cp	r20, r24
    279a:	59 07       	cpc	r21, r25
    279c:	61 f4       	brne	.+24     	; 0x27b6 <malloc+0x4a>
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 97       	sbiw	r28, 0x00	; 0
    27a4:	19 f0       	breq	.+6      	; 0x27ac <malloc+0x40>
    27a6:	8a 83       	std	Y+2, r24	; 0x02
    27a8:	9b 83       	std	Y+3, r25	; 0x03
    27aa:	2b c0       	rjmp	.+86     	; 0x2802 <malloc+0x96>
    27ac:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__flp>
    27b0:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__flp+0x1>
    27b4:	26 c0       	rjmp	.+76     	; 0x2802 <malloc+0x96>
    27b6:	21 15       	cp	r18, r1
    27b8:	31 05       	cpc	r19, r1
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <malloc+0x56>
    27bc:	42 17       	cp	r20, r18
    27be:	53 07       	cpc	r21, r19
    27c0:	18 f4       	brcc	.+6      	; 0x27c8 <malloc+0x5c>
    27c2:	9a 01       	movw	r18, r20
    27c4:	be 01       	movw	r22, r28
    27c6:	df 01       	movw	r26, r30
    27c8:	ef 01       	movw	r28, r30
    27ca:	02 80       	ldd	r0, Z+2	; 0x02
    27cc:	f3 81       	ldd	r31, Z+3	; 0x03
    27ce:	e0 2d       	mov	r30, r0
    27d0:	dc cf       	rjmp	.-72     	; 0x278a <malloc+0x1e>
    27d2:	21 15       	cp	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	09 f1       	breq	.+66     	; 0x281a <malloc+0xae>
    27d8:	28 1b       	sub	r18, r24
    27da:	39 0b       	sbc	r19, r25
    27dc:	24 30       	cpi	r18, 0x04	; 4
    27de:	31 05       	cpc	r19, r1
    27e0:	90 f4       	brcc	.+36     	; 0x2806 <malloc+0x9a>
    27e2:	12 96       	adiw	r26, 0x02	; 2
    27e4:	8d 91       	ld	r24, X+
    27e6:	9c 91       	ld	r25, X
    27e8:	13 97       	sbiw	r26, 0x03	; 3
    27ea:	61 15       	cp	r22, r1
    27ec:	71 05       	cpc	r23, r1
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <malloc+0x8c>
    27f0:	fb 01       	movw	r30, r22
    27f2:	82 83       	std	Z+2, r24	; 0x02
    27f4:	93 83       	std	Z+3, r25	; 0x03
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <malloc+0x94>
    27f8:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__flp>
    27fc:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__flp+0x1>
    2800:	fd 01       	movw	r30, r26
    2802:	32 96       	adiw	r30, 0x02	; 2
    2804:	44 c0       	rjmp	.+136    	; 0x288e <malloc+0x122>
    2806:	fd 01       	movw	r30, r26
    2808:	e2 0f       	add	r30, r18
    280a:	f3 1f       	adc	r31, r19
    280c:	81 93       	st	Z+, r24
    280e:	91 93       	st	Z+, r25
    2810:	22 50       	subi	r18, 0x02	; 2
    2812:	31 09       	sbc	r19, r1
    2814:	2d 93       	st	X+, r18
    2816:	3c 93       	st	X, r19
    2818:	3a c0       	rjmp	.+116    	; 0x288e <malloc+0x122>
    281a:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    281e:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    2822:	23 2b       	or	r18, r19
    2824:	41 f4       	brne	.+16     	; 0x2836 <malloc+0xca>
    2826:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    282a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    282e:	20 93 3e 20 	sts	0x203E, r18	; 0x80203e <__brkval>
    2832:	30 93 3f 20 	sts	0x203F, r19	; 0x80203f <__brkval+0x1>
    2836:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    283a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    283e:	21 15       	cp	r18, r1
    2840:	31 05       	cpc	r19, r1
    2842:	41 f4       	brne	.+16     	; 0x2854 <malloc+0xe8>
    2844:	2d b7       	in	r18, 0x3d	; 61
    2846:	3e b7       	in	r19, 0x3e	; 62
    2848:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    284c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2850:	24 1b       	sub	r18, r20
    2852:	35 0b       	sbc	r19, r21
    2854:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <__brkval>
    2858:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <__brkval+0x1>
    285c:	e2 17       	cp	r30, r18
    285e:	f3 07       	cpc	r31, r19
    2860:	a0 f4       	brcc	.+40     	; 0x288a <malloc+0x11e>
    2862:	2e 1b       	sub	r18, r30
    2864:	3f 0b       	sbc	r19, r31
    2866:	28 17       	cp	r18, r24
    2868:	39 07       	cpc	r19, r25
    286a:	78 f0       	brcs	.+30     	; 0x288a <malloc+0x11e>
    286c:	ac 01       	movw	r20, r24
    286e:	4e 5f       	subi	r20, 0xFE	; 254
    2870:	5f 4f       	sbci	r21, 0xFF	; 255
    2872:	24 17       	cp	r18, r20
    2874:	35 07       	cpc	r19, r21
    2876:	48 f0       	brcs	.+18     	; 0x288a <malloc+0x11e>
    2878:	4e 0f       	add	r20, r30
    287a:	5f 1f       	adc	r21, r31
    287c:	40 93 3e 20 	sts	0x203E, r20	; 0x80203e <__brkval>
    2880:	50 93 3f 20 	sts	0x203F, r21	; 0x80203f <__brkval+0x1>
    2884:	81 93       	st	Z+, r24
    2886:	91 93       	st	Z+, r25
    2888:	02 c0       	rjmp	.+4      	; 0x288e <malloc+0x122>
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	cf 01       	movw	r24, r30
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <free>:
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <free+0xe>
    28a2:	8c c0       	rjmp	.+280    	; 0x29bc <free+0x126>
    28a4:	fc 01       	movw	r30, r24
    28a6:	32 97       	sbiw	r30, 0x02	; 2
    28a8:	12 82       	std	Z+2, r1	; 0x02
    28aa:	13 82       	std	Z+3, r1	; 0x03
    28ac:	00 91 40 20 	lds	r16, 0x2040	; 0x802040 <__flp>
    28b0:	10 91 41 20 	lds	r17, 0x2041	; 0x802041 <__flp+0x1>
    28b4:	01 15       	cp	r16, r1
    28b6:	11 05       	cpc	r17, r1
    28b8:	81 f4       	brne	.+32     	; 0x28da <free+0x44>
    28ba:	20 81       	ld	r18, Z
    28bc:	31 81       	ldd	r19, Z+1	; 0x01
    28be:	82 0f       	add	r24, r18
    28c0:	93 1f       	adc	r25, r19
    28c2:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    28c6:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    28ca:	28 17       	cp	r18, r24
    28cc:	39 07       	cpc	r19, r25
    28ce:	79 f5       	brne	.+94     	; 0x292e <free+0x98>
    28d0:	e0 93 3e 20 	sts	0x203E, r30	; 0x80203e <__brkval>
    28d4:	f0 93 3f 20 	sts	0x203F, r31	; 0x80203f <__brkval+0x1>
    28d8:	71 c0       	rjmp	.+226    	; 0x29bc <free+0x126>
    28da:	d8 01       	movw	r26, r16
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	ae 17       	cp	r26, r30
    28e2:	bf 07       	cpc	r27, r31
    28e4:	50 f4       	brcc	.+20     	; 0x28fa <free+0x64>
    28e6:	12 96       	adiw	r26, 0x02	; 2
    28e8:	2d 91       	ld	r18, X+
    28ea:	3c 91       	ld	r19, X
    28ec:	13 97       	sbiw	r26, 0x03	; 3
    28ee:	ad 01       	movw	r20, r26
    28f0:	21 15       	cp	r18, r1
    28f2:	31 05       	cpc	r19, r1
    28f4:	09 f1       	breq	.+66     	; 0x2938 <free+0xa2>
    28f6:	d9 01       	movw	r26, r18
    28f8:	f3 cf       	rjmp	.-26     	; 0x28e0 <free+0x4a>
    28fa:	9d 01       	movw	r18, r26
    28fc:	da 01       	movw	r26, r20
    28fe:	22 83       	std	Z+2, r18	; 0x02
    2900:	33 83       	std	Z+3, r19	; 0x03
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	86 0f       	add	r24, r22
    2908:	97 1f       	adc	r25, r23
    290a:	82 17       	cp	r24, r18
    290c:	93 07       	cpc	r25, r19
    290e:	69 f4       	brne	.+26     	; 0x292a <free+0x94>
    2910:	ec 01       	movw	r28, r24
    2912:	28 81       	ld	r18, Y
    2914:	39 81       	ldd	r19, Y+1	; 0x01
    2916:	26 0f       	add	r18, r22
    2918:	37 1f       	adc	r19, r23
    291a:	2e 5f       	subi	r18, 0xFE	; 254
    291c:	3f 4f       	sbci	r19, 0xFF	; 255
    291e:	20 83       	st	Z, r18
    2920:	31 83       	std	Z+1, r19	; 0x01
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	9b 81       	ldd	r25, Y+3	; 0x03
    2926:	82 83       	std	Z+2, r24	; 0x02
    2928:	93 83       	std	Z+3, r25	; 0x03
    292a:	45 2b       	or	r20, r21
    292c:	29 f4       	brne	.+10     	; 0x2938 <free+0xa2>
    292e:	e0 93 40 20 	sts	0x2040, r30	; 0x802040 <__flp>
    2932:	f0 93 41 20 	sts	0x2041, r31	; 0x802041 <__flp+0x1>
    2936:	42 c0       	rjmp	.+132    	; 0x29bc <free+0x126>
    2938:	12 96       	adiw	r26, 0x02	; 2
    293a:	ed 93       	st	X+, r30
    293c:	fc 93       	st	X, r31
    293e:	13 97       	sbiw	r26, 0x03	; 3
    2940:	ed 01       	movw	r28, r26
    2942:	49 91       	ld	r20, Y+
    2944:	59 91       	ld	r21, Y+
    2946:	9e 01       	movw	r18, r28
    2948:	24 0f       	add	r18, r20
    294a:	35 1f       	adc	r19, r21
    294c:	e2 17       	cp	r30, r18
    294e:	f3 07       	cpc	r31, r19
    2950:	71 f4       	brne	.+28     	; 0x296e <free+0xd8>
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	84 0f       	add	r24, r20
    2958:	95 1f       	adc	r25, r21
    295a:	02 96       	adiw	r24, 0x02	; 2
    295c:	8d 93       	st	X+, r24
    295e:	9c 93       	st	X, r25
    2960:	11 97       	sbiw	r26, 0x01	; 1
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	12 96       	adiw	r26, 0x02	; 2
    2968:	8d 93       	st	X+, r24
    296a:	9c 93       	st	X, r25
    296c:	13 97       	sbiw	r26, 0x03	; 3
    296e:	e0 e0       	ldi	r30, 0x00	; 0
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	d8 01       	movw	r26, r16
    2974:	12 96       	adiw	r26, 0x02	; 2
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
    297a:	13 97       	sbiw	r26, 0x03	; 3
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	19 f0       	breq	.+6      	; 0x2986 <free+0xf0>
    2980:	f8 01       	movw	r30, r16
    2982:	8c 01       	movw	r16, r24
    2984:	f6 cf       	rjmp	.-20     	; 0x2972 <free+0xdc>
    2986:	8d 91       	ld	r24, X+
    2988:	9c 91       	ld	r25, X
    298a:	98 01       	movw	r18, r16
    298c:	2e 5f       	subi	r18, 0xFE	; 254
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	82 0f       	add	r24, r18
    2992:	93 1f       	adc	r25, r19
    2994:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
    2998:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
    299c:	28 17       	cp	r18, r24
    299e:	39 07       	cpc	r19, r25
    29a0:	69 f4       	brne	.+26     	; 0x29bc <free+0x126>
    29a2:	30 97       	sbiw	r30, 0x00	; 0
    29a4:	29 f4       	brne	.+10     	; 0x29b0 <free+0x11a>
    29a6:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <__flp>
    29aa:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <__flp+0x1>
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <free+0x11e>
    29b0:	12 82       	std	Z+2, r1	; 0x02
    29b2:	13 82       	std	Z+3, r1	; 0x03
    29b4:	00 93 3e 20 	sts	0x203E, r16	; 0x80203e <__brkval>
    29b8:	10 93 3f 20 	sts	0x203F, r17	; 0x80203f <__brkval+0x1>
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

000029c6 <memset>:
    29c6:	dc 01       	movw	r26, r24
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <memset+0x6>
    29ca:	6d 93       	st	X+, r22
    29cc:	41 50       	subi	r20, 0x01	; 1
    29ce:	50 40       	sbci	r21, 0x00	; 0
    29d0:	e0 f7       	brcc	.-8      	; 0x29ca <memset+0x4>
    29d2:	08 95       	ret

000029d4 <_exit>:
    29d4:	f8 94       	cli

000029d6 <__stop_program>:
    29d6:	ff cf       	rjmp	.-2      	; 0x29d6 <__stop_program>
